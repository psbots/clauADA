function e(e,t){return Object.keys(t).forEach(function(r){"default"===r||"__esModule"===r||Object.prototype.hasOwnProperty.call(e,r)||Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[r]}})}),e}function t(e,t,r,n){Object.defineProperty(e,t,{get:r,set:n,enumerable:!0,configurable:!0})}function r(e){return e&&e.__esModule?e.default:e}var n=globalThis,o={},i={},s=n.parcelRequirec9c5;null==s&&((s=function(e){if(e in o)return o[e].exports;if(e in i){var t=i[e];delete i[e];var r={id:e,exports:{}};return o[e]=r,t.call(r.exports,r,r.exports),r.exports}var n=Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}).register=function(e,t){i[e]=t},n.parcelRequirec9c5=s);var a=s.register;a("6qyar",function(r,n){t(r.exports,"BedrockRuntimeServiceException",()=>s("hoqHO").BedrockRuntimeServiceException);var o=s("1NcuB"),i=s("9nw27"),a=s("hOEYj"),u=s("Qij07");s("hoqHO"),e(r.exports,o),e(r.exports,i),e(r.exports,a),e(r.exports,u)}),a("1NcuB",function(e,r){t(e.exports,"BedrockRuntimeClient",()=>w),t(e.exports,"__Client",()=>s("akqME").Client);var n=s("7pz6N");s("iuYla");var o=s("9CLDm"),i=s("l5Cw7");s("69OOI");var a=s("6tjCb"),u=s("2RKXN");s("69lYW");var l=s("8p4jc");s("3q3gO");var c=s("dOWbV"),d=s("Qu9Uh"),f=s("cKbVh");s("d6J3N");var p=s("6ToBQ"),h=s("bcR81");s("dpFrj");var g=s("en7Rj");s("2YoXT");var m=s("26n63"),y=s("106m0");s("3ThPo");var E=s("akqME"),v=s("2ud0c"),S=s("it8kL"),b=s("hsif2"),x=s("1fHEW");class w extends E.Client{constructor(...[e]){let t=(0,b.getRuntimeConfig)(e||{}),r=(0,S.resolveClientEndpointParameters)(t),s=(0,l.resolveRegionConfig)(r),c=(0,g.resolveEndpointConfig)(s),E=(0,y.resolveRetryConfig)(c),w=(0,n.resolveHostHeaderConfig)(E),R=(0,u.resolveUserAgentConfig)(w),A=(0,p.resolveEventStreamSerdeConfig)(R),T=(0,v.resolveHttpAuthSchemeConfig)(A),_=(0,x.resolveRuntimeExtensions)(T,e?.extensions||[]);super(_),this.config=_,this.middlewareStack.use((0,m.getRetryPlugin)(this.config)),this.middlewareStack.use((0,h.getContentLengthPlugin)(this.config)),this.middlewareStack.use((0,n.getHostHeaderPlugin)(this.config)),this.middlewareStack.use((0,o.getLoggerPlugin)(this.config)),this.middlewareStack.use((0,i.getRecursionDetectionPlugin)(this.config)),this.middlewareStack.use((0,a.getUserAgentPlugin)(this.config)),this.middlewareStack.use((0,d.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config,{httpAuthSchemeParametersProvider:this.getDefaultHttpAuthSchemeParametersProvider(),identityProviderConfigProvider:this.getIdentityProviderConfigProvider()})),this.middlewareStack.use((0,f.getHttpSigningPlugin)(this.config))}destroy(){super.destroy()}getDefaultHttpAuthSchemeParametersProvider(){return v.defaultBedrockRuntimeHttpAuthSchemeParametersProvider}getIdentityProviderConfigProvider(){return async e=>new c.DefaultIdentityProviderConfig({"aws.auth#sigv4":e.credentials})}}}),a("7pz6N",function(e,r){t(e.exports,"resolveHostHeaderConfig",()=>o),t(e.exports,"getHostHeaderPlugin",()=>u),s("gR0fe");var n=s("j0mzq");function o(e){return e}let i=e=>t=>async r=>{if(!(0,n.HttpRequest).isInstance(r.request))return t(r);let{request:o}=r,{handlerProtocol:i=""}=e.requestHandler.metadata||{};if(i.indexOf("h2")>=0&&!o.headers[":authority"])delete o.headers.host,o.headers[":authority"]=o.hostname+(o.port?":"+o.port:"");else if(!o.headers.host){let e=o.hostname;null!=o.port&&(e+=`:${o.port}`),o.headers.host=e}return t(r)},a={name:"hostHeaderMiddleware",step:"build",priority:"low",tags:["HOST"],override:!0},u=e=>({applyToStack:t=>{t.add(i(e),a)}})}),a("gR0fe",function(e,r){t(e.exports,"getHttpHandlerExtensionConfiguration",()=>s("4xoI3").getHttpHandlerExtensionConfiguration),t(e.exports,"resolveHttpHandlerRuntimeConfig",()=>s("4xoI3").resolveHttpHandlerRuntimeConfig),t(e.exports,"HttpRequest",()=>s("j0mzq").HttpRequest),t(e.exports,"HttpResponse",()=>s("iP6o5").HttpResponse),s("135bV"),s("deEck"),s("iOOal"),s("6WaJc"),s("j0mzq"),s("iP6o5"),s("jXjeH"),s("5HKQ1")}),a("135bV",function(e,r){t(e.exports,"getHttpHandlerExtensionConfiguration",()=>s("4xoI3").getHttpHandlerExtensionConfiguration),t(e.exports,"resolveHttpHandlerRuntimeConfig",()=>s("4xoI3").resolveHttpHandlerRuntimeConfig),s("4xoI3")}),a("4xoI3",function(e,r){t(e.exports,"getHttpHandlerExtensionConfiguration",()=>n),t(e.exports,"resolveHttpHandlerRuntimeConfig",()=>o);let n=e=>{let t=e.httpHandler;return{setHttpHandler(e){t=e},httpHandler:()=>t,updateHttpClientConfig(e,r){t.updateHttpClientConfig(e,r)},httpHandlerConfigs:()=>t.httpHandlerConfigs()}},o=e=>({httpHandler:e.httpHandler()})}),a("deEck",function(e,t){s("9M3ne"),s("k2LNs")}),a("9M3ne",function(e,r){t(e.exports,"HttpApiKeyAuthLocation",()=>s("kJiuO").HttpApiKeyAuthLocation),t(e.exports,"EndpointURLScheme",()=>s("2KaXX").EndpointURLScheme),t(e.exports,"AlgorithmId",()=>s("bRjim").AlgorithmId),t(e.exports,"FieldPosition",()=>s("k2LNs").FieldPosition),t(e.exports,"SMITHY_CONTEXT_KEY",()=>s("gt3Fj").SMITHY_CONTEXT_KEY),s("w89pa"),s("lBgp9"),s("afgWv"),s("lspss"),s("avIII"),s("6I2uw"),s("5jNSQ"),s("7GaKx"),s("cJhAy"),s("2KaXX"),s("2gceN"),s("6Cq4q"),s("2fFkv"),s("k2LNs"),s("3l8a1"),s("38E5H"),s("h9bf6"),s("gt3Fj"),s("8EOa6"),s("czwLs"),s("y86uw"),s("dDIwg"),s("57bid"),s("aEtfm"),s("fUIyA"),s("3kNou"),s("jHC1c"),s("a65Jc"),s("g6Ufp"),s("7w1wS"),s("6VZEn"),s("67WTQ"),s("hiiHn"),s("6QJW9"),s("ipUtK"),s("heRWU")}),a("w89pa",function(e,t){}),a("lBgp9",function(e,r){t(e.exports,"HttpApiKeyAuthLocation",()=>s("kJiuO").HttpApiKeyAuthLocation),s("54TRc"),s("kJiuO"),s("aeeJZ"),s("11TzL"),s("cn1J4"),s("59PT5")}),a("54TRc",function(e,t){var r,n;(n=r||(r={})).HEADER="header",n.QUERY="query"}),a("kJiuO",function(e,r){var n,o;t(e.exports,"HttpApiKeyAuthLocation",()=>n),(o=n||(n={})).HEADER="header",o.QUERY="query"}),a("aeeJZ",function(e,t){}),a("11TzL",function(e,t){}),a("cn1J4",function(e,t){}),a("59PT5",function(e,t){}),a("afgWv",function(e,t){}),a("lspss",function(e,t){}),a("avIII",function(e,t){}),a("6I2uw",function(e,t){}),a("5jNSQ",function(e,t){s("grmw9"),s("9qZaJ"),s("chF1K")}),a("grmw9",function(e,t){}),a("9qZaJ",function(e,t){}),a("chF1K",function(e,t){}),a("7GaKx",function(e,t){}),a("cJhAy",function(e,t){}),a("2KaXX",function(e,r){var n,o;t(e.exports,"EndpointURLScheme",()=>n),(o=n||(n={})).HTTP="http",o.HTTPS="https"}),a("2gceN",function(e,t){s("ktmyf"),s("cCZEL"),s("bMxlo"),s("cxjIW"),s("emYvX")}),a("ktmyf",function(e,t){}),a("cCZEL",function(e,t){}),a("bMxlo",function(e,t){}),a("cxjIW",function(e,t){}),a("emYvX",function(e,t){}),a("6Cq4q",function(e,t){}),a("2fFkv",function(e,r){t(e.exports,"AlgorithmId",()=>s("bRjim").AlgorithmId),s("12P8G"),s("eVuhV"),s("bRjim")}),a("12P8G",function(e,t){s("bRjim")}),a("bRjim",function(e,r){var n,o;t(e.exports,"AlgorithmId",()=>n),t(e.exports,"getChecksumConfiguration",()=>i),t(e.exports,"resolveChecksumRuntimeConfig",()=>s),(o=n||(n={})).MD5="md5",o.CRC32="crc32",o.CRC32C="crc32c",o.SHA1="sha1",o.SHA256="sha256";let i=e=>{let t=[];return void 0!==e.sha256&&t.push({algorithmId:()=>n.SHA256,checksumConstructor:()=>e.sha256}),void 0!=e.md5&&t.push({algorithmId:()=>n.MD5,checksumConstructor:()=>e.md5}),{_checksumAlgorithms:t,addChecksumAlgorithm(e){this._checksumAlgorithms.push(e)},checksumAlgorithms(){return this._checksumAlgorithms}}},s=e=>{let t={};return e.checksumAlgorithms().forEach(e=>{t[e.algorithmId()]=e.checksumConstructor()}),t}}),a("eVuhV",function(e,t){}),a("k2LNs",function(e,r){var n,o;t(e.exports,"FieldPosition",()=>n),(o=n||(n={}))[o.HEADER=0]="HEADER",o[o.TRAILER=1]="TRAILER"}),a("3l8a1",function(e,t){}),a("38E5H",function(e,t){s("koOJ8"),s("aUtYw"),s("2dinx"),s("5qacg")}),a("koOJ8",function(e,t){}),a("aUtYw",function(e,t){}),a("2dinx",function(e,t){}),a("5qacg",function(e,t){}),a("h9bf6",function(e,t){}),a("gt3Fj",function(e,r){t(e.exports,"SMITHY_CONTEXT_KEY",()=>n);let n="__smithy_context"}),a("8EOa6",function(e,t){}),a("czwLs",function(e,t){var r,n;(n=r||(r={})).PROFILE="profile",n.SSO_SESSION="sso-session",n.SERVICES="services"}),a("y86uw",function(e,t){}),a("dDIwg",function(e,t){}),a("57bid",function(e,t){}),a("aEtfm",function(e,t){}),a("fUIyA",function(e,t){}),a("3kNou",function(e,t){}),a("jHC1c",function(e,t){}),a("a65Jc",function(e,t){}),a("g6Ufp",function(e,t){}),a("7w1wS",function(e,t){var r,n;(n=r||(r={})).HTTP_0_9="http/0.9",n.HTTP_1_0="http/1.0",n.TDS_8_0="tds/8.0"}),a("6VZEn",function(e,t){}),a("67WTQ",function(e,t){}),a("hiiHn",function(e,t){}),a("6QJW9",function(e,t){}),a("ipUtK",function(e,t){}),a("heRWU",function(e,t){}),a("iOOal",function(e,t){}),a("6WaJc",function(e,t){}),a("j0mzq",function(e,r){t(e.exports,"HttpRequest",()=>n);class n{constructor(e){this.method=e.method||"GET",this.hostname=e.hostname||"localhost",this.port=e.port,this.query=e.query||{},this.headers=e.headers||{},this.body=e.body,this.protocol=e.protocol?":"!==e.protocol.slice(-1)?`${e.protocol}:`:e.protocol:"https:",this.path=e.path?"/"!==e.path.charAt(0)?`/${e.path}`:e.path:"/",this.username=e.username,this.password=e.password,this.fragment=e.fragment}static isInstance(e){return!!e&&"method"in e&&"protocol"in e&&"hostname"in e&&"path"in e&&"object"==typeof e.query&&"object"==typeof e.headers}clone(){var e;let t=new n({...this,headers:{...this.headers}});return t.query&&(t.query=Object.keys(e=t.query).reduce((t,r)=>{let n=e[r];return{...t,[r]:Array.isArray(n)?[...n]:n}},{})),t}}}),a("iP6o5",function(e,r){t(e.exports,"HttpResponse",()=>n);class n{constructor(e){this.statusCode=e.statusCode,this.reason=e.reason,this.headers=e.headers||{},this.body=e.body}static isInstance(e){return!!e&&"number"==typeof e.statusCode&&"object"==typeof e.headers}}}),a("jXjeH",function(e,t){}),a("5HKQ1",function(e,t){}),a("iuYla",function(e,r){t(e.exports,"getLoggerPlugin",()=>s("9CLDm").getLoggerPlugin),s("9CLDm")}),a("9CLDm",function(e,r){t(e.exports,"getLoggerPlugin",()=>i);let n=()=>(e,t)=>async r=>{try{let n=await e(r),{clientName:o,commandName:i,logger:s,dynamoDbDocumentClientOptions:a={}}=t,{overrideInputFilterSensitiveLog:u,overrideOutputFilterSensitiveLog:l}=a,c=u??t.inputFilterSensitiveLog,d=l??t.outputFilterSensitiveLog,{$metadata:f,...p}=n.output;return s?.info?.({clientName:o,commandName:i,input:c(r.input),output:d(p),metadata:f}),n}catch(u){let{clientName:e,commandName:n,logger:o,dynamoDbDocumentClientOptions:i={}}=t,{overrideInputFilterSensitiveLog:s}=i,a=s??t.inputFilterSensitiveLog;throw o?.error?.({clientName:e,commandName:n,input:a(r.input),error:u,metadata:u.$metadata}),u}},o={name:"loggerMiddleware",tags:["LOGGER"],step:"initialize",override:!0},i=e=>({applyToStack:e=>{e.add(n(),o)}})}),a("l5Cw7",function(e,r){t(e.exports,"getRecursionDetectionPlugin",()=>l),s("gR0fe");var n=s("j0mzq"),o=s("gpdhY");let i="X-Amzn-Trace-Id",a=e=>t=>async r=>{let s;let{request:a}=r;if(!(0,n.HttpRequest).isInstance(a)||"node"!==e.runtime||a.headers.hasOwnProperty(i))return t(r);let u=o.env.AWS_LAMBDA_FUNCTION_NAME,l=o.env._X_AMZN_TRACE_ID;return"string"==typeof u&&u.length>0&&"string"==typeof(s=l)&&s.length>0&&(a.headers[i]=l),t({...r,request:a})},u={step:"build",tags:["RECURSION_DETECTION"],name:"recursionDetectionMiddleware",override:!0,priority:"low"},l=e=>({applyToStack:t=>{t.add(a(e),u)}})}),a("gpdhY",function(e,t){var r,n,o,i=e.exports={};function s(){throw Error("setTimeout has not been defined")}function a(){throw Error("clearTimeout has not been defined")}function u(e){if(r===setTimeout)return setTimeout(e,0);if((r===s||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:s}catch(e){r=s}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(e){n=a}}();var l=[],c=!1,d=-1;function f(){c&&o&&(c=!1,o.length?l=o.concat(l):d=-1,l.length&&p())}function p(){if(!c){var e=u(f);c=!0;for(var t=l.length;t;){for(o=l,l=[];++d<t;)o&&o[d].run();d=-1,t=l.length}o=null,c=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function g(){}i.nextTick=function(e){var t=Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];l.push(new h(e,t)),1!==l.length||c||u(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(e){return[]},i.binding=function(e){throw Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw Error("process.chdir is not supported")},i.umask=function(){return 0}}),a("69OOI",function(e,r){t(e.exports,"resolveUserAgentConfig",()=>s("2RKXN").resolveUserAgentConfig),t(e.exports,"getUserAgentPlugin",()=>s("6tjCb").getUserAgentPlugin),s("2RKXN"),s("6tjCb")}),a("2RKXN",function(e,r){t(e.exports,"resolveUserAgentConfig",()=>n);function n(e){return{...e,customUserAgent:"string"==typeof e.customUserAgent?[[e.customUserAgent]]:e.customUserAgent}}}),a("6tjCb",function(e,r){t(e.exports,"getUserAgentPlugin",()=>c),s("23sMu");var n=s("9KAnj");s("gR0fe");var o=s("j0mzq"),i=s("j1O6O");let a=e=>(t,r)=>async s=>{let{request:a}=s;if(!(0,o.HttpRequest).isInstance(a))return t(s);let{headers:l}=a,c=r?.userAgent?.map(u)||[],d=(await e.defaultUserAgentProvider()).map(u),f=e?.customUserAgent?.map(u)||[],p=(0,n.getUserAgentPrefix)(),h=(p?[p]:[]).concat([...d,...c,...f]).join(i.SPACE),g=[...d.filter(e=>e.startsWith("aws-sdk-")),...f].join(i.SPACE);return"browser"!==e.runtime?(g&&(l[i.X_AMZ_USER_AGENT]=l[i.X_AMZ_USER_AGENT]?`${l[i.USER_AGENT]} ${g}`:g),l[i.USER_AGENT]=h):l[i.X_AMZ_USER_AGENT]=h,t({...s,request:a})},u=e=>{let t=e[0].split(i.UA_NAME_SEPARATOR).map(e=>e.replace(i.UA_NAME_ESCAPE_REGEX,i.UA_ESCAPE_CHAR)).join(i.UA_NAME_SEPARATOR),r=e[1]?.replace(i.UA_VALUE_ESCAPE_REGEX,i.UA_ESCAPE_CHAR),n=t.indexOf(i.UA_NAME_SEPARATOR),o=t.substring(0,n),s=t.substring(n+1);return"api"===o&&(s=s.toLowerCase()),[o,s,r].filter(e=>e&&e.length>0).reduce((e,t,r)=>{switch(r){case 0:return t;case 1:return`${e}/${t}`;default:return`${e}#${t}`}},"")},l={name:"getUserAgentMiddleware",step:"build",priority:"low",tags:["SET_USER_AGENT","USER_AGENT"],override:!0},c=e=>({applyToStack:t=>{t.add(a(e),l)}})}),a("23sMu",function(e,r){t(e.exports,"awsEndpointFunctions",()=>s("cK5Yw").awsEndpointFunctions),t(e.exports,"getUserAgentPrefix",()=>s("9KAnj").getUserAgentPrefix),s("cK5Yw"),s("9KAnj"),s("kUYla"),s("9oxjS"),s("7l8fN")}),a("cK5Yw",function(e,r){t(e.exports,"awsEndpointFunctions",()=>u),s("a9W47");var n=s("8bcv8"),o=s("5HftZ"),i=s("3wxv1"),a=s("9KAnj");let u={isVirtualHostableS3Bucket:o.isVirtualHostableS3Bucket,parseArn:i.parseArn,partition:a.partition};n.customEndpointFunctions.aws=u}),a("a9W47",function(e,r){t(e.exports,"isIpAddress",()=>s("kUeuz").isIpAddress),t(e.exports,"isValidHostLabel",()=>s("gYrgv").isValidHostLabel),t(e.exports,"customEndpointFunctions",()=>s("8bcv8").customEndpointFunctions),t(e.exports,"resolveEndpoint",()=>s("2S0kJ").resolveEndpoint),s("kUeuz"),s("gYrgv"),s("8bcv8"),s("2S0kJ"),s("1aHya")}),a("kUeuz",function(e,r){t(e.exports,"isIpAddress",()=>o);let n=RegExp("^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$"),o=e=>n.test(e)||e.startsWith("[")&&e.endsWith("]")}),a("gYrgv",function(e,r){t(e.exports,"isValidHostLabel",()=>o);let n=RegExp("^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$"),o=(e,t=!1)=>{if(!t)return n.test(e);for(let t of e.split("."))if(!o(t))return!1;return!0}}),a("8bcv8",function(e,r){t(e.exports,"customEndpointFunctions",()=>n);let n={}}),a("2S0kJ",function(e,r){t(e.exports,"resolveEndpoint",()=>u),s("cEW3B");var n=s("1uvTf"),o=s("6neJ5");s("1aHya");var i=s("kYZpT");s("9EpNc");var a=s("imPvw");let u=(e,t)=>{let{endpointParams:r,logger:s}=t,{parameters:u,rules:l}=e;t.logger?.debug?.(`${n.debugId} Initial EndpointParams: ${o.toDebugString(r)}`);let c=Object.entries(u).filter(([,e])=>null!=e.default).map(([e,t])=>[e,t.default]);if(c.length>0)for(let[e,t]of c)r[e]=r[e]??t;for(let e of Object.entries(u).filter(([,e])=>e.required).map(([e])=>e))if(null==r[e])throw new i.EndpointError(`Missing required parameter: '${e}'`);let d=(0,a.evaluateRules)(l,{endpointParams:r,logger:s,referenceRecord:{}});if(t.endpointParams?.Endpoint)try{let{protocol:e,port:r}=new URL(t.endpointParams.Endpoint);d.url.protocol=e,d.url.port=r}catch(e){}return t.logger?.debug?.(`${n.debugId} Resolved endpoint: ${o.toDebugString(d)}`),d}}),a("cEW3B",function(e,r){t(e.exports,"debugId",()=>s("1uvTf").debugId),t(e.exports,"toDebugString",()=>s("6neJ5").toDebugString),s("1uvTf"),s("6neJ5")}),a("1uvTf",function(e,r){t(e.exports,"debugId",()=>n);let n="endpoints"}),a("6neJ5",function(e,r){t(e.exports,"toDebugString",()=>function e(t){return"object"!=typeof t||null==t?t:"ref"in t?`$${e(t.ref)}`:"fn"in t?`${t.fn}(${(t.argv||[]).map(e).join(", ")})`:JSON.stringify(t,null,2)})}),a("1aHya",function(e,r){t(e.exports,"EndpointError",()=>s("kYZpT").EndpointError),s("kYZpT"),s("bR9mq"),s("5img6"),s("a8I8z"),s("b4OKS"),s("fPw9j"),s("1o2f1")}),a("kYZpT",function(e,r){t(e.exports,"EndpointError",()=>n);class n extends Error{constructor(e){super(e),this.name="EndpointError"}}}),a("bR9mq",function(e,t){}),a("5img6",function(e,t){}),a("a8I8z",function(e,t){}),a("b4OKS",function(e,t){}),a("fPw9j",function(e,t){}),a("1o2f1",function(e,t){}),a("9EpNc",function(e,r){t(e.exports,"evaluateRules",()=>s("imPvw").evaluateRules),s("8bcv8"),s("imPvw")}),a("imPvw",function(e,r){t(e.exports,"evaluateRules",()=>u),s("1aHya");var n=s("kYZpT"),o=s("ggUq8"),i=s("ercwo"),a=s("UKQ6w");let u=(e,t)=>{for(let r of e)if("endpoint"===r.type){let e=(0,o.evaluateEndpointRule)(r,t);if(e)return e}else if("error"===r.type)(0,i.evaluateErrorRule)(r,t);else if("tree"===r.type){let e=(0,a.evaluateTreeRule)(r,t);if(e)return e}else throw new n.EndpointError(`Unknown endpoint rule: ${r}`);throw new n.EndpointError("Rules evaluation failed")}}),a("ggUq8",function(e,r){t(e.exports,"evaluateEndpointRule",()=>c),s("cEW3B");var n=s("1uvTf"),o=s("6neJ5"),i=s("9Zilp"),a=s("1dWHV"),u=s("aMnoD"),l=s("iolBk");let c=(e,t)=>{let{conditions:r,endpoint:s}=e,{result:c,referenceRecord:d}=(0,i.evaluateConditions)(r,t);if(!c)return;let f={...t,referenceRecord:{...t.referenceRecord,...d}},{url:p,properties:h,headers:g}=s;return t.logger?.debug?.(`${n.debugId} Resolving endpoint from template: ${o.toDebugString(s)}`),{...void 0!=g&&{headers:(0,a.getEndpointHeaders)(g,f)},...void 0!=h&&{properties:(0,u.getEndpointProperties)(h,f)},url:(0,l.getEndpointUrl)(p,f)}}}),a("9Zilp",function(e,r){t(e.exports,"evaluateConditions",()=>a),s("cEW3B");var n=s("1uvTf"),o=s("6neJ5"),i=s("hE6Zs");let a=(e=[],t)=>{let r={};for(let s of e){let{result:e,toAssign:a}=(0,i.evaluateCondition)(s,{...t,referenceRecord:{...t.referenceRecord,...r}});if(!e)return{result:e};a&&(r[a.name]=a.value,t.logger?.debug?.(`${n.debugId} assign: ${a.name} := ${o.toDebugString(a.value)}`))}return{result:!0,referenceRecord:r}}}),a("hE6Zs",function(e,r){t(e.exports,"evaluateCondition",()=>u),s("cEW3B");var n=s("1uvTf"),o=s("6neJ5");s("1aHya");var i=s("kYZpT"),a=s("kvtqz");let u=({assign:e,...t},r)=>{if(e&&e in r.referenceRecord)throw new i.EndpointError(`'${e}' is already defined in Reference Record.`);let s=(0,a.callFunction)(t,r);return r.logger?.debug?.(`${n.debugId} evaluateCondition: ${o.toDebugString(t)} = ${o.toDebugString(s)}`),{result:""===s||!!s,...null!=e&&{toAssign:{name:e,value:s}}}}}),a("kvtqz",function(e,r){t(e.exports,"callFunction",()=>a);var n=s("8bcv8"),o=s("i3ZMa"),i=s("vzAGO");let a=({fn:e,argv:t},r)=>{let s=t.map(e=>["boolean","number"].includes(typeof e)?e:(0,i.evaluateExpression)(e,"arg",r)),a=e.split(".");return a[0]in n.customEndpointFunctions&&null!=a[1]?(0,n.customEndpointFunctions)[a[0]][a[1]](...s):(0,o.endpointFunctions)[e](...s)}}),a("i3ZMa",function(e,r){t(e.exports,"endpointFunctions",()=>p),s("fcZpB");var n=s("rCWm9"),o=s("oH6AC"),i=s("9chQc"),a=s("gYrgv"),u=s("1jdIp"),l=s("gYhnv"),c=s("7tVQX"),d=s("bcJpu"),f=s("55rE4");let p={booleanEquals:n.booleanEquals,getAttr:o.getAttr,isSet:i.isSet,isValidHostLabel:a.isValidHostLabel,not:u.not,parseURL:l.parseURL,stringEquals:c.stringEquals,substring:d.substring,uriEncode:f.uriEncode}}),a("fcZpB",function(e,r){t(e.exports,"booleanEquals",()=>s("rCWm9").booleanEquals),t(e.exports,"getAttr",()=>s("oH6AC").getAttr),t(e.exports,"isSet",()=>s("9chQc").isSet),t(e.exports,"isValidHostLabel",()=>s("gYrgv").isValidHostLabel),t(e.exports,"not",()=>s("1jdIp").not),t(e.exports,"parseURL",()=>s("gYhnv").parseURL),t(e.exports,"stringEquals",()=>s("7tVQX").stringEquals),t(e.exports,"substring",()=>s("bcJpu").substring),t(e.exports,"uriEncode",()=>s("55rE4").uriEncode),s("rCWm9"),s("oH6AC"),s("9chQc"),s("gYrgv"),s("1jdIp"),s("gYhnv"),s("7tVQX"),s("bcJpu"),s("55rE4")}),a("rCWm9",function(e,r){t(e.exports,"booleanEquals",()=>n);let n=(e,t)=>e===t}),a("oH6AC",function(e,r){t(e.exports,"getAttr",()=>i),s("1aHya");var n=s("kYZpT"),o=s("fwrm8");let i=(e,t)=>(0,o.getAttrPathList)(t).reduce((r,o)=>{if("object"!=typeof r)throw new n.EndpointError(`Index '${o}' in '${t}' not found in '${JSON.stringify(e)}'`);return Array.isArray(r)?r[parseInt(o)]:r[o]},e)}),a("fwrm8",function(e,r){t(e.exports,"getAttrPathList",()=>o),s("1aHya");var n=s("kYZpT");let o=e=>{let t=e.split("."),r=[];for(let o of t){let t=o.indexOf("[");if(-1!==t){if(o.indexOf("]")!==o.length-1)throw new n.EndpointError(`Path: '${e}' does not end with ']'`);let i=o.slice(t+1,-1);if(Number.isNaN(parseInt(i)))throw new n.EndpointError(`Invalid array index: '${i}' in path: '${e}'`);0!==t&&r.push(o.slice(0,t)),r.push(i)}else r.push(o)}return r}}),a("9chQc",function(e,r){t(e.exports,"isSet",()=>n);let n=e=>null!=e}),a("1jdIp",function(e,r){t(e.exports,"not",()=>n);let n=e=>!e}),a("gYhnv",function(e,r){t(e.exports,"parseURL",()=>a),s("9M3ne");var n=s("2KaXX"),o=s("kUeuz");let i={[n.EndpointURLScheme.HTTP]:80,[n.EndpointURLScheme.HTTPS]:443},a=e=>{let t=(()=>{try{if(e instanceof URL)return e;if("object"==typeof e&&"hostname"in e){let{hostname:t,port:r,protocol:n="",path:o="",query:i={}}=e,s=new URL(`${n}//${t}${r?`:${r}`:""}${o}`);return s.search=Object.entries(i).map(([e,t])=>`${e}=${t}`).join("&"),s}return new URL(e)}catch(e){return null}})();if(!t)return console.error(`Unable to parse ${JSON.stringify(e)} as a whatwg URL.`),null;let r=t.href,{host:s,hostname:a,pathname:u,protocol:l,search:c}=t;if(c)return null;let d=l.slice(0,-1);if(!Object.values(n.EndpointURLScheme).includes(d))return null;let f=(0,o.isIpAddress)(a),p=r.includes(`${s}:${i[d]}`)||"string"==typeof e&&e.includes(`${s}:${i[d]}`),h=`${s}${p?`:${i[d]}`:""}`;return{scheme:d,authority:h,path:u,normalizedPath:u.endsWith("/")?u:`${u}/`,isIp:f}}}),a("7tVQX",function(e,r){t(e.exports,"stringEquals",()=>n);let n=(e,t)=>e===t}),a("bcJpu",function(e,r){t(e.exports,"substring",()=>n);let n=(e,t,r,n)=>t>=r||e.length<r?null:n?e.substring(e.length-r,e.length-t):e.substring(t,r)}),a("55rE4",function(e,r){t(e.exports,"uriEncode",()=>n);let n=e=>encodeURIComponent(e).replace(/[!*'()]/g,e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`)}),a("vzAGO",function(e,r){t(e.exports,"evaluateExpression",()=>u),s("1aHya");var n=s("kYZpT"),o=s("kvtqz"),i=s("leiZT"),a=s("c30yC");let u=(e,t,r)=>{if("string"==typeof e)return(0,i.evaluateTemplate)(e,r);if(e.fn)return(0,o.callFunction)(e,r);if(e.ref)return(0,a.getReferenceValue)(e,r);throw new n.EndpointError(`'${t}': ${String(e)} is not a string, function or reference.`)}}),a("leiZT",function(e,r){t(e.exports,"evaluateTemplate",()=>o),s("fcZpB");var n=s("oH6AC");let o=(e,t)=>{let r=[],o={...t.endpointParams,...t.referenceRecord},i=0;for(;i<e.length;){let t=e.indexOf("{",i);if(-1===t){r.push(e.slice(i));break}r.push(e.slice(i,t));let s=e.indexOf("}",t);if(-1===s){r.push(e.slice(t));break}"{"===e[t+1]&&"}"===e[s+1]&&(r.push(e.slice(t+1,s)),i=s+2);let a=e.substring(t+1,s);if(a.includes("#")){let[e,t]=a.split("#");r.push((0,n.getAttr)(o[e],t))}else r.push(o[a]);i=s+1}return r.join("")}}),a("c30yC",function(e,r){t(e.exports,"getReferenceValue",()=>n);let n=({ref:e},t)=>({...t.endpointParams,...t.referenceRecord})[e]}),a("1dWHV",function(e,r){t(e.exports,"getEndpointHeaders",()=>i),s("1aHya");var n=s("kYZpT"),o=s("vzAGO");let i=(e,t)=>Object.entries(e).reduce((e,[r,i])=>({...e,[r]:i.map(e=>{let i=(0,o.evaluateExpression)(e,"Header value entry",t);if("string"!=typeof i)throw new n.EndpointError(`Header '${r}' value '${i}' is not a string`);return i})}),{})}),a("aMnoD",function(e,r){t(e.exports,"getEndpointProperties",()=>o);var n=s("79pBq");let o=(e,t)=>Object.entries(e).reduce((e,[r,o])=>({...e,[r]:(0,n.getEndpointProperty)(o,t)}),{})}),a("79pBq",function(e,r){t(e.exports,"getEndpointProperty",()=>a),s("1aHya");var n=s("kYZpT"),o=s("leiZT"),i=s("aMnoD");let a=(e,t)=>{if(Array.isArray(e))return e.map(e=>a(e,t));switch(typeof e){case"string":return(0,o.evaluateTemplate)(e,t);case"object":if(null===e)throw new n.EndpointError(`Unexpected endpoint property: ${e}`);return(0,i.getEndpointProperties)(e,t);case"boolean":return e;default:throw new n.EndpointError(`Unexpected endpoint property type: ${typeof e}`)}}}),a("iolBk",function(e,r){t(e.exports,"getEndpointUrl",()=>i),s("1aHya");var n=s("kYZpT"),o=s("vzAGO");let i=(e,t)=>{let r=(0,o.evaluateExpression)(e,"Endpoint URL",t);if("string"==typeof r)try{return new URL(r)}catch(e){throw console.error(`Failed to construct URL with ${r}`,e),e}throw new n.EndpointError(`Endpoint URL must be a string, got ${typeof r}`)}}),a("ercwo",function(e,r){t(e.exports,"evaluateErrorRule",()=>a),s("1aHya");var n=s("kYZpT"),o=s("9Zilp"),i=s("vzAGO");let a=(e,t)=>{let{conditions:r,error:s}=e,{result:a,referenceRecord:u}=(0,o.evaluateConditions)(r,t);if(a)throw new n.EndpointError((0,i.evaluateExpression)(s,"Error",{...t,referenceRecord:{...t.referenceRecord,...u}}))}}),a("UKQ6w",function(e,r){t(e.exports,"evaluateTreeRule",()=>i);var n=s("9Zilp"),o=s("imPvw");let i=(e,t)=>{let{conditions:r,rules:i}=e,{result:s,referenceRecord:a}=(0,n.evaluateConditions)(r,t);if(s)return(0,o.evaluateRules)(i,{...t,referenceRecord:{...t.referenceRecord,...a}})}}),a("5HftZ",function(e,r){t(e.exports,"isVirtualHostableS3Bucket",()=>i),s("a9W47");var n=s("gYrgv");s("kUYla");var o=s("kUeuz");let i=(e,t=!1)=>{if(t){for(let t of e.split("."))if(!i(t))return!1;return!0}return!(!(0,n.isValidHostLabel)(e)||e.length<3||e.length>63||e!==e.toLowerCase()||(0,o.isIpAddress)(e))}}),a("kUYla",function(e,r){t(e.exports,"isIpAddress",()=>s("kUeuz").isIpAddress),s("a9W47"),s("kUeuz")}),a("3wxv1",function(e,r){t(e.exports,"parseArn",()=>n);let n=e=>{let t=e.split(":");if(t.length<6)return null;let[r,n,o,i,s,...a]=t;return"arn"!==r||""===n||""===o||""===a[0]?null:{partition:n,service:o,region:i,accountId:s,resourceId:a[0].includes("/")?a[0].split("/"):a}}}),a("9KAnj",function(e,n){t(e.exports,"partition",()=>i),t(e.exports,"getUserAgentPrefix",()=>a);let o=r(s("3Rsvu")),i=e=>{let{partitions:t}=o;for(let r of t){let{regions:t,outputs:n}=r;for(let[r,o]of Object.entries(t))if(r===e)return{...n,...o}}for(let r of t){let{regionRegex:t,outputs:n}=r;if(new RegExp(t).test(e))return{...n}}let r=t.find(e=>"aws"===e.id);if(!r)throw Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");return{...r.outputs}},a=()=>""}),a("3Rsvu",function(e,t){e.exports=JSON.parse('{"partitions":[{"id":"aws","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","implicitGlobalRegion":"us-east-1","name":"aws","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^(us|eu|ap|sa|ca|me|af|il)\\\\-\\\\w+\\\\-\\\\d+$","regions":{"af-south-1":{"description":"Africa (Cape Town)"},"ap-east-1":{"description":"Asia Pacific (Hong Kong)"},"ap-northeast-1":{"description":"Asia Pacific (Tokyo)"},"ap-northeast-2":{"description":"Asia Pacific (Seoul)"},"ap-northeast-3":{"description":"Asia Pacific (Osaka)"},"ap-south-1":{"description":"Asia Pacific (Mumbai)"},"ap-south-2":{"description":"Asia Pacific (Hyderabad)"},"ap-southeast-1":{"description":"Asia Pacific (Singapore)"},"ap-southeast-2":{"description":"Asia Pacific (Sydney)"},"ap-southeast-3":{"description":"Asia Pacific (Jakarta)"},"ap-southeast-4":{"description":"Asia Pacific (Melbourne)"},"aws-global":{"description":"AWS Standard global region"},"ca-central-1":{"description":"Canada (Central)"},"ca-west-1":{"description":"Canada West (Calgary)"},"eu-central-1":{"description":"Europe (Frankfurt)"},"eu-central-2":{"description":"Europe (Zurich)"},"eu-north-1":{"description":"Europe (Stockholm)"},"eu-south-1":{"description":"Europe (Milan)"},"eu-south-2":{"description":"Europe (Spain)"},"eu-west-1":{"description":"Europe (Ireland)"},"eu-west-2":{"description":"Europe (London)"},"eu-west-3":{"description":"Europe (Paris)"},"il-central-1":{"description":"Israel (Tel Aviv)"},"me-central-1":{"description":"Middle East (UAE)"},"me-south-1":{"description":"Middle East (Bahrain)"},"sa-east-1":{"description":"South America (Sao Paulo)"},"us-east-1":{"description":"US East (N. Virginia)"},"us-east-2":{"description":"US East (Ohio)"},"us-west-1":{"description":"US West (N. California)"},"us-west-2":{"description":"US West (Oregon)"}}},{"id":"aws-cn","outputs":{"dnsSuffix":"amazonaws.com.cn","dualStackDnsSuffix":"api.amazonwebservices.com.cn","implicitGlobalRegion":"cn-northwest-1","name":"aws-cn","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^cn\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-cn-global":{"description":"AWS China global region"},"cn-north-1":{"description":"China (Beijing)"},"cn-northwest-1":{"description":"China (Ningxia)"}}},{"id":"aws-us-gov","outputs":{"dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","implicitGlobalRegion":"us-gov-west-1","name":"aws-us-gov","supportsDualStack":true,"supportsFIPS":true},"regionRegex":"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-us-gov-global":{"description":"AWS GovCloud (US) global region"},"us-gov-east-1":{"description":"AWS GovCloud (US-East)"},"us-gov-west-1":{"description":"AWS GovCloud (US-West)"}}},{"id":"aws-iso","outputs":{"dnsSuffix":"c2s.ic.gov","dualStackDnsSuffix":"c2s.ic.gov","implicitGlobalRegion":"us-iso-east-1","name":"aws-iso","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-global":{"description":"AWS ISO (US) global region"},"us-iso-east-1":{"description":"US ISO East"},"us-iso-west-1":{"description":"US ISO WEST"}}},{"id":"aws-iso-b","outputs":{"dnsSuffix":"sc2s.sgov.gov","dualStackDnsSuffix":"sc2s.sgov.gov","implicitGlobalRegion":"us-isob-east-1","name":"aws-iso-b","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$","regions":{"aws-iso-b-global":{"description":"AWS ISOB (US) global region"},"us-isob-east-1":{"description":"US ISOB East (Ohio)"}}},{"id":"aws-iso-e","outputs":{"dnsSuffix":"cloud.adc-e.uk","dualStackDnsSuffix":"cloud.adc-e.uk","implicitGlobalRegion":"eu-isoe-west-1","name":"aws-iso-e","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^eu\\\\-isoe\\\\-\\\\w+\\\\-\\\\d+$","regions":{"eu-isoe-west-1":{"description":"EU ISOE West"}}},{"id":"aws-iso-f","outputs":{"dnsSuffix":"csp.hci.ic.gov","dualStackDnsSuffix":"csp.hci.ic.gov","implicitGlobalRegion":"us-isof-south-1","name":"aws-iso-f","supportsDualStack":false,"supportsFIPS":true},"regionRegex":"^us\\\\-isof\\\\-\\\\w+\\\\-\\\\d+$","regions":{}}],"version":"1.1"}')}),a("9oxjS",function(e,t){s("a9W47"),s("2S0kJ")}),a("7l8fN",function(e,t){s("9CKSW"),s("ksPpr"),s("8ckx2"),s("e6qXK"),s("7P3bp"),s("lSX1E")}),a("9CKSW",function(e,t){s("a9W47"),s("kYZpT")}),a("ksPpr",function(e,t){}),a("8ckx2",function(e,t){}),a("e6qXK",function(e,t){}),a("7P3bp",function(e,t){}),a("lSX1E",function(e,t){}),a("j1O6O",function(e,r){t(e.exports,"USER_AGENT",()=>n),t(e.exports,"X_AMZ_USER_AGENT",()=>o),t(e.exports,"SPACE",()=>i),t(e.exports,"UA_NAME_SEPARATOR",()=>s),t(e.exports,"UA_NAME_ESCAPE_REGEX",()=>a),t(e.exports,"UA_VALUE_ESCAPE_REGEX",()=>u),t(e.exports,"UA_ESCAPE_CHAR",()=>l);let n="user-agent",o="x-amz-user-agent",i=" ",s="/",a=/[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g,u=/[^\!\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w\#]/g,l="-"}),a("69lYW",function(e,r){t(e.exports,"DEFAULT_USE_DUALSTACK_ENDPOINT",()=>s("5BNad").DEFAULT_USE_DUALSTACK_ENDPOINT),t(e.exports,"DEFAULT_USE_FIPS_ENDPOINT",()=>s("jatwk").DEFAULT_USE_FIPS_ENDPOINT),t(e.exports,"resolveRegionConfig",()=>s("8p4jc").resolveRegionConfig),s("ay3YP"),s("f5oUZ"),s("3FU9l")}),a("ay3YP",function(e,r){t(e.exports,"DEFAULT_USE_DUALSTACK_ENDPOINT",()=>s("5BNad").DEFAULT_USE_DUALSTACK_ENDPOINT),t(e.exports,"DEFAULT_USE_FIPS_ENDPOINT",()=>s("jatwk").DEFAULT_USE_FIPS_ENDPOINT),s("5BNad"),s("jatwk"),s("jxmyw"),s("9zPPY")}),a("5BNad",function(e,r){t(e.exports,"DEFAULT_USE_DUALSTACK_ENDPOINT",()=>n),s("aCDXi"),s("74Y0a"),s("1yO3l");let n=!1}),a("aCDXi",function(e,r){t(e.exports,"booleanSelector",()=>s("74Y0a").booleanSelector),t(e.exports,"SelectorType",()=>s("1yO3l").SelectorType),s("74Y0a"),s("k3jn5"),s("1yO3l")}),a("74Y0a",function(e,r){t(e.exports,"booleanSelector",()=>n);let n=(e,t,r)=>{if(t in e){if("true"===e[t])return!0;if("false"===e[t])return!1;throw Error(`Cannot load ${r} "${t}". Expected "true" or "false", got ${e[t]}.`)}}}),a("k3jn5",function(e,t){}),a("1yO3l",function(e,r){var n,o;t(e.exports,"SelectorType",()=>n),(o=n||(n={})).ENV="env",o.CONFIG="shared config entry"}),a("jatwk",function(e,r){t(e.exports,"DEFAULT_USE_FIPS_ENDPOINT",()=>n),s("aCDXi"),s("74Y0a"),s("1yO3l");let n=!1}),a("jxmyw",function(e,t){s("aebvT"),s("5H56Q")}),a("aebvT",function(e,r){t(e.exports,"getSmithyContext",()=>s("ia9MB").getSmithyContext),t(e.exports,"normalizeProvider",()=>s("5H56Q").normalizeProvider),s("ia9MB"),s("5H56Q")}),a("ia9MB",function(e,r){t(e.exports,"getSmithyContext",()=>o),s("9M3ne");var n=s("gt3Fj");let o=e=>e[n.SMITHY_CONTEXT_KEY]||(e[n.SMITHY_CONTEXT_KEY]={})}),a("5H56Q",function(e,r){t(e.exports,"normalizeProvider",()=>n);let n=e=>{if("function"==typeof e)return e;let t=Promise.resolve(e);return()=>t}}),a("9zPPY",function(e,t){s("aebvT"),s("5H56Q"),s("3j2tP")}),a("3j2tP",function(e,r){t(e.exports,"getEndpointFromRegion",()=>n);let n=async e=>{let{tls:t=!0}=e,r=await e.region();if(!new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/).test(r))throw Error("Invalid region in client config");let n=await e.useDualstackEndpoint(),o=await e.useFipsEndpoint(),{hostname:i}=await e.regionInfoProvider(r,{useDualstackEndpoint:n,useFipsEndpoint:o})??{};if(!i)throw Error("Cannot resolve hostname from client config");return e.urlParser(`${t?"https:":"http:"}//${i}`)}}),a("f5oUZ",function(e,r){t(e.exports,"resolveRegionConfig",()=>s("8p4jc").resolveRegionConfig),s("eVdiH"),s("8p4jc")}),a("eVdiH",function(e,t){}),a("8p4jc",function(e,r){t(e.exports,"resolveRegionConfig",()=>i);var n=s("fSfsB"),o=s("k0ppS");let i=e=>{let{region:t,useFipsEndpoint:r}=e;if(!t)throw Error("Region is missing");return{...e,region:async()=>{if("string"==typeof t)return(0,n.getRealRegion)(t);let e=await t();return(0,n.getRealRegion)(e)},useFipsEndpoint:async()=>{let e="string"==typeof t?t:await t();return!!(0,o.isFipsRegion)(e)||("function"!=typeof r?Promise.resolve(!!r):r())}}}}),a("fSfsB",function(e,r){t(e.exports,"getRealRegion",()=>o);var n=s("k0ppS");let o=e=>(0,n.isFipsRegion)(e)?["fips-aws-global","aws-fips"].includes(e)?"us-east-1":e.replace(/fips-(dkr-|prod-)?|-fips/,""):e}),a("k0ppS",function(e,r){t(e.exports,"isFipsRegion",()=>n);let n=e=>"string"==typeof e&&(e.startsWith("fips-")||e.endsWith("-fips"))}),a("3FU9l",function(e,t){s("kvCta"),s("jCb9l"),s("6FT2E")}),a("kvCta",function(e,t){}),a("jCb9l",function(e,t){}),a("6FT2E",function(e,t){s("fxeuB"),s("lGr6T"),s("8RtD8"),s("8uzYX")}),a("fxeuB",function(e,r){t(e.exports,"getHostnameFromVariants",()=>n);let n=(e=[],{useFipsEndpoint:t,useDualstackEndpoint:r})=>e.find(({tags:e})=>t===e.includes("fips")&&r===e.includes("dualstack"))?.hostname}),a("lGr6T",function(e,r){t(e.exports,"getResolvedHostname",()=>n);let n=(e,{regionHostname:t,partitionHostname:r})=>t||(r?r.replace("{region}",e):void 0)}),a("8RtD8",function(e,r){t(e.exports,"getResolvedPartition",()=>n);let n=(e,{partitionHash:t})=>Object.keys(t||{}).find(r=>t[r].regions.includes(e))??"aws"}),a("8uzYX",function(e,r){t(e.exports,"getResolvedSigningRegion",()=>n);let n=(e,{signingRegion:t,regionRegex:r,useFipsEndpoint:n})=>{if(t)return t;if(n){let t=r.replace("\\\\","\\").replace(/^\^/g,"\\.").replace(/\$$/g,"\\."),n=e.match(t);if(n)return n[0].slice(1,-1)}}}),a("3q3gO",function(e,r){t(e.exports,"getHttpAuthSchemeEndpointRuleSetPlugin",()=>s("Qu9Uh").getHttpAuthSchemeEndpointRuleSetPlugin),t(e.exports,"getHttpSigningPlugin",()=>s("cKbVh").getHttpSigningPlugin),t(e.exports,"DefaultIdentityProviderConfig",()=>s("dOWbV").DefaultIdentityProviderConfig),t(e.exports,"doesIdentityRequireRefresh",()=>s("2SaG3").doesIdentityRequireRefresh),t(e.exports,"isIdentityExpired",()=>s("2SaG3").isIdentityExpired),t(e.exports,"memoizeIdentityProvider",()=>s("2SaG3").memoizeIdentityProvider),t(e.exports,"normalizeProvider",()=>s("Qin4u").normalizeProvider),t(e.exports,"requestBuilder",()=>s("l7S8v").requestBuilder),s("cdHcE"),s("2b2Hf"),s("8jtdq"),s("eRi23"),s("Qin4u"),s("l7S8v"),s("CI32B")}),a("cdHcE",function(e,r){t(e.exports,"getHttpAuthSchemeEndpointRuleSetPlugin",()=>s("Qu9Uh").getHttpAuthSchemeEndpointRuleSetPlugin),s("coP9r"),s("Qu9Uh"),s("e7w39")}),a("coP9r",function(e,r){t(e.exports,"httpAuthSchemeMiddleware",()=>o),s("9M3ne"),s("aebvT");var n=s("ia9MB");let o=(e,t)=>(r,o)=>async i=>{let s=e.httpAuthSchemeProvider(await t.httpAuthSchemeParametersProvider(e,o,i.input)),a=function(e){let t=new Map;for(let r of e)t.set(r.schemeId,r);return t}(e.httpAuthSchemes),u=(0,n.getSmithyContext)(o),l=[];for(let r of s){let n=a.get(r.schemeId);if(!n){l.push(`HttpAuthScheme \`${r.schemeId}\` was not enabled for this service.`);continue}let i=n.identityProvider(await t.identityProviderConfigProvider(e));if(!i){l.push(`HttpAuthScheme \`${r.schemeId}\` did not have an IdentityProvider configured.`);continue}let{identityProperties:s={},signingProperties:c={}}=r.propertiesExtractor?.(e,o)||{};r.identityProperties=Object.assign(r.identityProperties||{},s),r.signingProperties=Object.assign(r.signingProperties||{},c),u.selectedHttpAuthScheme={httpAuthOption:r,identity:await i(r.identityProperties),signer:n.signer};break}if(!u.selectedHttpAuthScheme)throw Error(l.join("\n"));return r(i)}}),a("Qu9Uh",function(e,r){t(e.exports,"getHttpAuthSchemeEndpointRuleSetPlugin",()=>a),s("dpFrj");var n=s("kiuTm"),o=s("coP9r");let i={step:"serialize",tags:["HTTP_AUTH_SCHEME"],name:"httpAuthSchemeMiddleware",override:!0,relation:"before",toMiddleware:n.endpointMiddlewareOptions.name},a=(e,{httpAuthSchemeParametersProvider:t,identityProviderConfigProvider:r})=>({applyToStack:n=>{n.addRelativeTo((0,o.httpAuthSchemeMiddleware)(e,{httpAuthSchemeParametersProvider:t,identityProviderConfigProvider:r}),i)}})}),a("dpFrj",function(e,r){t(e.exports,"endpointMiddlewareOptions",()=>s("kiuTm").endpointMiddlewareOptions),t(e.exports,"getEndpointPlugin",()=>s("kiuTm").getEndpointPlugin),t(e.exports,"resolveEndpointConfig",()=>s("en7Rj").resolveEndpointConfig),s("7FC3r"),s("9Cm59"),s("kiuTm"),s("en7Rj"),s("5o0t3")}),a("7FC3r",function(e,t){s("1wzgG"),s("3jBMw")}),a("1wzgG",function(e,r){t(e.exports,"getEndpointFromInstructions",()=>u),s("1syoZ");var n=s("bzWnt"),o=s("7fWGV"),i=s("jnoFa"),a=s("3jBMw");let u=async(e,t,r,n)=>{if(!r.endpoint){let e=await (0,i.getEndpointFromConfig)(r.serviceId||"");e&&(r.endpoint=()=>Promise.resolve((0,a.toEndpointV1)(e)))}let o=await l(e,t,r);if("function"!=typeof r.endpointProvider)throw Error("config.endpointProvider is not set.");return r.endpointProvider(o,n)},l=async(e,t,r)=>{let i={},s=t?.getEndpointParameterInstructions?.()||{};for(let[t,n]of Object.entries(s))switch(n.type){case"staticContextParams":i[t]=n.value;break;case"contextParams":i[t]=e[n.name];break;case"clientContextParams":case"builtInParams":i[t]=await (0,o.createConfigValueProvider)(n.name,t,r)();break;default:throw Error("Unrecognized endpoint parameter instruction: "+JSON.stringify(n))}return 0===Object.keys(s).length&&Object.assign(i,r),"s3"===String(r.serviceId).toLowerCase()&&await (0,n.resolveParamsForS3)(i),i}}),a("1syoZ",function(e,r){t(e.exports,"resolveParamsForS3",()=>s("bzWnt").resolveParamsForS3),s("bzWnt")}),a("bzWnt",function(e,r){t(e.exports,"resolveParamsForS3",()=>n);let n=async e=>{let t=e?.Bucket||"";if("string"==typeof e.Bucket&&(e.Bucket=t.replace(/#/g,encodeURIComponent("#")).replace(/\?/g,encodeURIComponent("?"))),u(t)){if(!0===e.ForcePathStyle)throw Error("Path-style addressing cannot be used with ARN buckets")}else a(t)&&(-1===t.indexOf(".")||String(e.Endpoint).startsWith("http:"))&&t.toLowerCase()===t&&!(t.length<3)||(e.ForcePathStyle=!0);return e.DisableMultiRegionAccessPoints&&(e.disableMultiRegionAccessPoints=!0,e.DisableMRAP=!0),e},o=/^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/,i=/(\d+\.){3}\d+/,s=/\.\./,a=e=>o.test(e)&&!i.test(e)&&!s.test(e),u=e=>{let[t,r,n,,,o]=e.split(":"),i="arn"===t&&e.split(":").length>=6,s=!!(i&&r&&n&&o);if(i&&!s)throw Error(`Invalid ARN: ${e} was an invalid ARN.`);return s}}),a("7fWGV",function(e,r){t(e.exports,"createConfigValueProvider",()=>n);let n=(e,t,r)=>{let n=async()=>{let n=r[e]??r[t];return"function"==typeof n?n():n};return"credentialScope"===e||"CredentialScope"===t?async()=>{let e="function"==typeof r.credentials?await r.credentials():r.credentials;return e?.credentialScope??e?.CredentialScope}:"endpoint"===e||"endpoint"===t?async()=>{let e=await n();if(e&&"object"==typeof e){if("url"in e)return e.url.href;if("hostname"in e){let{protocol:t,hostname:r,port:n,path:o}=e;return`${t}//${r}${n?":"+n:""}${o}`}}return e}:n}}),a("jnoFa",function(e,r){t(e.exports,"getEndpointFromConfig",()=>n);let n=async e=>void 0}),a("3jBMw",function(e,r){t(e.exports,"toEndpointV1",()=>o);var n=s("6KaA7");let o=e=>"object"==typeof e?"url"in e?(0,n.parseUrl)(e.url):e:(0,n.parseUrl)(e)}),a("6KaA7",function(e,r){t(e.exports,"parseUrl",()=>o);var n=s("4DKy3");let o=e=>{let t;if("string"==typeof e)return o(new URL(e));let{hostname:r,pathname:i,port:s,protocol:a,search:u}=e;return u&&(t=(0,n.parseQueryString)(u)),{hostname:r,port:s?parseInt(s):void 0,protocol:a,path:i,query:t}}}),a("4DKy3",function(e,r){t(e.exports,"parseQueryString",()=>n);function n(e){let t={};if(e=e.replace(/^\?/,""))for(let r of e.split("&")){let[e,n=null]=r.split("=");e=decodeURIComponent(e),n&&(n=decodeURIComponent(n)),e in t?Array.isArray(t[e])?t[e].push(n):t[e]=[t[e],n]:t[e]=n}return t}}),a("9Cm59",function(e,r){t(e.exports,"endpointMiddleware",()=>i),s("aebvT");var n=s("ia9MB"),o=s("1wzgG");let i=({config:e,instructions:t})=>(r,i)=>async s=>{let a=await (0,o.getEndpointFromInstructions)(s.input,{getEndpointParameterInstructions:()=>t},{...e},i);i.endpointV2=a,i.authSchemes=a.properties?.authSchemes;let u=i.authSchemes?.[0];if(u){i.signing_region=u.signingRegion,i.signing_service=u.signingName;let e=(0,n.getSmithyContext)(i),t=e?.selectedHttpAuthScheme?.httpAuthOption;t&&(t.signingProperties=Object.assign(t.signingProperties||{},{signing_region:u.signingRegion,signingRegion:u.signingRegion,signing_service:u.signingName,signingName:u.signingName,signingRegionSet:u.signingRegionSet},u.properties))}return r({...s})}}),a("kiuTm",function(e,r){t(e.exports,"endpointMiddlewareOptions",()=>i),t(e.exports,"getEndpointPlugin",()=>a),s("aKRs7");var n=s("2CNf6"),o=s("9Cm59");let i={step:"serialize",tags:["ENDPOINT_PARAMETERS","ENDPOINT_V2","ENDPOINT"],name:"endpointV2Middleware",override:!0,relation:"before",toMiddleware:n.serializerMiddlewareOption.name},a=(e,t)=>({applyToStack:r=>{r.addRelativeTo((0,o.endpointMiddleware)({config:e,instructions:t}),i)}})}),a("aKRs7",function(e,r){t(e.exports,"getSerdePlugin",()=>s("2CNf6").getSerdePlugin),t(e.exports,"serializerMiddlewareOption",()=>s("2CNf6").serializerMiddlewareOption),s("YJN9p"),s("2CNf6"),s("hxEkP")}),a("YJN9p",function(e,r){t(e.exports,"deserializerMiddleware",()=>n);let n=(e,t)=>r=>async n=>{let{response:o}=await r(n);try{let r=await t(o,e);return{response:o,output:r}}catch(e){throw Object.defineProperty(e,"$response",{value:o}),"$metadata"in e||(e.message+="\n  Deserialization error: to see the raw response, inspect the hidden field {error}.$response on this object.",void 0!==e.$responseBodyText&&e.$response&&(e.$response.body=e.$responseBodyText)),e}}}),a("2CNf6",function(e,r){t(e.exports,"serializerMiddlewareOption",()=>a),t(e.exports,"getSerdePlugin",()=>u);var n=s("YJN9p"),o=s("hxEkP");let i={name:"deserializerMiddleware",step:"deserialize",tags:["DESERIALIZER"],override:!0},a={name:"serializerMiddleware",step:"serialize",tags:["SERIALIZER"],override:!0};function u(e,t,r){return{applyToStack:s=>{s.add((0,n.deserializerMiddleware)(e,r),i),s.add((0,o.serializerMiddleware)(e,t),a)}}}}),a("hxEkP",function(e,r){t(e.exports,"serializerMiddleware",()=>n);let n=(e,t)=>(r,n)=>async o=>{let i=n.endpointV2?.url&&e.urlParser?async()=>e.urlParser(n.endpointV2.url):e.endpoint;if(!i)throw Error("No valid endpoint provider available.");let s=await t(o.input,{...e,endpoint:i});return r({...o,request:s})}}),a("en7Rj",function(e,r){t(e.exports,"resolveEndpointConfig",()=>i),s("aebvT");var n=s("5H56Q"),o=s("3jBMw");let i=e=>{let t=e.tls??!0,{endpoint:r}=e,i=null!=r?async()=>(0,o.toEndpointV1)(await (0,n.normalizeProvider)(r)()):void 0,s=!!r;return{...e,endpoint:i,tls:t,isCustomEndpoint:s,useDualstackEndpoint:(0,n.normalizeProvider)(e.useDualstackEndpoint??!1),useFipsEndpoint:(0,n.normalizeProvider)(e.useFipsEndpoint??!1)}}}),a("5o0t3",function(e,t){}),a("e7w39",function(e,t){s("aKRs7");var r=s("2CNf6");s("coP9r"),r.serializerMiddlewareOption.name}),a("2b2Hf",function(e,r){t(e.exports,"getHttpSigningPlugin",()=>s("cKbVh").getHttpSigningPlugin),s("2MRRu"),s("cKbVh")}),a("2MRRu",function(e,r){t(e.exports,"httpSigningMiddleware",()=>u),s("gR0fe");var n=s("j0mzq");s("9M3ne"),s("aebvT");var o=s("ia9MB");let i=e=>e=>{throw e},a=(e,t)=>{},u=e=>(e,t)=>async r=>{if(!(0,n.HttpRequest).isInstance(r.request))return e(r);let s=(0,o.getSmithyContext)(t).selectedHttpAuthScheme;if(!s)throw Error("No HttpAuthScheme was selected: unable to sign request");let{httpAuthOption:{signingProperties:u={}},identity:l,signer:c}=s,d=await e({...r,request:await c.sign(r.request,l,u)}).catch((c.errorHandler||i)(u));return(c.successHandler||a)(d.response,u),d}}),a("cKbVh",function(e,r){t(e.exports,"getHttpSigningPlugin",()=>a),s("2YoXT");var n=s("26n63"),o=s("2MRRu");let i={step:"finalizeRequest",tags:["HTTP_SIGNING"],name:"httpSigningMiddleware",aliases:["apiKeyMiddleware","tokenMiddleware","awsAuthMiddleware"],override:!0,relation:"after",toMiddleware:n.retryMiddlewareOptions.name},a=e=>({applyToStack:t=>{t.addRelativeTo((0,o.httpSigningMiddleware)(e),i)}})}),a("2YoXT",function(e,r){t(e.exports,"resolveRetryConfig",()=>s("106m0").resolveRetryConfig),t(e.exports,"getRetryPlugin",()=>s("26n63").getRetryPlugin),t(e.exports,"retryMiddlewareOptions",()=>s("26n63").retryMiddlewareOptions),s("grH1C"),s("c9dZf"),s("106m0"),s("blSqC"),s("chzHO"),s("2qrTH"),s("26n63")}),a("grH1C",function(e,t){s("2bh3s"),s("9w1Ri"),s("aDfsO"),s("c9dZf")}),a("2bh3s",function(e,r){t(e.exports,"AdaptiveRetryStrategy",()=>s("2JddF").AdaptiveRetryStrategy),t(e.exports,"DefaultRateLimiter",()=>s("9w1Ri").DefaultRateLimiter),t(e.exports,"StandardRetryStrategy",()=>s("kIVdx").StandardRetryStrategy),t(e.exports,"DEFAULT_MAX_ATTEMPTS",()=>s("aDfsO").DEFAULT_MAX_ATTEMPTS),t(e.exports,"DEFAULT_RETRY_MODE",()=>s("aDfsO").DEFAULT_RETRY_MODE),t(e.exports,"RETRY_MODES",()=>s("aDfsO").RETRY_MODES),t(e.exports,"DEFAULT_RETRY_DELAY_BASE",()=>s("l6sss").DEFAULT_RETRY_DELAY_BASE),t(e.exports,"INITIAL_RETRY_TOKENS",()=>s("l6sss").INITIAL_RETRY_TOKENS),t(e.exports,"INVOCATION_ID_HEADER",()=>s("l6sss").INVOCATION_ID_HEADER),t(e.exports,"MAXIMUM_RETRY_DELAY",()=>s("l6sss").MAXIMUM_RETRY_DELAY),t(e.exports,"NO_RETRY_INCREMENT",()=>s("l6sss").NO_RETRY_INCREMENT),t(e.exports,"REQUEST_HEADER",()=>s("l6sss").REQUEST_HEADER),t(e.exports,"RETRY_COST",()=>s("l6sss").RETRY_COST),t(e.exports,"THROTTLING_RETRY_DELAY_BASE",()=>s("l6sss").THROTTLING_RETRY_DELAY_BASE),t(e.exports,"TIMEOUT_RETRY_COST",()=>s("l6sss").TIMEOUT_RETRY_COST),s("2JddF"),s("b7Bg5"),s("9w1Ri"),s("kIVdx"),s("aDfsO"),s("l6sss"),s("5Yu7K")}),a("2JddF",function(e,r){t(e.exports,"AdaptiveRetryStrategy",()=>a);var n=s("aDfsO"),o=s("9w1Ri"),i=s("kIVdx");class a{constructor(e,t){this.maxAttemptsProvider=e,this.mode=n.RETRY_MODES.ADAPTIVE;let{rateLimiter:r}=t??{};this.rateLimiter=r??new o.DefaultRateLimiter,this.standardRetryStrategy=new i.StandardRetryStrategy(e)}async acquireInitialRetryToken(e){return await this.rateLimiter.getSendToken(),this.standardRetryStrategy.acquireInitialRetryToken(e)}async refreshRetryTokenForRetry(e,t){return this.rateLimiter.updateClientSendingRate(t),this.standardRetryStrategy.refreshRetryTokenForRetry(e,t)}recordSuccess(e){this.rateLimiter.updateClientSendingRate({}),this.standardRetryStrategy.recordSuccess(e)}}}),a("aDfsO",function(e,r){var n,o;t(e.exports,"RETRY_MODES",()=>n),t(e.exports,"DEFAULT_MAX_ATTEMPTS",()=>i),t(e.exports,"DEFAULT_RETRY_MODE",()=>s),(o=n||(n={})).STANDARD="standard",o.ADAPTIVE="adaptive";let i=3,s=n.STANDARD}),a("9w1Ri",function(e,r){t(e.exports,"DefaultRateLimiter",()=>o);var n=s("dHefc");class o{constructor(e){this.currentCapacity=0,this.enabled=!1,this.lastMaxRate=0,this.measuredTxRate=0,this.requestCount=0,this.lastTimestamp=0,this.timeWindow=0,this.beta=e?.beta??.7,this.minCapacity=e?.minCapacity??1,this.minFillRate=e?.minFillRate??.5,this.scaleConstant=e?.scaleConstant??.4,this.smooth=e?.smooth??.8;let t=this.getCurrentTimeInSeconds();this.lastThrottleTime=t,this.lastTxRateBucket=Math.floor(this.getCurrentTimeInSeconds()),this.fillRate=this.minFillRate,this.maxCapacity=this.minCapacity}getCurrentTimeInSeconds(){return Date.now()/1e3}async getSendToken(){return this.acquireTokenBucket(1)}async acquireTokenBucket(e){if(this.enabled){if(this.refillTokenBucket(),e>this.currentCapacity){let t=(e-this.currentCapacity)/this.fillRate*1e3;await new Promise(e=>setTimeout(e,t))}this.currentCapacity=this.currentCapacity-e}}refillTokenBucket(){let e=this.getCurrentTimeInSeconds();if(!this.lastTimestamp){this.lastTimestamp=e;return}let t=(e-this.lastTimestamp)*this.fillRate;this.currentCapacity=Math.min(this.maxCapacity,this.currentCapacity+t),this.lastTimestamp=e}updateClientSendingRate(e){let t;if(this.updateMeasuredRate(),(0,n.isThrottlingError)(e)){let e=this.enabled?Math.min(this.measuredTxRate,this.fillRate):this.measuredTxRate;this.lastMaxRate=e,this.calculateTimeWindow(),this.lastThrottleTime=this.getCurrentTimeInSeconds(),t=this.cubicThrottle(e),this.enableTokenBucket()}else this.calculateTimeWindow(),t=this.cubicSuccess(this.getCurrentTimeInSeconds());let r=Math.min(t,2*this.measuredTxRate);this.updateTokenBucketRate(r)}calculateTimeWindow(){this.timeWindow=this.getPrecise(Math.pow(this.lastMaxRate*(1-this.beta)/this.scaleConstant,1/3))}cubicThrottle(e){return this.getPrecise(e*this.beta)}cubicSuccess(e){return this.getPrecise(this.scaleConstant*Math.pow(e-this.lastThrottleTime-this.timeWindow,3)+this.lastMaxRate)}enableTokenBucket(){this.enabled=!0}updateTokenBucketRate(e){this.refillTokenBucket(),this.fillRate=Math.max(e,this.minFillRate),this.maxCapacity=Math.max(e,this.minCapacity),this.currentCapacity=Math.min(this.currentCapacity,this.maxCapacity)}updateMeasuredRate(){let e=Math.floor(2*this.getCurrentTimeInSeconds())/2;if(this.requestCount++,e>this.lastTxRateBucket){let t=this.requestCount/(e-this.lastTxRateBucket);this.measuredTxRate=this.getPrecise(t*this.smooth+this.measuredTxRate*(1-this.smooth)),this.requestCount=0,this.lastTxRateBucket=e}}getPrecise(e){return parseFloat(e.toFixed(8))}}}),a("dHefc",function(e,r){t(e.exports,"isRetryableByTrait",()=>o),t(e.exports,"isClockSkewError",()=>i),t(e.exports,"isThrottlingError",()=>u),t(e.exports,"isTransientError",()=>l),t(e.exports,"isServerError",()=>c);var n=s("dQ5m9");let o=e=>void 0!==e.$retryable,i=e=>(0,n.CLOCK_SKEW_ERROR_CODES).includes(e.name),a=e=>e.$metadata?.clockSkewCorrected,u=e=>e.$metadata?.httpStatusCode===429||(0,n.THROTTLING_ERROR_CODES).includes(e.name)||e.$retryable?.throttling==!0,l=e=>a(e)||(0,n.TRANSIENT_ERROR_CODES).includes(e.name)||(0,n.NODEJS_TIMEOUT_ERROR_CODES).includes(e?.code||"")||(0,n.TRANSIENT_ERROR_STATUS_CODES).includes(e.$metadata?.httpStatusCode||0),c=e=>{if(e.$metadata?.httpStatusCode!==void 0){let t=e.$metadata.httpStatusCode;if(500<=t&&t<=599&&!l(e))return!0}return!1}}),a("dQ5m9",function(e,r){t(e.exports,"CLOCK_SKEW_ERROR_CODES",()=>n),t(e.exports,"THROTTLING_ERROR_CODES",()=>o),t(e.exports,"TRANSIENT_ERROR_CODES",()=>i),t(e.exports,"TRANSIENT_ERROR_STATUS_CODES",()=>s),t(e.exports,"NODEJS_TIMEOUT_ERROR_CODES",()=>a);let n=["AuthFailure","InvalidSignatureException","RequestExpired","RequestInTheFuture","RequestTimeTooSkewed","SignatureDoesNotMatch"],o=["BandwidthLimitExceeded","EC2ThrottledException","LimitExceededException","PriorRequestNotComplete","ProvisionedThroughputExceededException","RequestLimitExceeded","RequestThrottled","RequestThrottledException","SlowDown","ThrottledException","Throttling","ThrottlingException","TooManyRequestsException","TransactionInProgressException"],i=["TimeoutError","RequestTimeout","RequestTimeoutException"],s=[500,502,503,504],a=["ECONNRESET","ECONNREFUSED","EPIPE","ETIMEDOUT"]}),a("kIVdx",function(e,r){t(e.exports,"StandardRetryStrategy",()=>u);var n=s("aDfsO"),o=s("l6sss"),i=s("ecEVk"),a=s("kQXDw");class u{constructor(e){this.maxAttempts=e,this.mode=n.RETRY_MODES.STANDARD,this.capacity=o.INITIAL_RETRY_TOKENS,this.retryBackoffStrategy=(0,i.getDefaultRetryBackoffStrategy)(),this.maxAttemptsProvider="function"==typeof e?e:async()=>e}async acquireInitialRetryToken(e){return(0,a.createDefaultRetryToken)({retryDelay:o.DEFAULT_RETRY_DELAY_BASE,retryCount:0})}async refreshRetryTokenForRetry(e,t){let r=await this.getMaxAttempts();if(this.shouldRetry(e,t,r)){let r=t.errorType;this.retryBackoffStrategy.setDelayBase("THROTTLING"===r?o.THROTTLING_RETRY_DELAY_BASE:o.DEFAULT_RETRY_DELAY_BASE);let n=this.retryBackoffStrategy.computeNextBackoffDelay(e.getRetryCount()),i=t.retryAfterHint?Math.max(t.retryAfterHint.getTime()-Date.now()||0,n):n,s=this.getCapacityCost(r);return this.capacity-=s,(0,a.createDefaultRetryToken)({retryDelay:i,retryCount:e.getRetryCount()+1,retryCost:s})}throw Error("No retry token available")}recordSuccess(e){this.capacity=Math.max(o.INITIAL_RETRY_TOKENS,this.capacity+(e.getRetryCost()??o.NO_RETRY_INCREMENT))}getCapacity(){return this.capacity}async getMaxAttempts(){try{return await this.maxAttemptsProvider()}catch(e){return console.warn(`Max attempts provider could not resolve. Using default of ${n.DEFAULT_MAX_ATTEMPTS}`),n.DEFAULT_MAX_ATTEMPTS}}shouldRetry(e,t,r){return e.getRetryCount()+1<r&&this.capacity>=this.getCapacityCost(t.errorType)&&this.isRetryableError(t.errorType)}getCapacityCost(e){return"TRANSIENT"===e?o.TIMEOUT_RETRY_COST:o.RETRY_COST}isRetryableError(e){return"THROTTLING"===e||"TRANSIENT"===e}}}),a("l6sss",function(e,r){t(e.exports,"DEFAULT_RETRY_DELAY_BASE",()=>n),t(e.exports,"MAXIMUM_RETRY_DELAY",()=>o),t(e.exports,"THROTTLING_RETRY_DELAY_BASE",()=>i),t(e.exports,"INITIAL_RETRY_TOKENS",()=>s),t(e.exports,"RETRY_COST",()=>a),t(e.exports,"TIMEOUT_RETRY_COST",()=>u),t(e.exports,"NO_RETRY_INCREMENT",()=>l),t(e.exports,"INVOCATION_ID_HEADER",()=>c),t(e.exports,"REQUEST_HEADER",()=>d);let n=100,o=2e4,i=500,s=500,a=5,u=10,l=1,c="amz-sdk-invocation-id",d="amz-sdk-request"}),a("ecEVk",function(e,r){t(e.exports,"getDefaultRetryBackoffStrategy",()=>o);var n=s("l6sss");let o=()=>{let e=n.DEFAULT_RETRY_DELAY_BASE;return{computeNextBackoffDelay:t=>Math.floor(Math.min(n.MAXIMUM_RETRY_DELAY,Math.random()*2**t*e)),setDelayBase:t=>{e=t}}}}),a("kQXDw",function(e,r){t(e.exports,"createDefaultRetryToken",()=>o);var n=s("l6sss");let o=({retryDelay:e,retryCount:t,retryCost:r})=>({getRetryCount:()=>t,getRetryDelay:()=>Math.min(n.MAXIMUM_RETRY_DELAY,e),getRetryCost:()=>r})}),a("b7Bg5",function(e,t){s("l6sss"),s("kIVdx")}),a("5Yu7K",function(e,t){}),a("c9dZf",function(e,r){t(e.exports,"StandardRetryStrategy",()=>h),s("gR0fe");var n=s("j0mzq"),o=s("iP6o5"),i=s("dHefc");s("2bh3s");var a=s("aDfsO"),u=s("l6sss"),l=s("yVy00"),c=s("65qkq"),d=s("blSqC"),f=s("2qrTH"),p=s("2kwmk");class h{constructor(e,t){this.maxAttemptsProvider=e,this.mode=a.RETRY_MODES.STANDARD,this.retryDecider=t?.retryDecider??f.defaultRetryDecider,this.delayDecider=t?.delayDecider??d.defaultDelayDecider,this.retryQuota=t?.retryQuota??(0,c.getDefaultRetryQuota)(u.INITIAL_RETRY_TOKENS)}shouldRetry(e,t,r){return t<r&&this.retryDecider(e)&&this.retryQuota.hasRetryTokens(e)}async getMaxAttempts(){let e;try{e=await this.maxAttemptsProvider()}catch(t){e=a.DEFAULT_MAX_ATTEMPTS}return e}async retry(e,t,r){let o;let s=0,a=0,c=await this.getMaxAttempts(),{request:d}=t;for((0,n.HttpRequest).isInstance(d)&&(d.headers[u.INVOCATION_ID_HEADER]=(0,l.default)());;)try{(0,n.HttpRequest).isInstance(d)&&(d.headers[u.REQUEST_HEADER]=`attempt=${s+1}; max=${c}`),r?.beforeRequest&&await r.beforeRequest();let{response:i,output:l}=await e(t);return r?.afterRequest&&r.afterRequest(i),this.retryQuota.releaseRetryTokens(o),l.$metadata.attempts=s+1,l.$metadata.totalRetryDelay=a,{response:i,output:l}}catch(t){let e=(0,p.asSdkError)(t);if(s++,this.shouldRetry(e,s,c)){o=this.retryQuota.retrieveRetryTokens(e);let t=this.delayDecider((0,i.isThrottlingError)(e)?u.THROTTLING_RETRY_DELAY_BASE:u.DEFAULT_RETRY_DELAY_BASE,s),r=Math.max(g(e.$response)||0,t);a+=r,await new Promise(e=>setTimeout(e,r));continue}throw e.$metadata||(e.$metadata={}),e.$metadata.attempts=s,e.$metadata.totalRetryDelay=a,e}}}let g=e=>{if(!(0,o.HttpResponse).isInstance(e))return;let t=Object.keys(e.headers).find(e=>"retry-after"===e.toLowerCase());if(!t)return;let r=e.headers[t],n=Number(r);return Number.isNaN(n)?new Date(r).getTime()-Date.now():1e3*n}}),a("yVy00",function(e,r){t(e.exports,"default",()=>a);var n=s("eizRj"),o=s("d7ALU"),i=s("4Qlya"),a=function(e,t,r){if(n.default.randomUUID&&!t&&!e)return(0,n.default).randomUUID();let s=(e=e||{}).random||(e.rng||(0,o.default))();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t){r=r||0;for(let e=0;e<16;++e)t[r+e]=s[e];return t}return(0,i.unsafeStringify)(s)}}),a("eizRj",function(e,r){t(e.exports,"default",()=>n);var n={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)}}),a("d7ALU",function(e,r){let n;t(e.exports,"default",()=>i);let o=new Uint8Array(16);function i(){if(!n&&!(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)))throw Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(o)}}),a("4Qlya",function(e,r){t(e.exports,"unsafeStringify",()=>o),s("gjg30");let n=[];for(let e=0;e<256;++e)n.push((e+256).toString(16).slice(1));function o(e,t=0){return n[e[t+0]]+n[e[t+1]]+n[e[t+2]]+n[e[t+3]]+"-"+n[e[t+4]]+n[e[t+5]]+"-"+n[e[t+6]]+n[e[t+7]]+"-"+n[e[t+8]]+n[e[t+9]]+"-"+n[e[t+10]]+n[e[t+11]]+n[e[t+12]]+n[e[t+13]]+n[e[t+14]]+n[e[t+15]]}}),a("gjg30",function(e,r){t(e.exports,"default",()=>o);var n=s("7QqJj"),o=function(e){return"string"==typeof e&&(0,n.default).test(e)}}),a("7QqJj",function(e,r){t(e.exports,"default",()=>n);var n=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i}),a("65qkq",function(e,r){t(e.exports,"getDefaultRetryQuota",()=>o),s("2bh3s");var n=s("l6sss");let o=(e,t)=>{let r=t?.noRetryIncrement??n.NO_RETRY_INCREMENT,o=t?.retryCost??n.RETRY_COST,i=t?.timeoutRetryCost??n.TIMEOUT_RETRY_COST,s=e,a=e=>"TimeoutError"===e.name?i:o,u=e=>a(e)<=s;return Object.freeze({hasRetryTokens:u,retrieveRetryTokens:e=>{if(!u(e))throw Error("No retry token available");let t=a(e);return s-=t,t},releaseRetryTokens:t=>{s+=t??r,s=Math.min(s,e)}})}}),a("blSqC",function(e,r){t(e.exports,"defaultDelayDecider",()=>o),s("2bh3s");var n=s("l6sss");let o=(e,t)=>Math.floor(Math.min(n.MAXIMUM_RETRY_DELAY,Math.random()*2**t*e))}),a("2qrTH",function(e,r){t(e.exports,"defaultRetryDecider",()=>o);var n=s("dHefc");let o=e=>!!e&&((0,n.isRetryableByTrait)(e)||(0,n.isClockSkewError)(e)||(0,n.isThrottlingError)(e)||(0,n.isTransientError)(e))}),a("2kwmk",function(e,r){t(e.exports,"asSdkError",()=>n);let n=e=>e instanceof Error?e:e instanceof Object?Object.assign(Error(),e):"string"==typeof e?Error(e):Error(`AWS SDK error wrapper for ${e}`)}),a("106m0",function(e,r){t(e.exports,"resolveRetryConfig",()=>c),s("aebvT");var n=s("5H56Q");s("2bh3s");var o=s("2JddF"),i=s("aDfsO"),a=s("kIVdx");let u="AWS_MAX_ATTEMPTS",l="max_attempts";e=>{let t=e[u];if(!t)return;let r=parseInt(t);if(Number.isNaN(r))throw Error(`Environment variable ${u} mast be a number, got "${t}"`);return r},i.DEFAULT_MAX_ATTEMPTS;let c=e=>{let{retryStrategy:t}=e,r=(0,n.normalizeProvider)(e.maxAttempts??i.DEFAULT_MAX_ATTEMPTS);return{...e,maxAttempts:r,retryStrategy:async()=>t||(await (0,n.normalizeProvider)(e.retryMode)()===i.RETRY_MODES.ADAPTIVE?new o.AdaptiveRetryStrategy(r):new a.StandardRetryStrategy(r))}};e=>e.AWS_RETRY_MODE,i.DEFAULT_RETRY_MODE}),a("chzHO",function(e,t){s("gR0fe"),s("j0mzq"),s("2bh3s"),s("l6sss")}),a("26n63",function(e,r){t(e.exports,"retryMiddlewareOptions",()=>m),t(e.exports,"getRetryPlugin",()=>y),s("gR0fe");var n=s("j0mzq"),o=s("iP6o5"),i=s("dHefc");s("3ThPo");var a=s("3zvvf");s("2bh3s");var u=s("l6sss"),l=s("yVy00"),c=s("dIaXF"),d=s("2kwmk");let f=e=>(t,r)=>async o=>{let i=await e.retryStrategy(),s=await e.maxAttempts();if(!p(i))return i?.mode&&(r.userAgent=[...r.userAgent||[],["cfg/retry-mode",i.mode]]),i.retry(t,o);{let e=await i.acquireInitialRetryToken(r.partition_id),f=Error(),p=0,g=0,{request:m}=o,y=(0,n.HttpRequest).isInstance(m);for(y&&(m.headers[u.INVOCATION_ID_HEADER]=(0,l.default)());;)try{y&&(m.headers[u.REQUEST_HEADER]=`attempt=${p+1}; max=${s}`);let{response:r,output:n}=await t(o);return i.recordSuccess(e),n.$metadata.attempts=p+1,n.$metadata.totalRetryDelay=g,{response:r,output:n}}catch(o){let t=h(o);if(f=(0,d.asSdkError)(o),y&&(0,c.isStreamingPayload)(m))throw(r.logger instanceof a.NoOpLogger?console:r.logger)?.warn("An error was encountered in a non-retryable streaming request."),f;try{e=await i.refreshRetryTokenForRetry(e,t)}catch(e){throw f.$metadata||(f.$metadata={}),f.$metadata.attempts=p+1,f.$metadata.totalRetryDelay=g,f}p=e.getRetryCount();let n=e.getRetryDelay();g+=n,await new Promise(e=>setTimeout(e,n))}}},p=e=>void 0!==e.acquireInitialRetryToken&&void 0!==e.refreshRetryTokenForRetry&&void 0!==e.recordSuccess,h=e=>{let t={error:e,errorType:g(e)},r=E(e.$response);return r&&(t.retryAfterHint=r),t},g=e=>(0,i.isThrottlingError)(e)?"THROTTLING":(0,i.isTransientError)(e)?"TRANSIENT":(0,i.isServerError)(e)?"SERVER_ERROR":"CLIENT_ERROR",m={name:"retryMiddleware",tags:["RETRY"],step:"finalizeRequest",priority:"high",override:!0},y=e=>({applyToStack:t=>{t.add(f(e),m)}}),E=e=>{if(!(0,o.HttpResponse).isInstance(e))return;let t=Object.keys(e.headers).find(e=>"retry-after"===e.toLowerCase());if(!t)return;let r=e.headers[t],n=Number(r);return new Date(Number.isNaN(n)?r:1e3*n)}}),a("3ThPo",function(e,r){t(e.exports,"NoOpLogger",()=>s("3zvvf").NoOpLogger),t(e.exports,"Client",()=>s("akqME").Client),t(e.exports,"collectBody",()=>s("9geO8").collectBody),t(e.exports,"Command",()=>s("8CeTn").Command),t(e.exports,"SENSITIVE_STRING",()=>s("gVWsK").SENSITIVE_STRING),t(e.exports,"createAggregatedClient",()=>s("8gmQ9").createAggregatedClient),t(e.exports,"withBaseException",()=>s("b2H9k").withBaseException),t(e.exports,"loadConfigsForDefaultMode",()=>s("j0smT").loadConfigsForDefaultMode),t(e.exports,"getDefaultExtensionConfiguration",()=>s("alxfc").getDefaultExtensionConfiguration),t(e.exports,"resolveDefaultRuntimeConfig",()=>s("alxfc").resolveDefaultRuntimeConfig),t(e.exports,"decorateServiceException",()=>s("jukpK").decorateServiceException),t(e.exports,"ServiceException",()=>s("jukpK").ServiceException),t(e.exports,"map",()=>s("cDm2A").map),t(e.exports,"take",()=>s("cDm2A").take),t(e.exports,"expectInt32",()=>s("3y1NG").expectInt32),t(e.exports,"expectNonNull",()=>s("3y1NG").expectNonNull),t(e.exports,"expectObject",()=>s("3y1NG").expectObject),t(e.exports,"expectString",()=>s("3y1NG").expectString),t(e.exports,"expectUnion",()=>s("3y1NG").expectUnion),t(e.exports,"resolvedPath",()=>s("3gee1").resolvedPath),t(e.exports,"serializeFloat",()=>s("aLLZf").serializeFloat),t(e.exports,"_json",()=>s("2WfFW")._json),s("3zvvf"),s("akqME"),s("9geO8"),s("8CeTn"),s("gVWsK"),s("8gmQ9"),s("7u1MS"),s("b2H9k"),s("j0smT"),s("2f77u"),s("i9k8n"),s("jukpK"),s("5VtZ2"),s("3h1aR"),s("5CVax"),s("jXGu1"),s("cDm2A"),s("3y1NG"),s("3gee1"),s("aLLZf"),s("2WfFW"),s("dZGZi")}),a("3zvvf",function(e,r){t(e.exports,"NoOpLogger",()=>n);class n{trace(){}debug(){}info(){}warn(){}error(){}}}),a("akqME",function(e,r){t(e.exports,"Client",()=>o),s("hV3l5");var n=s("lNWn8");class o{constructor(e){this.middlewareStack=(0,n.constructStack)(),this.config=e}send(e,t,r){let n="function"==typeof t?t:r,o=e.resolveMiddleware(this.middlewareStack,this.config,"function"!=typeof t?t:void 0);if(!n)return o(e).then(e=>e.output);o(e).then(e=>n(null,e.output),e=>n(e)).catch(()=>{})}destroy(){this.config.requestHandler.destroy&&this.config.requestHandler.destroy()}}}),a("hV3l5",function(e,r){t(e.exports,"constructStack",()=>s("lNWn8").constructStack),s("lNWn8")}),a("lNWn8",function(e,r){t(e.exports,"constructStack",()=>i);let n=(e,t)=>{let r=[];if(e&&r.push(e),t)for(let e of t)r.push(e);return r},o=(e,t)=>`${e||"anonymous"}${t&&t.length>0?` (a.k.a. ${t.join(",")})`:""}`,i=()=>{let e=[],t=[],r=!1,u=new Set,l=e=>e.sort((e,t)=>s[t.step]-s[e.step]||a[t.priority||"normal"]-a[e.priority||"normal"]),c=r=>{let o=!1,i=e=>{let t=n(e.name,e.aliases);if(t.includes(r)){for(let e of(o=!0,t))u.delete(e);return!1}return!0};return e=e.filter(i),t=t.filter(i),o},d=r=>{let o=!1,i=e=>{if(e.middleware===r){for(let t of(o=!0,n(e.name,e.aliases)))u.delete(t);return!1}return!0};return e=e.filter(i),t=t.filter(i),o},f=r=>(e.forEach(e=>{r.add(e.middleware,{...e})}),t.forEach(e=>{r.addRelativeTo(e.middleware,{...e})}),r.identifyOnResolve?.(g.identifyOnResolve()),r),p=e=>{let t=[];return e.before.forEach(e=>{0===e.before.length&&0===e.after.length?t.push(e):t.push(...p(e))}),t.push(e),e.after.reverse().forEach(e=>{0===e.before.length&&0===e.after.length?t.push(e):t.push(...p(e))}),t},h=(r=!1)=>{let i=[],s=[],a={};return e.forEach(e=>{let t={...e,before:[],after:[]};for(let e of n(t.name,t.aliases))a[e]=t;i.push(t)}),t.forEach(e=>{let t={...e,before:[],after:[]};for(let e of n(t.name,t.aliases))a[e]=t;s.push(t)}),s.forEach(e=>{if(e.toMiddleware){let t=a[e.toMiddleware];if(void 0===t){if(r)return;throw Error(`${e.toMiddleware} is not found when adding ${o(e.name,e.aliases)} middleware ${e.relation} ${e.toMiddleware}`)}"after"===e.relation&&t.after.push(e),"before"===e.relation&&t.before.push(e)}}),l(i).map(p).reduce((e,t)=>(e.push(...t),e),[])},g={add:(t,r={})=>{let{name:i,override:s,aliases:a}=r,l={step:"initialize",priority:"normal",middleware:t,...r},c=n(i,a);if(c.length>0){if(c.some(e=>u.has(e))){if(!s)throw Error(`Duplicate middleware name '${o(i,a)}'`);for(let t of c){let r=e.findIndex(e=>e.name===t||e.aliases?.some(e=>e===t));if(-1===r)continue;let n=e[r];if(n.step!==l.step||l.priority!==n.priority)throw Error(`"${o(n.name,n.aliases)}" middleware with ${n.priority} priority in ${n.step} step cannot be overridden by "${o(i,a)}" middleware with ${l.priority} priority in ${l.step} step.`);e.splice(r,1)}}for(let e of c)u.add(e)}e.push(l)},addRelativeTo:(e,r)=>{let{name:i,override:s,aliases:a}=r,l={middleware:e,...r},c=n(i,a);if(c.length>0){if(c.some(e=>u.has(e))){if(!s)throw Error(`Duplicate middleware name '${o(i,a)}'`);for(let e of c){let r=t.findIndex(t=>t.name===e||t.aliases?.some(t=>t===e));if(-1===r)continue;let n=t[r];if(n.toMiddleware!==l.toMiddleware||n.relation!==l.relation)throw Error(`"${o(n.name,n.aliases)}" middleware ${n.relation} "${n.toMiddleware}" middleware cannot be overridden by "${o(i,a)}" middleware ${l.relation} "${l.toMiddleware}" middleware.`);t.splice(r,1)}}for(let e of c)u.add(e)}t.push(l)},clone:()=>f(i()),use:e=>{e.applyToStack(g)},remove:e=>"string"==typeof e?c(e):d(e),removeByTag:r=>{let o=!1,i=e=>{let{tags:t,name:i,aliases:s}=e;if(t&&t.includes(r)){for(let e of n(i,s))u.delete(e);return o=!0,!1}return!0};return e=e.filter(i),t=t.filter(i),o},concat:e=>{let t=f(i());return t.use(e),t.identifyOnResolve(r||t.identifyOnResolve()||(e.identifyOnResolve?.()??!1)),t},applyToStack:f,identify:()=>h(!0).map(e=>{let t=e.step??e.relation+" "+e.toMiddleware;return o(e.name,e.aliases)+" - "+t}),identifyOnResolve:e=>("boolean"==typeof e&&(r=e),r),resolve:(e,t)=>{for(let r of h().map(e=>e.middleware).reverse())e=r(e,t);return r&&console.log(g.identify()),e}};return g},s={initialize:5,serialize:4,build:3,finalizeRequest:2,deserialize:1},a={high:3,normal:2,low:1}}),a("9geO8",function(e,r){t(e.exports,"collectBody",()=>o),s("2d58m");var n=s("8OHFS");let o=async(e=new Uint8Array,t)=>{if(e instanceof Uint8Array)return(0,n.Uint8ArrayBlobAdapter).mutate(e);if(!e)return(0,n.Uint8ArrayBlobAdapter).mutate(new Uint8Array);let r=t.streamCollector(e);return(0,n.Uint8ArrayBlobAdapter).mutate(await r)}}),a("2d58m",function(e,r){t(e.exports,"Uint8ArrayBlobAdapter",()=>s("8OHFS").Uint8ArrayBlobAdapter),s("8OHFS"),s("gHjeZ"),s("8i3Gu")}),a("8OHFS",function(e,r){t(e.exports,"Uint8ArrayBlobAdapter",()=>o);var n=s("ctmA7");class o extends Uint8Array{static fromString(e,t="utf-8"){if("string"==typeof e)return(0,n.transformFromString)(e,t);throw Error(`Unsupported conversion from ${typeof e} to Uint8ArrayBlobAdapter.`)}static mutate(e){return Object.setPrototypeOf(e,o.prototype),e}transformToString(e="utf-8"){return(0,n.transformToString)(this,e)}}}),a("ctmA7",function(e,r){t(e.exports,"transformToString",()=>l),t(e.exports,"transformFromString",()=>c),s("byHYG");var n=s("i7UIG"),o=s("frgJX");s("c8eQc");var i=s("9IbJe"),a=s("8MyOO"),u=s("8OHFS");function l(e,t="utf-8"){return"base64"===t?(0,o.toBase64)(e):(0,a.toUtf8)(e)}function c(e,t){return"base64"===t?(0,u.Uint8ArrayBlobAdapter).mutate((0,n.fromBase64)(e)):(0,u.Uint8ArrayBlobAdapter).mutate((0,i.fromUtf8)(e))}}),a("byHYG",function(e,r){t(e.exports,"fromBase64",()=>s("i7UIG").fromBase64),t(e.exports,"toBase64",()=>s("frgJX").toBase64),s("i7UIG"),s("frgJX")}),a("i7UIG",function(e,r){t(e.exports,"fromBase64",()=>o);var n=s("fq6Ny");let o=e=>{let t=e.length/4*3;"=="===e.slice(-2)?t-=2:"="===e.slice(-1)&&t--;let r=new ArrayBuffer(t),o=new DataView(r);for(let t=0;t<e.length;t+=4){let r=0,i=0;for(let o=t,s=t+3;o<=s;o++)if("="!==e[o]){if(!(e[o]in n.alphabetByEncoding))throw TypeError(`Invalid character ${e[o]} in base64 string.`);r|=n.alphabetByEncoding[e[o]]<<(s-o)*n.bitsPerLetter,i+=n.bitsPerLetter}else r>>=n.bitsPerLetter;let s=t/4*3;r>>=i%n.bitsPerByte;let a=Math.floor(i/n.bitsPerByte);for(let e=0;e<a;e++){let t=(a-e-1)*n.bitsPerByte;o.setUint8(s+e,(r&255<<t)>>t)}}return new Uint8Array(r)}}),a("fq6Ny",function(e,r){t(e.exports,"alphabetByEncoding",()=>n),t(e.exports,"alphabetByValue",()=>o),t(e.exports,"bitsPerLetter",()=>i),t(e.exports,"bitsPerByte",()=>s),t(e.exports,"maxLetterValue",()=>a);let n={},o=Array(64);for(let e=0;e+65<=90;e++){let t=String.fromCharCode(e+65);n[t]=e,o[e]=t}for(let e=0;e+97<=122;e++){let t=String.fromCharCode(e+97),r=e+26;n[t]=r,o[r]=t}for(let e=0;e<10;e++){n[e.toString(10)]=e+52;let t=e.toString(10),r=e+52;n[t]=r,o[r]=t}n["+"]=62,o[62]="+",n["/"]=63,o[63]="/";let i=6,s=8,a=63}),a("frgJX",function(e,r){t(e.exports,"toBase64",()=>i),s("c8eQc");var n=s("9IbJe"),o=s("fq6Ny");function i(e){let t;let r="object"==typeof(t="string"==typeof e?(0,n.fromUtf8)(e):e)&&"number"==typeof t.length,i="object"==typeof t&&"number"==typeof t.byteOffset&&"number"==typeof t.byteLength;if(!r&&!i)throw Error("@smithy/util-base64: toBase64 encoder function only accepts string | Uint8Array.");let s="";for(let e=0;e<t.length;e+=3){let r=0,n=0;for(let i=e,s=Math.min(e+3,t.length);i<s;i++)r|=t[i]<<(s-i-1)*o.bitsPerByte,n+=o.bitsPerByte;let i=Math.ceil(n/o.bitsPerLetter);r<<=i*o.bitsPerLetter-n;for(let e=1;e<=i;e++){let t=(i-e)*o.bitsPerLetter;s+=o.alphabetByValue[(r&o.maxLetterValue<<t)>>t]}s+="==".slice(0,4-i)}return s}}),a("c8eQc",function(e,r){t(e.exports,"fromUtf8",()=>s("9IbJe").fromUtf8),t(e.exports,"toUint8Array",()=>s("9sP8E").toUint8Array),t(e.exports,"toUtf8",()=>s("8MyOO").toUtf8),s("9IbJe"),s("9sP8E"),s("8MyOO")}),a("9IbJe",function(e,r){t(e.exports,"fromUtf8",()=>n);let n=e=>new TextEncoder().encode(e)}),a("9sP8E",function(e,r){t(e.exports,"toUint8Array",()=>o);var n=s("9IbJe");let o=e=>"string"==typeof e?(0,n.fromUtf8)(e):ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e)}),a("8MyOO",function(e,r){t(e.exports,"toUtf8",()=>n);let n=e=>{if("string"==typeof e)return e;if("object"!=typeof e||"number"!=typeof e.byteOffset||"number"!=typeof e.byteLength)throw Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");return new TextDecoder("utf-8").decode(e)}}),a("gHjeZ",function(e,t){}),a("8i3Gu",function(e,t){s("hMLrR"),s("1vHsZ"),s("byHYG"),s("frgJX"),s("lSrkm"),s("c8eQc"),s("8MyOO")}),a("hMLrR",function(e,r){t(e.exports,"FetchHttpHandler",()=>s("XzriQ").FetchHttpHandler),t(e.exports,"streamCollector",()=>s("1vHsZ").streamCollector),s("XzriQ"),s("1vHsZ")}),a("XzriQ",function(e,r){t(e.exports,"FetchHttpHandler",()=>u),s("gR0fe");var n=s("iP6o5"),o=s("jLFOs"),i=s("7zp3b");let a={supported:void 0};class u{static create(e){return"function"==typeof e?.handle?e:new u(e)}constructor(e){"function"==typeof e?this.configProvider=e().then(e=>e||{}):(this.config=e??{},this.configProvider=Promise.resolve(this.config)),void 0===a.supported&&(a.supported=!!("undefined"!=typeof Request&&"keepalive"in new Request("https://[::1]")))}destroy(){}async handle(e,{abortSignal:t}={}){this.config||(this.config=await this.configProvider);let r=this.config.requestTimeout,s=!0===this.config.keepAlive,u=this.config.credentials;if(t?.aborted){let e=Error("Request aborted");return e.name="AbortError",Promise.reject(e)}let l=e.path,c=(0,o.buildQueryString)(e.query||{});c&&(l+=`?${c}`),e.fragment&&(l+=`#${e.fragment}`);let d="";if(null!=e.username||null!=e.password){let t=e.username??"",r=e.password??"";d=`${t}:${r}@`}let{port:f,method:p}=e,h=`${e.protocol}//${d}${e.hostname}${f?`:${f}`:""}${l}`,g="GET"===p||"HEAD"===p?void 0:e.body,m={body:g,headers:new Headers(e.headers),method:p,credentials:u};g&&(m.duplex="half"),"undefined"!=typeof AbortController&&(m.signal=t),a.supported&&(m.keepalive=s);let y=[fetch(new Request(h,m)).then(e=>{let t=e.headers,r={};for(let e of t.entries())r[e[0]]=e[1];return void 0!=e.body?{response:new n.HttpResponse({headers:r,reason:e.statusText,statusCode:e.status,body:e.body})}:e.blob().then(t=>({response:new n.HttpResponse({headers:r,reason:e.statusText,statusCode:e.status,body:t})}))}),(0,i.requestTimeout)(r)];return t&&y.push(new Promise((e,r)=>{let n=()=>{let e=Error("Request aborted");e.name="AbortError",r(e)};"function"==typeof t.addEventListener?t.addEventListener("abort",n):t.onabort=n})),Promise.race(y)}updateHttpClientConfig(e,t){this.config=void 0,this.configProvider=this.configProvider.then(r=>(r[e]=t,r))}httpHandlerConfigs(){return this.config??{}}}}),a("jLFOs",function(e,r){t(e.exports,"buildQueryString",()=>o),s("34IvK");var n=s("epJ6O");function o(e){let t=[];for(let r of Object.keys(e).sort()){let o=e[r];if(r=(0,n.escapeUri)(r),Array.isArray(o))for(let e=0,i=o.length;e<i;e++)t.push(`${r}=${(0,n.escapeUri)(o[e])}`);else{let e=r;(o||"string"==typeof o)&&(e+=`=${(0,n.escapeUri)(o)}`),t.push(e)}}return t.join("&")}}),a("34IvK",function(e,r){t(e.exports,"escapeUri",()=>s("epJ6O").escapeUri),s("epJ6O"),s("gykHq")}),a("epJ6O",function(e,r){t(e.exports,"escapeUri",()=>n);let n=e=>encodeURIComponent(e).replace(/[!'()*]/g,o),o=e=>`%${e.charCodeAt(0).toString(16).toUpperCase()}`}),a("gykHq",function(e,t){s("epJ6O")}),a("7zp3b",function(e,r){t(e.exports,"requestTimeout",()=>n);function n(e=0){return new Promise((t,r)=>{e&&setTimeout(()=>{let t=Error(`Request did not complete within ${e} ms`);t.name="TimeoutError",r(t)},e)})}}),a("1vHsZ",function(e,r){t(e.exports,"streamCollector",()=>o),s("byHYG");var n=s("i7UIG");let o=e=>"function"==typeof Blob&&e instanceof Blob?i(e):a(e);async function i(e){let t=await new Promise((t,r)=>{let n=new FileReader;n.onloadend=()=>{if(2!==n.readyState)return r(Error("Reader aborted too early"));let e=n.result??"",o=e.indexOf(","),i=o>-1?o+1:e.length;t(e.substring(i))},n.onabort=()=>r(Error("Read aborted")),n.onerror=()=>r(n.error),n.readAsDataURL(e)});return new Uint8Array((0,n.fromBase64)(t))}async function a(e){let t=[],r=e.getReader(),n=!1,o=0;for(;!n;){let{done:e,value:i}=await r.read();i&&(t.push(i),o+=i.length),n=e}let i=new Uint8Array(o),s=0;for(let e of t)i.set(e,s),s+=e.length;return i}}),a("lSrkm",function(e,r){t(e.exports,"fromHex",()=>i),t(e.exports,"toHex",()=>s);let n={},o={};for(let e=0;e<256;e++){let t=e.toString(16).toLowerCase();1===t.length&&(t=`0${t}`),n[e]=t,o[t]=e}function i(e){if(e.length%2!=0)throw Error("Hex encoded strings must have an even number length");let t=new Uint8Array(e.length/2);for(let r=0;r<e.length;r+=2){let n=e.slice(r,r+2).toLowerCase();if(n in o)t[r/2]=o[n];else throw Error(`Cannot decode unrecognized sequence ${n} as hexadecimal`)}return t}function s(e){let t="";for(let r=0;r<e.byteLength;r++)t+=n[e[r]];return t}}),a("8CeTn",function(e,r){t(e.exports,"Command",()=>i),s("hV3l5");var n=s("lNWn8");s("9M3ne");var o=s("gt3Fj");class i{constructor(){this.middlewareStack=(0,n.constructStack)()}static classBuilder(){return new a}resolveMiddlewareWithContext(e,t,r,{middlewareFn:n,clientName:i,commandName:s,inputFilterSensitiveLog:a,outputFilterSensitiveLog:u,smithyContext:l,additionalContext:c,CommandCtor:d}){for(let o of n.bind(this)(d,e,t,r))this.middlewareStack.use(o);let f=e.concat(this.middlewareStack),{logger:p}=t,h={logger:p,clientName:i,commandName:s,inputFilterSensitiveLog:a,outputFilterSensitiveLog:u,[o.SMITHY_CONTEXT_KEY]:{...l},...c},{requestHandler:g}=t;return f.resolve(e=>g.handle(e.request,r||{}),h)}}class a{constructor(){this._init=()=>{},this._ep={},this._middlewareFn=()=>[],this._commandName="",this._clientName="",this._additionalContext={},this._smithyContext={},this._inputFilterSensitiveLog=e=>e,this._outputFilterSensitiveLog=e=>e,this._serializer=null,this._deserializer=null}init(e){this._init=e}ep(e){return this._ep=e,this}m(e){return this._middlewareFn=e,this}s(e,t,r={}){return this._smithyContext={service:e,operation:t,...r},this}c(e={}){return this._additionalContext=e,this}n(e,t){return this._clientName=e,this._commandName=t,this}f(e=e=>e,t=e=>e){return this._inputFilterSensitiveLog=e,this._outputFilterSensitiveLog=t,this}ser(e){return this._serializer=e,this}de(e){return this._deserializer=e,this}build(){let e;let t=this;return e=class extends i{static getEndpointParameterInstructions(){return t._ep}constructor(...[e]){super(),this.serialize=t._serializer,this.deserialize=t._deserializer,this.input=e??{},t._init(this)}resolveMiddleware(r,n,o){return this.resolveMiddlewareWithContext(r,n,o,{CommandCtor:e,middlewareFn:t._middlewareFn,clientName:t._clientName,commandName:t._commandName,inputFilterSensitiveLog:t._inputFilterSensitiveLog,outputFilterSensitiveLog:t._outputFilterSensitiveLog,smithyContext:t._smithyContext,additionalContext:t._additionalContext})}}}}}),a("gVWsK",function(e,r){t(e.exports,"SENSITIVE_STRING",()=>n);let n="***SensitiveInformation***"}),a("8gmQ9",function(e,r){t(e.exports,"createAggregatedClient",()=>n);let n=(e,t)=>{for(let r of Object.keys(e)){let n=e[r],o=async function(e,t,r){let o=new n(e);if("function"==typeof t)this.send(o,t);else{if("function"!=typeof r)return this.send(o,t);if("object"!=typeof t)throw Error(`Expected http options but got ${typeof t}`);this.send(o,t||{},r)}},i=(r[0].toLowerCase()+r.slice(1)).replace(/Command$/,"");t.prototype[i]=o}}}),a("7u1MS",function(e,t){s("3y1NG"),new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/),new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?(([-+]\d{2}\:\d{2})|[zZ])$/),new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/),new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/),new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/)}),a("3y1NG",function(e,r){t(e.exports,"expectInt32",()=>a),t(e.exports,"expectNonNull",()=>f),t(e.exports,"expectObject",()=>p),t(e.exports,"expectString",()=>h),t(e.exports,"expectUnion",()=>g),t(e.exports,"strictParseDouble",()=>m),t(e.exports,"strictParseFloat32",()=>y),t(e.exports,"strictParseShort",()=>S),t(e.exports,"strictParseByte",()=>b);let n=e=>{if(null!=e){if("string"==typeof e){let t=parseFloat(e);if(!Number.isNaN(t))return String(t)!==String(e)&&w.warn(x(`Expected number but observed string: ${e}`)),t}if("number"==typeof e)return e;throw TypeError(`Expected number, got ${typeof e}: ${e}`)}},o=Math.ceil(17014118346046923e22*(2-11920928955078125e-23)),i=e=>{let t=n(e);if(void 0!==t&&!Number.isNaN(t)&&t!==1/0&&t!==-1/0&&Math.abs(t)>o)throw TypeError(`Expected 32-bit float, got ${e}`);return t},s=e=>{if(null!=e){if(Number.isInteger(e)&&!Number.isNaN(e))return e;throw TypeError(`Expected integer, got ${typeof e}: ${e}`)}},a=e=>c(e,32),u=e=>c(e,16),l=e=>c(e,8),c=(e,t)=>{let r=s(e);if(void 0!==r&&d(r,t)!==r)throw TypeError(`Expected ${t}-bit integer, got ${e}`);return r},d=(e,t)=>{switch(t){case 32:return Int32Array.of(e)[0];case 16:return Int16Array.of(e)[0];case 8:return Int8Array.of(e)[0]}},f=(e,t)=>{if(null==e){if(t)throw TypeError(`Expected a non-null value for ${t}`);throw TypeError("Expected a non-null value")}return e},p=e=>{if(null==e)return;if("object"==typeof e&&!Array.isArray(e))return e;let t=Array.isArray(e)?"array":typeof e;throw TypeError(`Expected object, got ${t}: ${e}`)},h=e=>{if(null!=e){if("string"==typeof e)return e;if(["boolean","number","bigint"].includes(typeof e))return w.warn(x(`Expected string, got ${typeof e}: ${e}`)),String(e);throw TypeError(`Expected string, got ${typeof e}: ${e}`)}},g=e=>{if(null==e)return;let t=p(e),r=Object.entries(t).filter(([,e])=>null!=e).map(([e])=>e);if(0===r.length)throw TypeError("Unions must have exactly one non-null member. None were found.");if(r.length>1)throw TypeError(`Unions must have exactly one non-null member. Keys ${r} were not null.`);return t},m=e=>"string"==typeof e?n(v(e)):n(e),y=e=>"string"==typeof e?i(v(e)):i(e),E=/(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g,v=e=>{let t=e.match(E);if(null===t||t[0].length!==e.length)throw TypeError("Expected real number, got implicit NaN");return parseFloat(e)},S=e=>"string"==typeof e?u(v(e)):u(e),b=e=>"string"==typeof e?l(v(e)):l(e),x=e=>String(TypeError(e).stack||e).split("\n").slice(0,5).filter(e=>!e.includes("stackTraceWarning")).join("\n"),w={warn:console.warn}}),a("b2H9k",function(e,r){t(e.exports,"withBaseException",()=>i);var n=s("jukpK");let o=({output:e,parsedBody:t,exceptionCtor:r,errorCode:o})=>{let i=a(e),s=i.httpStatusCode?i.httpStatusCode+"":void 0,u=new r({name:t?.code||t?.Code||o||s||"UnknownError",$fault:"client",$metadata:i});throw(0,n.decorateServiceException)(u,t)},i=e=>({output:t,parsedBody:r,errorCode:n})=>{o({output:t,parsedBody:r,exceptionCtor:e,errorCode:n})},a=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]})}),a("jukpK",function(e,r){t(e.exports,"ServiceException",()=>n),t(e.exports,"decorateServiceException",()=>o);class n extends Error{constructor(e){super(e.message),Object.setPrototypeOf(this,n.prototype),this.name=e.name,this.$fault=e.$fault,this.$metadata=e.$metadata}}let o=(e,t={})=>{Object.entries(t).filter(([,e])=>void 0!==e).forEach(([t,r])=>{(void 0==e[t]||""===e[t])&&(e[t]=r)});let r=e.message||e.Message||"UnknownError";return e.message=r,delete e.Message,e}}),a("j0smT",function(e,r){t(e.exports,"loadConfigsForDefaultMode",()=>n);let n=e=>{switch(e){case"standard":case"cross-region":return{retryMode:"standard",connectionTimeout:3100};case"in-region":return{retryMode:"standard",connectionTimeout:1100};case"mobile":return{retryMode:"standard",connectionTimeout:3e4};default:return{}}}}),a("2f77u",function(e,t){}),a("i9k8n",function(e,r){t(e.exports,"getDefaultExtensionConfiguration",()=>s("alxfc").getDefaultExtensionConfiguration),t(e.exports,"resolveDefaultRuntimeConfig",()=>s("alxfc").resolveDefaultRuntimeConfig),s("alxfc")}),a("alxfc",function(e,r){t(e.exports,"getDefaultExtensionConfiguration",()=>i),t(e.exports,"resolveDefaultRuntimeConfig",()=>a);var n=s("bx26a"),o=s("dQQ2m");let i=e=>({...(0,n.getChecksumConfiguration)(e),...(0,o.getRetryConfiguration)(e)}),a=e=>({...(0,n.resolveChecksumRuntimeConfig)(e),...(0,o.resolveRetryRuntimeConfig)(e)})}),a("bx26a",function(e,r){t(e.exports,"getChecksumConfiguration",()=>o),t(e.exports,"resolveChecksumRuntimeConfig",()=>i),s("9M3ne");var n=s("bRjim");let o=e=>{let t=[];for(let r in n.AlgorithmId){let o=n.AlgorithmId[r];void 0!==e[o]&&t.push({algorithmId:()=>o,checksumConstructor:()=>e[o]})}return{_checksumAlgorithms:t,addChecksumAlgorithm(e){this._checksumAlgorithms.push(e)},checksumAlgorithms(){return this._checksumAlgorithms}}},i=e=>{let t={};return e.checksumAlgorithms().forEach(e=>{t[e.algorithmId()]=e.checksumConstructor()}),t}}),a("dQQ2m",function(e,r){t(e.exports,"getRetryConfiguration",()=>n),t(e.exports,"resolveRetryRuntimeConfig",()=>o);let n=e=>{let t=e.retryStrategy;return{setRetryStrategy(e){t=e},retryStrategy:()=>t}},o=e=>{let t={};return t.retryStrategy=e.retryStrategy(),t}}),a("5VtZ2",function(e,r){t(e.exports,"extendedEncodeURIComponent",()=>n);function n(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}}),a("3h1aR",function(e,t){}),a("5CVax",function(e,t){}),a("jXGu1",function(e,t){let r=function(){let e=Object.getPrototypeOf(this).constructor,t=Function.bind.apply(String,[null,...arguments]),r=new t;return Object.setPrototypeOf(r,e.prototype),r};r.prototype=Object.create(String.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),Object.setPrototypeOf(r,String)}),a("cDm2A",function(e,r){function n(e,t,r){let n,o;if(void 0===t&&void 0===r)n={},o=e;else{if(n=e,"function"==typeof t)return i(n,t,o=r);o=t}for(let e of Object.keys(o)){if(!Array.isArray(o[e])){n[e]=o[e];continue}s(n,null,o,e)}return n}t(e.exports,"map",()=>n),t(e.exports,"take",()=>o);let o=(e,t)=>{let r={};for(let n in t)s(r,e,t,n);return r},i=(e,t,r)=>n(e,Object.entries(r).reduce((e,[r,n])=>(Array.isArray(n)?e[r]=n:"function"==typeof n?e[r]=[t,n()]:e[r]=[t,n],e),{})),s=(e,t,r,n)=>{if(null!==t){let o=r[n];"function"==typeof o&&(o=[,o]);let[i=a,s=u,l=n]=o;("function"==typeof i&&i(t[l])||"function"!=typeof i&&i)&&(e[n]=s(t[l]));return}let[o,i]=r[n];if("function"==typeof i){let t;let r=void 0===o&&null!=(t=i()),s="function"==typeof o&&!!o(void 0)||"function"!=typeof o&&!!o;r?e[n]=t:s&&(e[n]=i())}else{let t=void 0===o&&null!=i,r="function"==typeof o&&!!o(i)||"function"!=typeof o&&!!o;(t||r)&&(e[n]=i)}},a=e=>null!=e,u=e=>e}),a("3gee1",function(e,r){t(e.exports,"resolvedPath",()=>o);var n=s("5VtZ2");let o=(e,t,r,o,i,s)=>{if(null!=t&&void 0!==t[r]){let t=o();if(t.length<=0)throw Error("Empty value provided for input HTTP label: "+r+".");e=e.replace(i,s?t.split("/").map(e=>(0,n.extendedEncodeURIComponent)(e)).join("/"):(0,n.extendedEncodeURIComponent)(t))}else throw Error("No value provided for input HTTP label: "+r+".");return e}}),a("aLLZf",function(e,r){t(e.exports,"serializeFloat",()=>n);let n=e=>{if(e!=e)return"NaN";switch(e){case 1/0:return"Infinity";case-1/0:return"-Infinity";default:return e}}}),a("2WfFW",function(e,r){t(e.exports,"_json",()=>n);let n=e=>{if(null==e)return{};if(Array.isArray(e))return e.filter(e=>null!=e).map(n);if("object"==typeof e){let t={};for(let r of Object.keys(e))null!=e[r]&&(t[r]=n(e[r]));return t}return e}}),a("dZGZi",function(e,t){}),a("dIaXF",function(e,r){t(e.exports,"isStreamingPayload",()=>n);let n=e=>e?.body instanceof ReadableStream}),a("8jtdq",function(e,r){t(e.exports,"DefaultIdentityProviderConfig",()=>s("dOWbV").DefaultIdentityProviderConfig),t(e.exports,"doesIdentityRequireRefresh",()=>s("2SaG3").doesIdentityRequireRefresh),t(e.exports,"isIdentityExpired",()=>s("2SaG3").isIdentityExpired),t(e.exports,"memoizeIdentityProvider",()=>s("2SaG3").memoizeIdentityProvider),s("dOWbV"),s("82PUP"),s("2SaG3")}),a("dOWbV",function(e,r){t(e.exports,"DefaultIdentityProviderConfig",()=>n);class n{constructor(e){for(let[t,r]of(this.authSchemes=new Map,Object.entries(e)))void 0!==r&&this.authSchemes.set(t,r)}getIdentityProvider(e){return this.authSchemes.get(e)}}}),a("82PUP",function(e,t){s("hRTQH"),s("2X1gh"),s("leQEK")}),a("hRTQH",function(e,t){s("9M3ne"),s("kJiuO")}),a("2X1gh",function(e,t){}),a("leQEK",function(e,t){}),a("2SaG3",function(e,r){t(e.exports,"doesIdentityRequireRefresh",()=>o),t(e.exports,"isIdentityExpired",()=>n),t(e.exports,"memoizeIdentityProvider",()=>i);let n=e=>o(e)&&e.expiration.getTime()-Date.now()<3e5,o=e=>void 0!==e.expiration,i=(e,t,r)=>{let n,o,i;if(void 0===e)return;let s="function"!=typeof e?async()=>Promise.resolve(e):e,a=!1,u=async e=>{o||(o=s(e));try{n=await o,i=!0,a=!1}finally{o=void 0}return n};return void 0===t?async e=>((!i||e?.forceRefresh)&&(n=await u(e)),n):async e=>((!i||e?.forceRefresh)&&(n=await u(e)),a||(r(n)?t(n)&&await u(e):a=!0),n)}}),a("eRi23",function(e,t){s("9M3ne"),s("gt3Fj")}),a("Qin4u",function(e,r){t(e.exports,"normalizeProvider",()=>n);let n=e=>{if("function"==typeof e)return e;let t=Promise.resolve(e);return()=>t}}),a("l7S8v",function(e,r){t(e.exports,"requestBuilder",()=>i),s("gR0fe");var n=s("j0mzq");s("3ThPo");var o=s("3gee1");function i(e,t){return new a(e,t)}class a{constructor(e,t){this.input=e,this.context=t,this.query={},this.method="",this.headers={},this.path="",this.body=null,this.hostname="",this.resolvePathStack=[]}async build(){let{hostname:e,protocol:t="https",port:r,path:o}=await this.context.endpoint();for(let e of(this.path=o,this.resolvePathStack))e(this.path);return new n.HttpRequest({protocol:t,hostname:this.hostname||e,port:r,method:this.method,path:this.path,query:this.query,body:this.body,headers:this.headers})}hn(e){return this.hostname=e,this}bp(e){return this.resolvePathStack.push(t=>{this.path=`${t?.endsWith("/")?t.slice(0,-1):t||""}`+e}),this}p(e,t,r,n){return this.resolvePathStack.push(i=>{this.path=(0,o.resolvedPath)(i,this.input,e,t,r,n)}),this}h(e){return this.headers=e,this}q(e){return this.query=e,this}b(e){return this.body=e,this}m(e){return this.method=e,this}}}),a("CI32B",function(e,t){}),a("d6J3N",function(e,r){t(e.exports,"resolveEventStreamSerdeConfig",()=>s("6ToBQ").resolveEventStreamSerdeConfig),s("6ToBQ")}),a("6ToBQ",function(e,r){t(e.exports,"resolveEventStreamSerdeConfig",()=>n);let n=e=>({...e,eventStreamMarshaller:e.eventStreamSerdeProvider(e)})}),a("bcR81",function(e,r){t(e.exports,"getContentLengthPlugin",()=>a),s("gR0fe");var n=s("j0mzq");let o="content-length",i={step:"build",tags:["SET_CONTENT_LENGTH","CONTENT_LENGTH"],name:"contentLengthMiddleware",override:!0},a=e=>({applyToStack:t=>{var r;t.add((r=e.bodyLengthChecker,e=>async t=>{let i=t.request;if((0,n.HttpRequest).isInstance(i)){let{body:e,headers:t}=i;if(e&&-1===Object.keys(t).map(e=>e.toLowerCase()).indexOf(o))try{let t=r(e);i.headers={...i.headers,[o]:String(t)}}catch(e){}}return e({...t,request:i})}),i)}})}),a("2ud0c",function(e,r){t(e.exports,"defaultBedrockRuntimeHttpAuthSchemeParametersProvider",()=>a),t(e.exports,"defaultBedrockRuntimeHttpAuthSchemeProvider",()=>u),t(e.exports,"resolveHttpAuthSchemeConfig",()=>l);var n=s("4suTu");s("aebvT");var o=s("ia9MB"),i=s("5H56Q");let a=async(e,t,r)=>({operation:(0,o.getSmithyContext)(t).operation,region:await (0,i.normalizeProvider)(e.region)()||(()=>{throw Error("expected `region` to be configured for `aws.auth#sigv4`")})()}),u=e=>{let t=[];return e.operation,t.push({schemeId:"aws.auth#sigv4",signingProperties:{name:"bedrock",region:e.region},propertiesExtractor:(e,t)=>({signingProperties:{config:e,context:t}})}),t},l=e=>({...(0,n.resolveAwsSdkSigV4Config)(e)})}),a("4suTu",function(e,r){t(e.exports,"resolveAwsSdkSigV4Config",()=>a),s("3q3gO");var n=s("2SaG3"),o=s("Qin4u");s("6Gu7i");var i=s("jHxFS");let a=e=>{let t,r;e.credentials&&(t=(0,n.memoizeIdentityProvider)(e.credentials,n.isIdentityExpired,n.doesIdentityRequireRefresh)),t||(t=e.credentialDefaultProvider?(0,o.normalizeProvider)(e.credentialDefaultProvider(Object.assign({},e,{parentClientConfig:e}))):async()=>{throw Error("`credentials` is missing")});let{signingEscapePath:s=!0,systemClockOffset:a=e.systemClockOffset||0,sha256:u}=e;return r=e.signer?(0,o.normalizeProvider)(e.signer):e.regionInfoProvider?()=>(0,o.normalizeProvider)(e.region)().then(async t=>[await e.regionInfoProvider(t,{useFipsEndpoint:await e.useFipsEndpoint(),useDualstackEndpoint:await e.useDualstackEndpoint()})||{},t]).then(([r,n])=>{let{signingRegion:o,signingService:a}=r;e.signingRegion=e.signingRegion||o||n,e.signingName=e.signingName||a||e.serviceId;let l={...e,credentials:t,region:e.signingRegion,service:e.signingName,sha256:u,uriEscapePath:s};return new(e.signerConstructor||i.SignatureV4)(l)}):async r=>{let n=(r=Object.assign({},{name:"sigv4",signingName:e.signingName||e.defaultSigningName,signingRegion:await (0,o.normalizeProvider)(e.region)(),properties:{}},r)).signingRegion,a=r.signingName;e.signingRegion=e.signingRegion||n,e.signingName=e.signingName||a||e.serviceId;let l={...e,credentials:t,region:e.signingRegion,service:e.signingName,sha256:u,uriEscapePath:s};return new(e.signerConstructor||i.SignatureV4)(l)},{...e,systemClockOffset:a,signingEscapePath:s,credentials:t,signer:r}}}),a("6Gu7i",function(e,r){t(e.exports,"SignatureV4",()=>s("jHxFS").SignatureV4),s("jHxFS"),s("hXBU8"),s("bFv98"),s("e01Gh"),s("5cU0h"),s("8MN4l"),s("cBhtX")}),a("jHxFS",function(e,r){t(e.exports,"SignatureV4",()=>E);var n=s("lSrkm");s("aebvT");var o=s("5H56Q");s("34IvK");var i=s("epJ6O");s("c8eQc");var a=s("9sP8E"),u=s("8pfqP"),l=s("cBhtX"),c=s("hXBU8"),d=s("bFv98"),f=s("e01Gh"),p=s("eBGdQ"),h=s("jiRGI"),g=s("5cU0h"),m=s("8MN4l"),y=s("aD9fI");class E{constructor({applyChecksum:e,credentials:t,region:r,service:n,sha256:i,uriEscapePath:s=!0}){this.headerFormatter=new p.HeaderFormatter,this.service=n,this.sha256=i,this.uriEscapePath=s,this.applyChecksum="boolean"!=typeof e||e,this.regionProvider=(0,o.normalizeProvider)(r),this.credentialProvider=(0,o.normalizeProvider)(t)}async presign(e,t={}){let{signingDate:r=new Date,expiresIn:n=3600,unsignableHeaders:o,unhoistableHeaders:i,signableHeaders:s,signingRegion:a,signingService:d}=t,p=await this.credentialProvider();this.validateResolvedCredentials(p);let h=a??await this.regionProvider(),{longDate:y,shortDate:E}=v(r);if(n>u.MAX_PRESIGNED_TTL)return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");let b=(0,l.createScope)(E,h,d??this.service),x=(0,g.moveHeadersToQuery)((0,m.prepareRequest)(e),{unhoistableHeaders:i});p.sessionToken&&(x.query[u.TOKEN_QUERY_PARAM]=p.sessionToken),x.query[u.ALGORITHM_QUERY_PARAM]=u.ALGORITHM_IDENTIFIER,x.query[u.CREDENTIAL_QUERY_PARAM]=`${p.accessKeyId}/${b}`,x.query[u.AMZ_DATE_QUERY_PARAM]=y,x.query[u.EXPIRES_QUERY_PARAM]=n.toString(10);let w=(0,c.getCanonicalHeaders)(x,o,s);return x.query[u.SIGNED_HEADERS_QUERY_PARAM]=S(w),x.query[u.SIGNATURE_QUERY_PARAM]=await this.getSignature(y,b,this.getSigningKey(p,h,E,d),this.createCanonicalRequest(x,w,await (0,f.getPayloadHash)(e,this.sha256))),x}async sign(e,t){return"string"==typeof e?this.signString(e,t):e.headers&&e.payload?this.signEvent(e,t):e.message?this.signMessage(e,t):this.signRequest(e,t)}async signEvent({headers:e,payload:t},{signingDate:r=new Date,priorSignature:o,signingRegion:i,signingService:s}){let a=i??await this.regionProvider(),{shortDate:c,longDate:d}=v(r),p=(0,l.createScope)(c,a,s??this.service),h=await (0,f.getPayloadHash)({headers:{},body:t},this.sha256),g=new this.sha256;g.update(e);let m=(0,n.toHex)(await g.digest()),y=[(0,u.EVENT_ALGORITHM_IDENTIFIER),d,p,o,m,h].join("\n");return this.signString(y,{signingDate:r,signingRegion:a,signingService:s})}async signMessage(e,{signingDate:t=new Date,signingRegion:r,signingService:n}){return this.signEvent({headers:this.headerFormatter.format(e.message.headers),payload:e.message.body},{signingDate:t,signingRegion:r,signingService:n,priorSignature:e.priorSignature}).then(t=>({message:e.message,signature:t}))}async signString(e,{signingDate:t=new Date,signingRegion:r,signingService:o}={}){let i=await this.credentialProvider();this.validateResolvedCredentials(i);let s=r??await this.regionProvider(),{shortDate:u}=v(t),l=new this.sha256(await this.getSigningKey(i,s,u,o));return l.update((0,a.toUint8Array)(e)),(0,n.toHex)(await l.digest())}async signRequest(e,{signingDate:t=new Date,signableHeaders:r,unsignableHeaders:n,signingRegion:o,signingService:i}={}){let s=await this.credentialProvider();this.validateResolvedCredentials(s);let a=o??await this.regionProvider(),d=(0,m.prepareRequest)(e),{longDate:p,shortDate:g}=v(t),y=(0,l.createScope)(g,a,i??this.service);d.headers[u.AMZ_DATE_HEADER]=p,s.sessionToken&&(d.headers[u.TOKEN_HEADER]=s.sessionToken);let E=await (0,f.getPayloadHash)(d,this.sha256);!(0,h.hasHeader)(u.SHA256_HEADER,d.headers)&&this.applyChecksum&&(d.headers[u.SHA256_HEADER]=E);let b=(0,c.getCanonicalHeaders)(d,n,r),x=await this.getSignature(p,y,this.getSigningKey(s,a,g,i),this.createCanonicalRequest(d,b,E));return d.headers[u.AUTH_HEADER]=`${u.ALGORITHM_IDENTIFIER} Credential=${s.accessKeyId}/${y}, SignedHeaders=${S(b)}, Signature=${x}`,d}createCanonicalRequest(e,t,r){let n=Object.keys(t).sort();return`${e.method}
${this.getCanonicalPath(e)}
${(0,d.getCanonicalQuery)(e)}
${n.map(e=>`${e}:${t[e]}`).join("\n")}

${n.join(";")}
${r}`}async createStringToSign(e,t,r){let o=new this.sha256;o.update((0,a.toUint8Array)(r));let i=await o.digest();return`${u.ALGORITHM_IDENTIFIER}
${e}
${t}
${(0,n.toHex)(i)}`}getCanonicalPath({path:e}){if(this.uriEscapePath){let t=[];for(let r of e.split("/"))r?.length!==0&&"."!==r&&(".."===r?t.pop():t.push(r));let r=`${e?.startsWith("/")?"/":""}${t.join("/")}${t.length>0&&e?.endsWith("/")?"/":""}`;return(0,i.escapeUri)(r).replace(/%2F/g,"/")}return e}async getSignature(e,t,r,o){let i=await this.createStringToSign(e,t,o),s=new this.sha256(await r);return s.update((0,a.toUint8Array)(i)),(0,n.toHex)(await s.digest())}getSigningKey(e,t,r,n){return(0,l.getSigningKey)(this.sha256,e,r,t,n||this.service)}validateResolvedCredentials(e){if("object"!=typeof e||"string"!=typeof e.accessKeyId||"string"!=typeof e.secretAccessKey)throw Error("Resolved credential object is not valid")}}let v=e=>{let t=(0,y.iso8601)(e).replace(/[\-:]/g,"");return{longDate:t,shortDate:t.slice(0,8)}},S=e=>Object.keys(e).sort().join(";")}),a("8pfqP",function(e,r){t(e.exports,"ALGORITHM_QUERY_PARAM",()=>n),t(e.exports,"CREDENTIAL_QUERY_PARAM",()=>o),t(e.exports,"AMZ_DATE_QUERY_PARAM",()=>i),t(e.exports,"SIGNED_HEADERS_QUERY_PARAM",()=>s),t(e.exports,"EXPIRES_QUERY_PARAM",()=>a),t(e.exports,"SIGNATURE_QUERY_PARAM",()=>u),t(e.exports,"TOKEN_QUERY_PARAM",()=>l),t(e.exports,"AUTH_HEADER",()=>c),t(e.exports,"AMZ_DATE_HEADER",()=>d),t(e.exports,"GENERATED_HEADERS",()=>f),t(e.exports,"SIGNATURE_HEADER",()=>p),t(e.exports,"SHA256_HEADER",()=>h),t(e.exports,"TOKEN_HEADER",()=>g),t(e.exports,"ALWAYS_UNSIGNABLE_HEADERS",()=>m),t(e.exports,"PROXY_HEADER_PATTERN",()=>y),t(e.exports,"SEC_HEADER_PATTERN",()=>E),t(e.exports,"ALGORITHM_IDENTIFIER",()=>v),t(e.exports,"EVENT_ALGORITHM_IDENTIFIER",()=>S),t(e.exports,"UNSIGNED_PAYLOAD",()=>b),t(e.exports,"MAX_CACHE_SIZE",()=>x),t(e.exports,"KEY_TYPE_IDENTIFIER",()=>w),t(e.exports,"MAX_PRESIGNED_TTL",()=>R);let n="X-Amz-Algorithm",o="X-Amz-Credential",i="X-Amz-Date",s="X-Amz-SignedHeaders",a="X-Amz-Expires",u="X-Amz-Signature",l="X-Amz-Security-Token",c="authorization",d=i.toLowerCase(),f=[c,d,"date"],p=u.toLowerCase(),h="x-amz-content-sha256",g=l.toLowerCase(),m={authorization:!0,"cache-control":!0,connection:!0,expect:!0,from:!0,"keep-alive":!0,"max-forwards":!0,pragma:!0,referer:!0,te:!0,trailer:!0,"transfer-encoding":!0,upgrade:!0,"user-agent":!0,"x-amzn-trace-id":!0},y=/^proxy-/,E=/^sec-/,v="AWS4-HMAC-SHA256",S="AWS4-HMAC-SHA256-PAYLOAD",b="UNSIGNED-PAYLOAD",x=50,w="aws4_request",R=604800}),a("cBhtX",function(e,r){t(e.exports,"createScope",()=>l),t(e.exports,"getSigningKey",()=>c);var n=s("lSrkm");s("c8eQc");var o=s("9sP8E"),i=s("8pfqP");let a={},u=[],l=(e,t,r)=>`${e}/${t}/${r}/${i.KEY_TYPE_IDENTIFIER}`,c=async(e,t,r,o,s)=>{let l=await d(e,t.secretAccessKey,t.accessKeyId),c=`${r}:${o}:${s}:${(0,n.toHex)(l)}:${t.sessionToken}`;if(c in a)return a[c];for(u.push(c);u.length>i.MAX_CACHE_SIZE;)delete a[u.shift()];let f=`AWS4${t.secretAccessKey}`;for(let t of[r,o,s,i.KEY_TYPE_IDENTIFIER])f=await d(e,f,t);return a[c]=f},d=(e,t,r)=>{let n=new e(t);return n.update((0,o.toUint8Array)(r)),n.digest()}}),a("hXBU8",function(e,r){t(e.exports,"getCanonicalHeaders",()=>o);var n=s("8pfqP");let o=({headers:e},t,r)=>{let o={};for(let i of Object.keys(e).sort()){if(void 0==e[i])continue;let s=i.toLowerCase();(!(s in n.ALWAYS_UNSIGNABLE_HEADERS||t?.has(s)||(0,n.PROXY_HEADER_PATTERN).test(s)||(0,n.SEC_HEADER_PATTERN).test(s))||r&&(!r||r.has(s)))&&(o[s]=e[i].trim().replace(/\s+/g," "))}return o}}),a("bFv98",function(e,r){t(e.exports,"getCanonicalQuery",()=>i),s("34IvK");var n=s("epJ6O"),o=s("8pfqP");let i=({query:e={}})=>{let t=[],r={};for(let i of Object.keys(e).sort()){if(i.toLowerCase()===o.SIGNATURE_HEADER)continue;t.push(i);let s=e[i];"string"==typeof s?r[i]=`${(0,n.escapeUri)(i)}=${(0,n.escapeUri)(s)}`:Array.isArray(s)&&(r[i]=s.slice(0).reduce((e,t)=>e.concat([`${(0,n.escapeUri)(i)}=${(0,n.escapeUri)(t)}`]),[]).sort().join("&"))}return t.map(e=>r[e]).filter(e=>e).join("&")}}),a("e01Gh",function(e,r){t(e.exports,"getPayloadHash",()=>u);var n=s("8cf7S"),o=s("lSrkm");s("c8eQc");var i=s("9sP8E"),a=s("8pfqP");let u=async({headers:e,body:t},r)=>{for(let t of Object.keys(e))if(t.toLowerCase()===a.SHA256_HEADER)return e[t];if(void 0==t)return"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";if("string"==typeof t||ArrayBuffer.isView(t)||(0,n.isArrayBuffer)(t)){let e=new r;return e.update((0,i.toUint8Array)(t)),(0,o.toHex)(await e.digest())}return a.UNSIGNED_PAYLOAD}}),a("8cf7S",function(e,r){t(e.exports,"isArrayBuffer",()=>n);let n=e=>"function"==typeof ArrayBuffer&&e instanceof ArrayBuffer||"[object ArrayBuffer]"===Object.prototype.toString.call(e)}),a("eBGdQ",function(e,r){t(e.exports,"HeaderFormatter",()=>u);var n,o,i=s("lSrkm");s("c8eQc");var a=s("9IbJe");class u{format(e){let t=[];for(let r of Object.keys(e)){let n=(0,a.fromUtf8)(r);t.push(Uint8Array.from([n.byteLength]),n,this.formatHeaderValue(e[r]))}let r=new Uint8Array(t.reduce((e,t)=>e+t.byteLength,0)),n=0;for(let e of t)r.set(e,n),n+=e.byteLength;return r}formatHeaderValue(e){switch(e.type){case"boolean":return Uint8Array.from([e.value?0:1]);case"byte":return Uint8Array.from([2,e.value]);case"short":let t=new DataView(new ArrayBuffer(3));return t.setUint8(0,3),t.setInt16(1,e.value,!1),new Uint8Array(t.buffer);case"integer":let r=new DataView(new ArrayBuffer(5));return r.setUint8(0,4),r.setInt32(1,e.value,!1),new Uint8Array(r.buffer);case"long":let n=new Uint8Array(9);return n[0]=5,n.set(e.value.bytes,1),n;case"binary":let o=new DataView(new ArrayBuffer(3+e.value.byteLength));o.setUint8(0,6),o.setUint16(1,e.value.byteLength,!1);let s=new Uint8Array(o.buffer);return s.set(e.value,3),s;case"string":let u=(0,a.fromUtf8)(e.value),d=new DataView(new ArrayBuffer(3+u.byteLength));d.setUint8(0,7),d.setUint16(1,u.byteLength,!1);let f=new Uint8Array(d.buffer);return f.set(u,3),f;case"timestamp":let p=new Uint8Array(9);return p[0]=8,p.set(c.fromNumber(e.value.valueOf()).bytes,1),p;case"uuid":if(!l.test(e.value))throw Error(`Invalid UUID received: ${e.value}`);let h=new Uint8Array(17);return h[0]=9,h.set((0,i.fromHex)(e.value.replace(/\-/g,"")),1),h}}}(n=o||(o={}))[n.boolTrue=0]="boolTrue",n[n.boolFalse=1]="boolFalse",n[n.byte=2]="byte",n[n.short=3]="short",n[n.integer=4]="integer",n[n.long=5]="long",n[n.byteArray=6]="byteArray",n[n.string=7]="string",n[n.timestamp=8]="timestamp",n[n.uuid=9]="uuid";let l=/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;class c{constructor(e){if(this.bytes=e,8!==e.byteLength)throw Error("Int64 buffers must be exactly 8 bytes")}static fromNumber(e){if(e>0x7fffffffffffffff||e<-0x8000000000000000)throw Error(`${e} is too large (or, if negative, too small) to represent as an Int64`);let t=new Uint8Array(8);for(let r=7,n=Math.abs(Math.round(e));r>-1&&n>0;r--,n/=256)t[r]=n;return e<0&&d(t),new c(t)}valueOf(){let e=this.bytes.slice(0),t=128&e[0];return t&&d(e),parseInt((0,i.toHex)(e),16)*(t?-1:1)}toString(){return String(this.valueOf())}}function d(e){for(let t=0;t<8;t++)e[t]^=255;for(let t=7;t>-1&&(e[t]++,0===e[t]);t--);}}),a("jiRGI",function(e,r){t(e.exports,"hasHeader",()=>n);let n=(e,t)=>{for(let r of(e=e.toLowerCase(),Object.keys(t)))if(e===r.toLowerCase())return!0;return!1}}),a("5cU0h",function(e,r){t(e.exports,"moveHeadersToQuery",()=>o);var n=s("gu2lI");let o=(e,t={})=>{let{headers:r,query:o={}}="function"==typeof e.clone?e.clone():(0,n.cloneRequest)(e);for(let e of Object.keys(r)){let n=e.toLowerCase();"x-amz-"!==n.slice(0,6)||t.unhoistableHeaders?.has(n)||(o[e]=r[e],delete r[e])}return{...e,headers:r,query:o}}}),a("gu2lI",function(e,r){t(e.exports,"cloneRequest",()=>n);let n=({headers:e,query:t,...r})=>({...r,headers:{...e},query:t?o(t):void 0}),o=e=>Object.keys(e).reduce((t,r)=>{let n=e[r];return{...t,[r]:Array.isArray(n)?[...n]:n}},{})}),a("8MN4l",function(e,r){t(e.exports,"prepareRequest",()=>i);var n=s("gu2lI"),o=s("8pfqP");let i=e=>{for(let t of Object.keys((e="function"==typeof e.clone?e.clone():(0,n.cloneRequest)(e)).headers))(0,o.GENERATED_HEADERS).indexOf(t.toLowerCase())>-1&&delete e.headers[t];return e}}),a("aD9fI",function(e,r){t(e.exports,"iso8601",()=>n);let n=e=>o(e).toISOString().replace(/\.\d{3}Z$/,"Z"),o=e=>"number"==typeof e?new Date(1e3*e):"string"==typeof e?new Date(Number(e)?1e3*Number(e):e):e}),a("it8kL",function(e,r){t(e.exports,"resolveClientEndpointParameters",()=>n),t(e.exports,"commonParams",()=>o);let n=e=>({...e,useDualstackEndpoint:e.useDualstackEndpoint??!1,useFipsEndpoint:e.useFipsEndpoint??!1,defaultSigningName:"bedrock"}),o={UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}}}),a("hsif2",function(e,n){t(e.exports,"getRuntimeConfig",()=>v);var o=s("3z5qv");s("3ZYTi");var i=s("frKGf"),a=s("1bxcu");s("69lYW");var u=s("5BNad"),l=s("jatwk");s("3dUT4");var c=s("T3C8s");s("hMLrR");var d=s("XzriQ"),f=s("1vHsZ");s("hlayF");var p=s("9M5Q4");s("hgNDA");var h=s("7pnv0");s("2bh3s");var g=s("aDfsO"),m=s("2QQpp");s("3ThPo");var y=s("j0smT");s("alBKk");var E=s("7nFRI");let v=e=>{let t=(0,E.resolveDefaultsModeConfig)(e),n=()=>t().then(y.loadConfigsForDefaultMode),s=(0,m.getRuntimeConfig)(e);return{...s,...e,runtime:"browser",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??h.calculateBodyLength,credentialDefaultProvider:e?.credentialDefaultProvider??(e=>()=>Promise.reject(Error("Credential is missing"))),defaultUserAgentProvider:e?.defaultUserAgentProvider??(0,a.defaultUserAgent)({serviceId:s.serviceId,clientVersion:r(o).version}),eventStreamSerdeProvider:e?.eventStreamSerdeProvider??c.eventStreamSerdeProvider,maxAttempts:e?.maxAttempts??g.DEFAULT_MAX_ATTEMPTS,region:e?.region??(0,p.invalidProvider)("Region is missing"),requestHandler:(0,d.FetchHttpHandler).create(e?.requestHandler??n),retryMode:e?.retryMode??(async()=>(await n()).retryMode||g.DEFAULT_RETRY_MODE),sha256:e?.sha256??i.Sha256,streamCollector:e?.streamCollector??f.streamCollector,useDualstackEndpoint:e?.useDualstackEndpoint??(()=>Promise.resolve(u.DEFAULT_USE_DUALSTACK_ENDPOINT)),useFipsEndpoint:e?.useFipsEndpoint??(()=>Promise.resolve(l.DEFAULT_USE_FIPS_ENDPOINT))}}}),a("3z5qv",function(e,t){e.exports=JSON.parse('{"name":"@aws-sdk/client-bedrock-runtime","description":"AWS SDK for JavaScript Bedrock Runtime Client for Node.js, Browser and React Native","version":"3.609.0","scripts":{"build":"concurrently \'yarn:build:cjs\' \'yarn:build:es\' \'yarn:build:types\'","build:cjs":"node ../../scripts/compilation/inline client-bedrock-runtime","build:es":"tsc -p tsconfig.es.json","build:include:deps":"lerna run --scope $npm_package_name --include-dependencies build","build:types":"tsc -p tsconfig.types.json","build:types:downlevel":"downlevel-dts dist-types dist-types/ts3.4","clean":"rimraf ./dist-* && rimraf *.tsbuildinfo","extract:docs":"api-extractor run --local","generate:client":"node ../../scripts/generate-clients/single-service --solo bedrock-runtime"},"main":"./dist-cjs/index.js","types":"./dist-types/index.d.ts","module":"./dist-es/index.js","sideEffects":false,"dependencies":{"@aws-crypto/sha256-browser":"5.2.0","@aws-crypto/sha256-js":"5.2.0","@aws-sdk/client-sso-oidc":"3.609.0","@aws-sdk/client-sts":"3.609.0","@aws-sdk/core":"3.609.0","@aws-sdk/credential-provider-node":"3.609.0","@aws-sdk/middleware-host-header":"3.609.0","@aws-sdk/middleware-logger":"3.609.0","@aws-sdk/middleware-recursion-detection":"3.609.0","@aws-sdk/middleware-user-agent":"3.609.0","@aws-sdk/region-config-resolver":"3.609.0","@aws-sdk/types":"3.609.0","@aws-sdk/util-endpoints":"3.609.0","@aws-sdk/util-user-agent-browser":"3.609.0","@aws-sdk/util-user-agent-node":"3.609.0","@smithy/config-resolver":"^3.0.4","@smithy/core":"^2.2.4","@smithy/eventstream-serde-browser":"^3.0.4","@smithy/eventstream-serde-config-resolver":"^3.0.3","@smithy/eventstream-serde-node":"^3.0.4","@smithy/fetch-http-handler":"^3.2.0","@smithy/hash-node":"^3.0.3","@smithy/invalid-dependency":"^3.0.3","@smithy/middleware-content-length":"^3.0.3","@smithy/middleware-endpoint":"^3.0.4","@smithy/middleware-retry":"^3.0.7","@smithy/middleware-serde":"^3.0.3","@smithy/middleware-stack":"^3.0.3","@smithy/node-config-provider":"^3.1.3","@smithy/node-http-handler":"^3.1.1","@smithy/protocol-http":"^4.0.3","@smithy/smithy-client":"^3.1.5","@smithy/types":"^3.3.0","@smithy/url-parser":"^3.0.3","@smithy/util-base64":"^3.0.0","@smithy/util-body-length-browser":"^3.0.0","@smithy/util-body-length-node":"^3.0.0","@smithy/util-defaults-mode-browser":"^3.0.7","@smithy/util-defaults-mode-node":"^3.0.7","@smithy/util-endpoints":"^2.0.4","@smithy/util-middleware":"^3.0.3","@smithy/util-retry":"^3.0.3","@smithy/util-stream":"^3.0.5","@smithy/util-utf8":"^3.0.0","tslib":"^2.6.2"},"devDependencies":{"@tsconfig/node16":"16.1.3","@types/node":"^16.18.96","concurrently":"7.0.0","downlevel-dts":"0.10.1","rimraf":"3.0.2","typescript":"~4.9.5"},"engines":{"node":">=16.0.0"},"typesVersions":{"<4.0":{"dist-types/*":["dist-types/ts3.4/*"]}},"files":["dist-*/**"],"author":{"name":"AWS SDK for JavaScript Team","url":"https://aws.amazon.com/javascript/"},"license":"Apache-2.0","browser":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.browser"},"react-native":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.native"},"homepage":"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-bedrock-runtime","repository":{"type":"git","url":"https://github.com/aws/aws-sdk-js-v3.git","directory":"clients/client-bedrock-runtime"}}')}),a("3ZYTi",function(e,r){t(e.exports,"Sha256",()=>s("frKGf").Sha256),s("frKGf"),s("2gd6O")}),a("frKGf",function(e,r){t(e.exports,"Sha256",()=>l);var n=s("2gd6O");s("eeyNo");var o=s("akjOC");s("3sXdI");var i=s("eOn3u"),a=s("iUsju");s("g7QZY");var u=s("eT2b8"),l=function(){function e(e){(0,i.supportsWebCrypto)((0,a.locateWindow)())?this.hash=new n.Sha256(e):this.hash=new o.Sha256(e)}return e.prototype.update=function(e,t){this.hash.update((0,u.convertToBuffer)(e))},e.prototype.digest=function(){return this.hash.digest()},e.prototype.reset=function(){this.hash.reset()},e}()}),a("2gd6O",function(e,r){t(e.exports,"Sha256",()=>u),s("g7QZY");var n=s("eT2b8"),o=s("gd3Zh"),i=s("h52eo"),a=s("iUsju"),u=function(){function e(e){this.toHash=new Uint8Array(0),this.secret=e,this.reset()}return e.prototype.update=function(e){if(!(0,o.isEmptyData)(e)){var t=(0,n.convertToBuffer)(e),r=new Uint8Array(this.toHash.byteLength+t.byteLength);r.set(this.toHash,0),r.set(t,this.toHash.byteLength),this.toHash=r}},e.prototype.digest=function(){var e=this;return this.key?this.key.then(function(t){return(0,a.locateWindow)().crypto.subtle.sign(i.SHA_256_HMAC_ALGO,t,e.toHash).then(function(e){return new Uint8Array(e)})}):(0,o.isEmptyData)(this.toHash)?Promise.resolve(i.EMPTY_DATA_SHA_256):Promise.resolve().then(function(){return(0,a.locateWindow)().crypto.subtle.digest(i.SHA_256_HASH,e.toHash)}).then(function(e){return Promise.resolve(new Uint8Array(e))})},e.prototype.reset=function(){var e=this;this.toHash=new Uint8Array(0),this.secret&&void 0!==this.secret&&(this.key=new Promise(function(t,r){(0,a.locateWindow)().crypto.subtle.importKey("raw",(0,n.convertToBuffer)(e.secret),i.SHA_256_HMAC_ALGO,!1,["sign"]).then(t,r)}),this.key.catch(function(){}))},e}()}),a("g7QZY",function(e,r){t(e.exports,"convertToBuffer",()=>s("eT2b8").convertToBuffer),t(e.exports,"isEmptyData",()=>s("gd3Zh").isEmptyData),t(e.exports,"numToUint8",()=>s("gMvbo").numToUint8),t(e.exports,"uint32ArrayFrom",()=>s("ac6Ma").uint32ArrayFrom),s("eT2b8"),s("gd3Zh"),s("gMvbo"),s("ac6Ma")}),a("eT2b8",function(e,r){t(e.exports,"convertToBuffer",()=>a),s("5QhGy");var n=s("auqlD"),o=s("f7S6j").Buffer,i=void 0!==o&&o.from?function(e){return o.from(e,"utf8")}:n.fromUtf8;function a(e){return e instanceof Uint8Array?e:"string"==typeof e?i(e):ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e)}}),a("5QhGy",function(e,r){t(e.exports,"fromUtf8",()=>s("auqlD").fromUtf8),s("auqlD"),s("4oLvo"),s("5piIW")}),a("auqlD",function(e,r){t(e.exports,"fromUtf8",()=>n);let n=e=>new TextEncoder().encode(e)}),a("4oLvo",function(e,t){s("auqlD")}),a("5piIW",function(e,t){}),a("f7S6j",function(e,r){t(e.exports,"Buffer",()=>n,e=>n=e),t(e.exports,"INSPECT_MAX_BYTES",()=>o,e=>o=e);var n,o,i=s("2M2tW"),a=s("30rRS");let u="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;function l(e){if(e>2147483647)throw RangeError('The value "'+e+'" is invalid for option "size"');let t=new Uint8Array(e);return Object.setPrototypeOf(t,c.prototype),t}function c(e,t,r){if("number"==typeof e){if("string"==typeof t)throw TypeError('The "string" argument must be of type string. Received type number');return p(e)}return d(e,t,r)}function d(e,t,r){if("string"==typeof e)return function(e,t){if(("string"!=typeof t||""===t)&&(t="utf8"),!c.isEncoding(t))throw TypeError("Unknown encoding: "+t);let r=0|y(e,t),n=l(r),o=n.write(e,t);return o!==r&&(n=n.slice(0,o)),n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(F(e,Uint8Array)){let t=new Uint8Array(e);return g(t.buffer,t.byteOffset,t.byteLength)}return h(e)}(e);if(null==e)throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(F(e,ArrayBuffer)||e&&F(e.buffer,ArrayBuffer)||"undefined"!=typeof SharedArrayBuffer&&(F(e,SharedArrayBuffer)||e&&F(e.buffer,SharedArrayBuffer)))return g(e,t,r);if("number"==typeof e)throw TypeError('The "value" argument must not be of type number. Received type number');let n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return c.from(n,t,r);let o=function(e){var t;if(c.isBuffer(e)){let t=0|m(e.length),r=l(t);return 0===r.length||e.copy(r,0,0,t),r}return void 0!==e.length?"number"!=typeof e.length||(t=e.length)!=t?l(0):h(e):"Buffer"===e.type&&Array.isArray(e.data)?h(e.data):void 0}(e);if(o)return o;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return c.from(e[Symbol.toPrimitive]("string"),t,r);throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function f(e){if("number"!=typeof e)throw TypeError('"size" argument must be of type number');if(e<0)throw RangeError('The value "'+e+'" is invalid for option "size"')}function p(e){return f(e),l(e<0?0:0|m(e))}function h(e){let t=e.length<0?0:0|m(e.length),r=l(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function g(e,t,r){let n;if(t<0||e.byteLength<t)throw RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw RangeError('"length" is outside of buffer bounds');return Object.setPrototypeOf(n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),c.prototype),n}function m(e){if(e>=2147483647)throw RangeError("Attempt to allocate Buffer larger than maximum size: 0x7fffffff bytes");return 0|e}function y(e,t){if(c.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||F(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);let r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let o=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return D(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return L(e).length;default:if(o)return n?-1:D(e).length;t=(""+t).toLowerCase(),o=!0}}function E(e,t,r){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length||((void 0===r||r>this.length)&&(r=this.length),r<=0||(r>>>=0)<=(t>>>=0)))return"";for(e||(e="utf8");;)switch(e){case"hex":return function(e,t,r){let n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let o="";for(let n=t;n<r;++n)o+=j[e[n]];return o}(this,t,r);case"utf8":case"utf-8":return x(this,t,r);case"ascii":return function(e,t,r){let n="";r=Math.min(e.length,r);for(let o=t;o<r;++o)n+=String.fromCharCode(127&e[o]);return n}(this,t,r);case"latin1":case"binary":return function(e,t,r){let n="";r=Math.min(e.length,r);for(let o=t;o<r;++o)n+=String.fromCharCode(e[o]);return n}(this,t,r);case"base64":var o,s;return o=t,s=r,0===o&&s===this.length?i.fromByteArray(this):i.fromByteArray(this.slice(o,s));case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return function(e,t,r){let n=e.slice(t,r),o="";for(let e=0;e<n.length-1;e+=2)o+=String.fromCharCode(n[e]+256*n[e+1]);return o}(this,t,r);default:if(n)throw TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function v(e,t,r){let n=e[t];e[t]=e[r],e[r]=n}function S(e,t,r,n,o){var i;if(0===e.length)return -1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),(i=r=+r)!=i&&(r=o?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(o)return -1;r=e.length-1}else if(r<0){if(!o)return -1;r=0}if("string"==typeof t&&(t=c.from(t,n)),c.isBuffer(t))return 0===t.length?-1:b(e,t,r,n,o);if("number"==typeof t)return(t&=255,"function"==typeof Uint8Array.prototype.indexOf)?o?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):b(e,[t],r,n,o);throw TypeError("val must be string, number or Buffer")}function b(e,t,r,n,o){let i,s=1,a=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return -1;s=2,a/=2,u/=2,r/=2}function l(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(o){let n=-1;for(i=r;i<a;i++)if(l(e,i)===l(t,-1===n?0:i-n)){if(-1===n&&(n=i),i-n+1===u)return n*s}else -1!==n&&(i-=i-n),n=-1}else for(r+u>a&&(r=a-u),i=r;i>=0;i--){let r=!0;for(let n=0;n<u;n++)if(l(e,i+n)!==l(t,n)){r=!1;break}if(r)return i}return -1}function x(e,t,r){r=Math.min(e.length,r);let n=[],o=t;for(;o<r;){let t=e[o],i=null,s=t>239?4:t>223?3:t>191?2:1;if(o+s<=r){let r,n,a,u;switch(s){case 1:t<128&&(i=t);break;case 2:(192&(r=e[o+1]))==128&&(u=(31&t)<<6|63&r)>127&&(i=u);break;case 3:r=e[o+1],n=e[o+2],(192&r)==128&&(192&n)==128&&(u=(15&t)<<12|(63&r)<<6|63&n)>2047&&(u<55296||u>57343)&&(i=u);break;case 4:r=e[o+1],n=e[o+2],a=e[o+3],(192&r)==128&&(192&n)==128&&(192&a)==128&&(u=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&a)>65535&&u<1114112&&(i=u)}}null===i?(i=65533,s=1):i>65535&&(i-=65536,n.push(i>>>10&1023|55296),i=56320|1023&i),n.push(i),o+=s}return function(e){let t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);let r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=4096));return r}(n)}function w(e,t,r){if(e%1!=0||e<0)throw RangeError("offset is not uint");if(e+t>r)throw RangeError("Trying to access beyond buffer length")}function R(e,t,r,n,o,i){if(!c.isBuffer(e))throw TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw RangeError('"value" argument is out of bounds');if(r+n>e.length)throw RangeError("Index out of range")}function A(e,t,r,n,o){O(t,n,o,e,r,7);let i=Number(t&BigInt(4294967295));e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i,i>>=8,e[r++]=i;let s=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,r}function T(e,t,r,n,o){O(t,n,o,e,r,7);let i=Number(t&BigInt(4294967295));e[r+7]=i,i>>=8,e[r+6]=i,i>>=8,e[r+5]=i,i>>=8,e[r+4]=i;let s=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=s,s>>=8,e[r+2]=s,s>>=8,e[r+1]=s,s>>=8,e[r]=s,r+8}function _(e,t,r,n,o,i){if(r+n>e.length||r<0)throw RangeError("Index out of range")}function C(e,t,r,n,o){return t=+t,r>>>=0,o||_(e,t,r,4,34028234663852886e22,-34028234663852886e22),a.write(e,t,r,n,23,4),r+4}function I(e,t,r,n,o){return t=+t,r>>>=0,o||_(e,t,r,8,17976931348623157e292,-17976931348623157e292),a.write(e,t,r,n,52,8),r+8}n=c,o=50,c.TYPED_ARRAY_SUPPORT=function(){try{let e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),c.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(c.prototype,"parent",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.buffer}}),Object.defineProperty(c.prototype,"offset",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.byteOffset}}),c.poolSize=8192,c.from=function(e,t,r){return d(e,t,r)},Object.setPrototypeOf(c.prototype,Uint8Array.prototype),Object.setPrototypeOf(c,Uint8Array),c.alloc=function(e,t,r){return(f(e),e<=0)?l(e):void 0!==t?"string"==typeof r?l(e).fill(t,r):l(e).fill(t):l(e)},c.allocUnsafe=function(e){return p(e)},c.allocUnsafeSlow=function(e){return p(e)},c.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==c.prototype},c.compare=function(e,t){if(F(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),F(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),!c.isBuffer(e)||!c.isBuffer(t))throw TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let o=0,i=Math.min(r,n);o<i;++o)if(e[o]!==t[o]){r=e[o],n=t[o];break}return r<n?-1:n<r?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){let r;if(!Array.isArray(e))throw TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);if(void 0===t)for(r=0,t=0;r<e.length;++r)t+=e[r].length;let n=c.allocUnsafe(t),o=0;for(r=0;r<e.length;++r){let t=e[r];if(F(t,Uint8Array))o+t.length>n.length?(c.isBuffer(t)||(t=c.from(t)),t.copy(n,o)):Uint8Array.prototype.set.call(n,t,o);else if(c.isBuffer(t))t.copy(n,o);else throw TypeError('"list" argument must be an Array of Buffers');o+=t.length}return n},c.byteLength=y,c.prototype._isBuffer=!0,c.prototype.swap16=function(){let e=this.length;if(e%2!=0)throw RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)v(this,t,t+1);return this},c.prototype.swap32=function(){let e=this.length;if(e%4!=0)throw RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)v(this,t,t+3),v(this,t+1,t+2);return this},c.prototype.swap64=function(){let e=this.length;if(e%8!=0)throw RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)v(this,t,t+7),v(this,t+1,t+6),v(this,t+2,t+5),v(this,t+3,t+4);return this},c.prototype.toString=function(){let e=this.length;return 0===e?"":0==arguments.length?x(this,0,e):E.apply(this,arguments)},c.prototype.toLocaleString=c.prototype.toString,c.prototype.equals=function(e){if(!c.isBuffer(e))throw TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){let e="",t=o;return e=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim(),this.length>t&&(e+=" ... "),"<Buffer "+e+">"},u&&(c.prototype[u]=c.prototype.inspect),c.prototype.compare=function(e,t,r,n,o){if(F(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),!c.isBuffer(e))throw TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===o&&(o=this.length),t<0||r>e.length||n<0||o>this.length)throw RangeError("out of range index");if(n>=o&&t>=r)return 0;if(n>=o)return -1;if(t>=r)return 1;if(t>>>=0,r>>>=0,n>>>=0,o>>>=0,this===e)return 0;let i=o-n,s=r-t,a=Math.min(i,s),u=this.slice(n,o),l=e.slice(t,r);for(let e=0;e<a;++e)if(u[e]!==l[e]){i=u[e],s=l[e];break}return i<s?-1:s<i?1:0},c.prototype.includes=function(e,t,r){return -1!==this.indexOf(e,t,r)},c.prototype.indexOf=function(e,t,r){return S(this,e,t,r,!0)},c.prototype.lastIndexOf=function(e,t,r){return S(this,e,t,r,!1)},c.prototype.write=function(e,t,r,n){var o,i,s,a,u,l,c,d;if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else if(isFinite(t))t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0);else throw Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");let f=this.length-t;if((void 0===r||r>f)&&(r=f),e.length>0&&(r<0||t<0)||t>this.length)throw RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let p=!1;for(;;)switch(n){case"hex":return function(e,t,r,n){let o;r=Number(r)||0;let i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;let s=t.length;for(n>s/2&&(n=s/2),o=0;o<n;++o){let n=parseInt(t.substr(2*o,2),16);if(n!=n)break;e[r+o]=n}return o}(this,e,t,r);case"utf8":case"utf-8":return o=t,i=r,H(D(e,this.length-o),this,o,i);case"ascii":case"latin1":case"binary":return s=t,a=r,H(function(e){let t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(e),this,s,a);case"base64":return u=t,l=r,H(L(e),this,u,l);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return c=t,d=r,H(function(e,t){let r,n;let o=[];for(let i=0;i<e.length&&!((t-=2)<0);++i)n=(r=e.charCodeAt(i))>>8,o.push(r%256),o.push(n);return o}(e,this.length-c),this,c,d);default:if(p)throw TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),p=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}},c.prototype.slice=function(e,t){let r=this.length;e=~~e,t=void 0===t?r:~~t,e<0?(e+=r)<0&&(e=0):e>r&&(e=r),t<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);let n=this.subarray(e,t);return Object.setPrototypeOf(n,c.prototype),n},c.prototype.readUintLE=c.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||w(e,t,this.length);let n=this[e],o=1,i=0;for(;++i<t&&(o*=256);)n+=this[e+i]*o;return n},c.prototype.readUintBE=c.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||w(e,t,this.length);let n=this[e+--t],o=1;for(;t>0&&(o*=256);)n+=this[e+--t]*o;return n},c.prototype.readUint8=c.prototype.readUInt8=function(e,t){return e>>>=0,t||w(e,1,this.length),this[e]},c.prototype.readUint16LE=c.prototype.readUInt16LE=function(e,t){return e>>>=0,t||w(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUint16BE=c.prototype.readUInt16BE=function(e,t){return e>>>=0,t||w(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUint32LE=c.prototype.readUInt32LE=function(e,t){return e>>>=0,t||w(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUint32BE=c.prototype.readUInt32BE=function(e,t){return e>>>=0,t||w(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readBigUInt64LE=$(function(e){U(e>>>=0,"offset");let t=this[e],r=this[e+7];(void 0===t||void 0===r)&&N(e,this.length-8);let n=t+256*this[++e]+65536*this[++e]+16777216*this[++e],o=this[++e]+256*this[++e]+65536*this[++e]+16777216*r;return BigInt(n)+(BigInt(o)<<BigInt(32))}),c.prototype.readBigUInt64BE=$(function(e){U(e>>>=0,"offset");let t=this[e],r=this[e+7];(void 0===t||void 0===r)&&N(e,this.length-8);let n=16777216*t+65536*this[++e]+256*this[++e]+this[++e],o=16777216*this[++e]+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(o)}),c.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||w(e,t,this.length);let n=this[e],o=1,i=0;for(;++i<t&&(o*=256);)n+=this[e+i]*o;return n>=(o*=128)&&(n-=Math.pow(2,8*t)),n},c.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||w(e,t,this.length);let n=t,o=1,i=this[e+--n];for(;n>0&&(o*=256);)i+=this[e+--n]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},c.prototype.readInt8=function(e,t){return(e>>>=0,t||w(e,1,this.length),128&this[e])?-((255-this[e]+1)*1):this[e]},c.prototype.readInt16LE=function(e,t){e>>>=0,t||w(e,2,this.length);let r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt16BE=function(e,t){e>>>=0,t||w(e,2,this.length);let r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt32LE=function(e,t){return e>>>=0,t||w(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return e>>>=0,t||w(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readBigInt64LE=$(function(e){U(e>>>=0,"offset");let t=this[e],r=this[e+7];return(void 0===t||void 0===r)&&N(e,this.length-8),(BigInt(this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24))<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+16777216*this[++e])}),c.prototype.readBigInt64BE=$(function(e){U(e>>>=0,"offset");let t=this[e],r=this[e+7];return(void 0===t||void 0===r)&&N(e,this.length-8),(BigInt((t<<24)+65536*this[++e]+256*this[++e]+this[++e])<<BigInt(32))+BigInt(16777216*this[++e]+65536*this[++e]+256*this[++e]+r)}),c.prototype.readFloatLE=function(e,t){return e>>>=0,t||w(e,4,this.length),a.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return e>>>=0,t||w(e,4,this.length),a.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return e>>>=0,t||w(e,8,this.length),a.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return e>>>=0,t||w(e,8,this.length),a.read(this,e,!1,52,8)},c.prototype.writeUintLE=c.prototype.writeUIntLE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){let n=Math.pow(2,8*r)-1;R(this,e,t,r,n,0)}let o=1,i=0;for(this[t]=255&e;++i<r&&(o*=256);)this[t+i]=e/o&255;return t+r},c.prototype.writeUintBE=c.prototype.writeUIntBE=function(e,t,r,n){if(e=+e,t>>>=0,r>>>=0,!n){let n=Math.pow(2,8*r)-1;R(this,e,t,r,n,0)}let o=r-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+r},c.prototype.writeUint8=c.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||R(this,e,t,1,255,0),this[t]=255&e,t+1},c.prototype.writeUint16LE=c.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||R(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeUint16BE=c.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||R(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeUint32LE=c.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||R(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},c.prototype.writeUint32BE=c.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||R(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeBigUInt64LE=$(function(e,t=0){return A(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))}),c.prototype.writeBigUInt64BE=$(function(e,t=0){return T(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))}),c.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){let n=Math.pow(2,8*r-1);R(this,e,t,r,n-1,-n)}let o=0,i=1,s=0;for(this[t]=255&e;++o<r&&(i*=256);)e<0&&0===s&&0!==this[t+o-1]&&(s=1),this[t+o]=(e/i>>0)-s&255;return t+r},c.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){let n=Math.pow(2,8*r-1);R(this,e,t,r,n-1,-n)}let o=r-1,i=1,s=0;for(this[t+o]=255&e;--o>=0&&(i*=256);)e<0&&0===s&&0!==this[t+o+1]&&(s=1),this[t+o]=(e/i>>0)-s&255;return t+r},c.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||R(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||R(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||R(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||R(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},c.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||R(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeBigInt64LE=$(function(e,t=0){return A(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),c.prototype.writeBigInt64BE=$(function(e,t=0){return T(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))}),c.prototype.writeFloatLE=function(e,t,r){return C(this,e,t,!0,r)},c.prototype.writeFloatBE=function(e,t,r){return C(this,e,t,!1,r)},c.prototype.writeDoubleLE=function(e,t,r){return I(this,e,t,!0,r)},c.prototype.writeDoubleBE=function(e,t,r){return I(this,e,t,!1,r)},c.prototype.copy=function(e,t,r,n){if(!c.isBuffer(e))throw TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r||0===e.length||0===this.length)return 0;if(t<0)throw RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw RangeError("Index out of range");if(n<0)throw RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);let o=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),o},c.prototype.fill=function(e,t,r,n){let o;if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw TypeError("Unknown encoding: "+n);if(1===e.length){let t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw RangeError("Out of range index");if(r<=t)return this;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(o=t;o<r;++o)this[o]=e;else{let i=c.isBuffer(e)?e:c.from(e,n),s=i.length;if(0===s)throw TypeError('The value "'+e+'" is invalid for argument "value"');for(o=0;o<r-t;++o)this[o+t]=i[o%s]}return this};let k={};function M(e,t,r){k[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function P(e){let t="",r=e.length,n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function O(e,t,r,n,o,i){if(e>r||e<t){let n;let o="bigint"==typeof t?"n":"";throw n=i>3?0===t||t===BigInt(0)?`>= 0${o} and < 2${o} ** ${(i+1)*8}${o}`:`>= -(2${o} ** ${(i+1)*8-1}${o}) and < 2 ** ${(i+1)*8-1}${o}`:`>= ${t}${o} and <= ${r}${o}`,new k.ERR_OUT_OF_RANGE("value",n,e)}U(o,"offset"),(void 0===n[o]||void 0===n[o+i])&&N(o,n.length-(i+1))}function U(e,t){if("number"!=typeof e)throw new k.ERR_INVALID_ARG_TYPE(t,"number",e)}function N(e,t,r){if(Math.floor(e)!==e)throw U(e,r),new k.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new k.ERR_BUFFER_OUT_OF_BOUNDS;throw new k.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}M("ERR_BUFFER_OUT_OF_BOUNDS",function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"},RangeError),M("ERR_INVALID_ARG_TYPE",function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`},TypeError),M("ERR_OUT_OF_RANGE",function(e,t,r){let n=`The value of "${e}" is out of range.`,o=r;return Number.isInteger(r)&&Math.abs(r)>4294967296?o=P(String(r)):"bigint"==typeof r&&(o=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(o=P(o)),o+="n"),n+=` It must be ${t}. Received ${o}`},RangeError);let B=/[^+/0-9A-Za-z-_]/g;function D(e,t){let r;t=t||1/0;let n=e.length,o=null,i=[];for(let s=0;s<n;++s){if((r=e.charCodeAt(s))>55295&&r<57344){if(!o){if(r>56319||s+1===n){(t-=3)>-1&&i.push(239,191,189);continue}o=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),o=r;continue}r=(o-55296<<10|r-56320)+65536}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else if(r<1114112){if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}else throw Error("Invalid code point")}return i}function L(e){return i.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(B,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function H(e,t,r,n){let o;for(o=0;o<n&&!(o+r>=t.length)&&!(o>=e.length);++o)t[o+r]=e[o];return o}function F(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}let j=function(){let e="0123456789abcdef",t=Array(256);for(let r=0;r<16;++r){let n=16*r;for(let o=0;o<16;++o)t[n+o]=e[r]+e[o]}return t}();function $(e){return"undefined"==typeof BigInt?q:e}function q(){throw Error("BigInt not supported")}}),a("2M2tW",function(e,r){t(e.exports,"toByteArray",()=>n,e=>n=e),t(e.exports,"fromByteArray",()=>o,e=>o=e),n=function(e){var t,r,n=function(e){var t=e.length;if(t%4>0)throw Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");-1===r&&(r=t);var n=r===t?0:4-r%4;return[r,n]}(e),o=n[0],i=n[1],u=new a((o+i)*3/4-i),l=0,c=i>0?o-4:o;for(r=0;r<c;r+=4)t=s[e.charCodeAt(r)]<<18|s[e.charCodeAt(r+1)]<<12|s[e.charCodeAt(r+2)]<<6|s[e.charCodeAt(r+3)],u[l++]=t>>16&255,u[l++]=t>>8&255,u[l++]=255&t;return 2===i&&(t=s[e.charCodeAt(r)]<<2|s[e.charCodeAt(r+1)]>>4,u[l++]=255&t),1===i&&(t=s[e.charCodeAt(r)]<<10|s[e.charCodeAt(r+1)]<<4|s[e.charCodeAt(r+2)]>>2,u[l++]=t>>8&255,u[l++]=255&t),u},o=function(e){for(var t,r=e.length,n=r%3,o=[],s=0,a=r-n;s<a;s+=16383)o.push(function(e,t,r){for(var n,o=[],s=t;s<r;s+=3)o.push(i[(n=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]))>>18&63]+i[n>>12&63]+i[n>>6&63]+i[63&n]);return o.join("")}(e,s,s+16383>a?a:s+16383));return 1===n?o.push(i[(t=e[r-1])>>2]+i[t<<4&63]+"=="):2===n&&o.push(i[(t=(e[r-2]<<8)+e[r-1])>>10]+i[t>>4&63]+i[t<<2&63]+"="),o.join("")};for(var n,o,i=[],s=[],a="undefined"!=typeof Uint8Array?Uint8Array:Array,u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",l=0,c=u.length;l<c;++l)i[l]=u[l],s[u.charCodeAt(l)]=l;s["-".charCodeAt(0)]=62,s["_".charCodeAt(0)]=63}),a("30rRS",function(e,r){var n,o;t(e.exports,"read",()=>n,e=>n=e),t(e.exports,"write",()=>o,e=>o=e),n=function(e,t,r,n,o){var i,s,a=8*o-n-1,u=(1<<a)-1,l=u>>1,c=-7,d=r?o-1:0,f=r?-1:1,p=e[t+d];for(d+=f,i=p&(1<<-c)-1,p>>=-c,c+=a;c>0;i=256*i+e[t+d],d+=f,c-=8);for(s=i&(1<<-c)-1,i>>=-c,c+=n;c>0;s=256*s+e[t+d],d+=f,c-=8);if(0===i)i=1-l;else{if(i===u)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,n),i-=l}return(p?-1:1)*s*Math.pow(2,i-n)},o=function(e,t,r,n,o,i){var s,a,u,l=8*i-o-1,c=(1<<l)-1,d=c>>1,f=23===o?5960464477539062e-23:0,p=n?0:i-1,h=n?1:-1,g=t<0||0===t&&1/t<0?1:0;for(isNaN(t=Math.abs(t))||t===1/0?(a=isNaN(t)?1:0,s=c):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),s+d>=1?t+=f/u:t+=f*Math.pow(2,1-d),t*u>=2&&(s++,u/=2),s+d>=c?(a=0,s=c):s+d>=1?(a=(t*u-1)*Math.pow(2,o),s+=d):(a=t*Math.pow(2,d-1)*Math.pow(2,o),s=0));o>=8;e[r+p]=255&a,p+=h,a/=256,o-=8);for(s=s<<o|a,l+=o;l>0;e[r+p]=255&s,p+=h,s/=256,l-=8);e[r+p-h]|=128*g}}),a("gd3Zh",function(e,r){t(e.exports,"isEmptyData",()=>n);function n(e){return"string"==typeof e?0===e.length:0===e.byteLength}}),a("gMvbo",function(e,r){t(e.exports,"numToUint8",()=>n);function n(e){return new Uint8Array([(4278190080&e)>>24,(16711680&e)>>16,(65280&e)>>8,255&e])}}),a("ac6Ma",function(e,r){t(e.exports,"uint32ArrayFrom",()=>n);function n(e){if(!Uint32Array.from){for(var t=new Uint32Array(e.length),r=0;r<e.length;)t[r]=e[r],r+=1;return t}return Uint32Array.from(e)}}),a("h52eo",function(e,r){t(e.exports,"SHA_256_HASH",()=>n),t(e.exports,"SHA_256_HMAC_ALGO",()=>o),t(e.exports,"EMPTY_DATA_SHA_256",()=>i);var n={name:"SHA-256"},o={name:"HMAC",hash:n},i=new Uint8Array([227,176,196,66,152,252,28,20,154,251,244,200,153,111,185,36,39,174,65,228,100,155,147,76,164,149,153,27,120,82,184,85])}),a("iUsju",function(e,r){t(e.exports,"locateWindow",()=>o);let n={};function o(){return"undefined"!=typeof window?window:"undefined"!=typeof self?self:n}}),a("eeyNo",function(e,r){t(e.exports,"Sha256",()=>s("akjOC").Sha256),s("akjOC")}),a("akjOC",function(e,r){t(e.exports,"Sha256",()=>l);var n=s("f3LKA"),o=s("h6mNX"),i=s("c1F48");s("g7QZY");var a=s("eT2b8"),u=s("gd3Zh"),l=function(){function e(e){this.secret=e,this.hash=new i.RawSha256,this.reset()}return e.prototype.update=function(e){if(!(0,u.isEmptyData)(e)&&!this.error)try{this.hash.update((0,a.convertToBuffer)(e))}catch(e){this.error=e}},e.prototype.digestSync=function(){if(this.error)throw this.error;return this.outer?(this.outer.finished||this.outer.update(this.hash.digest()),this.outer.digest()):this.hash.digest()},e.prototype.digest=function(){return(0,n.__awaiter)(this,void 0,void 0,function(){return(0,n.__generator)(this,function(e){return[2,this.digestSync()]})})},e.prototype.reset=function(){if(this.hash=new i.RawSha256,this.secret){this.outer=new i.RawSha256;var e=function(e){var t=(0,a.convertToBuffer)(e);if(t.byteLength>o.BLOCK_SIZE){var r=new i.RawSha256;r.update(t),t=r.digest()}var n=new Uint8Array(o.BLOCK_SIZE);return n.set(t),n}(this.secret),t=new Uint8Array(o.BLOCK_SIZE);t.set(e);for(var r=0;r<o.BLOCK_SIZE;r++)e[r]^=54,t[r]^=92;this.hash.update(e),this.outer.update(t);for(var r=0;r<e.byteLength;r++)e[r]=0}},e}()}),a("f3LKA",function(e,r){function n(e,t,r,n){return new(r||(r=Promise))(function(o,i){function s(e){try{u(n.next(e))}catch(e){i(e)}}function a(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):((t=e.value)instanceof r?t:new r(function(e){e(t)})).then(s,a)}u((n=n.apply(e,t||[])).next())})}function o(e,t){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(u){return function(a){if(r)throw TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(s=0)),s;)try{if(r=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===a[0]||2===a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],n=0}finally{r=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}}function i(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}t(e.exports,"__awaiter",()=>n),t(e.exports,"__generator",()=>o),t(e.exports,"__values",()=>i),"function"==typeof SuppressedError&&SuppressedError}),a("h6mNX",function(e,r){t(e.exports,"BLOCK_SIZE",()=>n),t(e.exports,"DIGEST_LENGTH",()=>o),t(e.exports,"KEY",()=>i),t(e.exports,"INIT",()=>s),t(e.exports,"MAX_HASHABLE_LENGTH",()=>a);var n=64,o=32,i=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),s=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],a=9007199254740991}),a("c1F48",function(e,r){t(e.exports,"RawSha256",()=>o);var n=s("h6mNX"),o=function(){function e(){this.state=Int32Array.from(n.INIT),this.temp=new Int32Array(64),this.buffer=new Uint8Array(64),this.bufferLength=0,this.bytesHashed=0,this.finished=!1}return e.prototype.update=function(e){if(this.finished)throw Error("Attempted to update an already finished hash.");var t=0,r=e.byteLength;if(this.bytesHashed+=r,8*this.bytesHashed>n.MAX_HASHABLE_LENGTH)throw Error("Cannot hash more than 2^53 - 1 bits");for(;r>0;)this.buffer[this.bufferLength++]=e[t++],r--,this.bufferLength===n.BLOCK_SIZE&&(this.hashBuffer(),this.bufferLength=0)},e.prototype.digest=function(){if(!this.finished){var e=8*this.bytesHashed,t=new DataView(this.buffer.buffer,this.buffer.byteOffset,this.buffer.byteLength),r=this.bufferLength;if(t.setUint8(this.bufferLength++,128),r%n.BLOCK_SIZE>=n.BLOCK_SIZE-8){for(var o=this.bufferLength;o<n.BLOCK_SIZE;o++)t.setUint8(o,0);this.hashBuffer(),this.bufferLength=0}for(var o=this.bufferLength;o<n.BLOCK_SIZE-8;o++)t.setUint8(o,0);t.setUint32(n.BLOCK_SIZE-8,Math.floor(e/4294967296),!0),t.setUint32(n.BLOCK_SIZE-4,e),this.hashBuffer(),this.finished=!0}for(var i=new Uint8Array(n.DIGEST_LENGTH),o=0;o<8;o++)i[4*o]=this.state[o]>>>24&255,i[4*o+1]=this.state[o]>>>16&255,i[4*o+2]=this.state[o]>>>8&255,i[4*o+3]=this.state[o]>>>0&255;return i},e.prototype.hashBuffer=function(){for(var e=this.buffer,t=this.state,r=t[0],o=t[1],i=t[2],s=t[3],a=t[4],u=t[5],l=t[6],c=t[7],d=0;d<n.BLOCK_SIZE;d++){if(d<16)this.temp[d]=(255&e[4*d])<<24|(255&e[4*d+1])<<16|(255&e[4*d+2])<<8|255&e[4*d+3];else{var f=this.temp[d-2],p=(f>>>17|f<<15)^(f>>>19|f<<13)^f>>>10,h=((f=this.temp[d-15])>>>7|f<<25)^(f>>>18|f<<14)^f>>>3;this.temp[d]=(p+this.temp[d-7]|0)+(h+this.temp[d-16]|0)}var g=(((a>>>6|a<<26)^(a>>>11|a<<21)^(a>>>25|a<<7))+(a&u^~a&l)|0)+(c+(n.KEY[d]+this.temp[d]|0)|0)|0,m=((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+(r&o^r&i^o&i)|0;c=l,l=u,u=a,a=s+g|0,s=i,i=o,o=r,r=g+m|0}t[0]+=r,t[1]+=o,t[2]+=i,t[3]+=s,t[4]+=a,t[5]+=u,t[6]+=l,t[7]+=c},e}()}),a("3sXdI",function(e,r){t(e.exports,"supportsWebCrypto",()=>s("eOn3u").supportsWebCrypto),s("eOn3u")}),a("eOn3u",function(e,r){t(e.exports,"supportsWebCrypto",()=>o),s("f3LKA");var n=["decrypt","digest","encrypt","exportKey","generateKey","importKey","sign","verify"];function o(e){var t;return!!("object"==typeof e&&"object"==typeof e.crypto&&"function"==typeof e.crypto.getRandomValues)&&"object"==typeof e.crypto.subtle&&(t=e.crypto.subtle)&&n.every(function(e){return"function"==typeof t[e]})}}),a("1bxcu",function(e,n){t(e.exports,"defaultUserAgent",()=>i);var o=s("bpzwj");let i=({serviceId:e,clientVersion:t})=>async()=>{let n="undefined"!=typeof window&&window?.navigator?.userAgent?r(o).parse(window.navigator.userAgent):void 0,i=[["aws-sdk-js",t],["ua","2.0"],[`os/${n?.os?.name||"other"}`,n?.os?.version],["lang/js"],["md/browser",`${n?.browser?.name??"unknown"}_${n?.browser?.version??"unknown"}`]];return e&&i.push([`api/${e}`,t]),i}}),a("bpzwj",function(e,t){var r;e.exports,r=function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t||4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,(function(t){return e[t]}).bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=90)}({17:function(e,t,r){t.__esModule=!0,t.default=void 0;var n=r(18),o=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||""},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||""},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case"NT":return"NT";case"XP":case"NT 5.1":return"XP";case"NT 5.0":return"2000";case"NT 5.2":return"2003";case"NT 6.0":return"Vista";case"NT 6.1":return"7";case"NT 6.2":return"8";case"NT 6.3":return"8.1";case"NT 10.0":return"10";default:return}},e.getMacOSVersionName=function(e){var t=e.split(".").splice(0,2).map(function(e){return parseInt(e,10)||0});if(t.push(0),10===t[0])switch(t[1]){case 5:return"Leopard";case 6:return"Snow Leopard";case 7:return"Lion";case 8:return"Mountain Lion";case 9:return"Mavericks";case 10:return"Yosemite";case 11:return"El Capitan";case 12:return"Sierra";case 13:return"High Sierra";case 14:return"Mojave";case 15:return"Catalina";default:return}},e.getAndroidVersionName=function(e){var t=e.split(".").splice(0,2).map(function(e){return parseInt(e,10)||0});if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?"Cupcake":1===t[0]&&t[1]>=6?"Donut":2===t[0]&&t[1]<2?"Eclair":2===t[0]&&2===t[1]?"Froyo":2===t[0]&&t[1]>2?"Gingerbread":3===t[0]?"Honeycomb":4===t[0]&&t[1]<1?"Ice Cream Sandwich":4===t[0]&&t[1]<4?"Jelly Bean":4===t[0]&&t[1]>=4?"KitKat":5===t[0]?"Lollipop":6===t[0]?"Marshmallow":7===t[0]?"Nougat":8===t[0]?"Oreo":9===t[0]?"Pie":void 0},e.getVersionPrecision=function(e){return e.split(".").length},e.compareVersions=function(t,r,n){void 0===n&&(n=!1);var o=e.getVersionPrecision(t),i=e.getVersionPrecision(r),s=Math.max(o,i),a=0,u=e.map([t,r],function(t){var r=s-e.getVersionPrecision(t),n=t+Array(r+1).join(".0");return e.map(n.split("."),function(e){return Array(20-e.length).join("0")+e}).reverse()});for(n&&(a=s-Math.min(o,i)),s-=1;s>=a;){if(u[0][s]>u[1][s])return 1;if(u[0][s]===u[1][s]){if(s===a)return 0;s-=1}else if(u[0][s]<u[1][s])return -1}},e.map=function(e,t){var r,n=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n},e.find=function(e,t){var r,n;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(r=0,n=e.length;r<n;r+=1){var o=e[r];if(t(o,r))return o}},e.assign=function(e){for(var t,r,n=arguments.length,o=Array(n>1?n-1:0),i=1;i<n;i++)o[i-1]=arguments[i];if(Object.assign)return Object.assign.apply(Object,[e].concat(o));for(t=0,r=o.length;t<r;t+=1)(function(){var r=o[t];"object"==typeof r&&null!==r&&Object.keys(r).forEach(function(t){e[t]=r[t]})})();return e},e.getBrowserAlias=function(e){return n.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return n.BROWSER_MAP[e]||""},e}();t.default=o,e.exports=t.default},18:function(e,t,r){t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0,t.BROWSER_ALIASES_MAP={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"},t.BROWSER_MAP={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"},t.PLATFORMS_MAP={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"},t.OS_MAP={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"},t.ENGINE_MAP={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"}},90:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,o=(n=r(91))&&n.__esModule?n:{default:n},i=r(18),s=function(){function e(){}return e.getParser=function(e,t){if(void 0===t&&(t=!1),"string"!=typeof e)throw Error("UserAgent should be a string");return new o.default(e,t)},e.parse=function(e){return new o.default(e).getResult()},function(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}(e,[{key:"BROWSER_MAP",get:function(){return i.BROWSER_MAP}},{key:"ENGINE_MAP",get:function(){return i.ENGINE_MAP}},{key:"OS_MAP",get:function(){return i.OS_MAP}},{key:"PLATFORMS_MAP",get:function(){return i.PLATFORMS_MAP}}]),e}();t.default=s,e.exports=t.default},91:function(e,t,r){t.__esModule=!0,t.default=void 0;var n=u(r(92)),o=u(r(93)),i=u(r(94)),s=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var l=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||""===e)throw Error("UserAgent parameter can't be empty");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=a.default.find(n.default,function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some(function(t){return e.test(t)});throw Error("Browser's test function is not valid")});return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=a.default.find(o.default,function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some(function(t){return e.test(t)});throw Error("Browser's test function is not valid")});return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||"":t||""},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||"":t||""},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=a.default.find(i.default,function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some(function(t){return e.test(t)});throw Error("Browser's test function is not valid")});return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||""},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=a.default.find(s.default,function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some(function(t){return e.test(t)});throw Error("Browser's test function is not valid")});return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return a.default.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},n=0,o={},i=0;if(Object.keys(e).forEach(function(t){var s=e[t];"string"==typeof s?(o[t]=s,i+=1):"object"==typeof s&&(r[t]=s,n+=1)}),n>0){var s=Object.keys(r),u=a.default.find(s,function(e){return t.isOS(e)});if(u){var l=this.satisfies(r[u]);if(void 0!==l)return l}var c=a.default.find(s,function(e){return t.isPlatform(e)});if(c){var d=this.satisfies(r[c]);if(void 0!==d)return d}}if(i>0){var f=Object.keys(o),p=a.default.find(f,function(e){return t.isBrowser(e,!0)});if(void 0!==p)return this.compareVersion(o[p])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),n=e.toLowerCase(),o=a.default.getBrowserTypeByAlias(n);return t&&o&&(n=o.toLowerCase()),n===r},t.compareVersion=function(e){var t=[0],r=e,n=!1,o=this.getBrowserVersion();if("string"==typeof o)return">"===e[0]||"<"===e[0]?(r=e.substr(1),"="===e[1]?(n=!0,r=e.substr(2)):t=[],">"===e[0]?t.push(1):t.push(-1)):"="===e[0]?r=e.substr(1):"~"===e[0]&&(n=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(o,r,n))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e,t){return void 0===t&&(t=!1),this.isBrowser(e,t)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some(function(e){return t.is(e)})},e}();t.default=l,e.exports=t.default},92:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,o=(n=r(17))&&n.__esModule?n:{default:n},i=/version\/(\d+(\.?_?\d+)+)/i,s=[{test:[/googlebot/i],describe:function(e){var t={name:"Googlebot"},r=o.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,e)||o.default.getFirstMatch(i,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:"Opera"},r=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\/|opios/i],describe:function(e){var t={name:"Opera"},r=o.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,e)||o.default.getFirstMatch(i,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:"Samsung Internet for Android"},r=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:"NAVER Whale Browser"},r=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:"MZ Browser"},r=o.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,e)||o.default.getFirstMatch(i,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:"Focus"},r=o.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,e)||o.default.getFirstMatch(i,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:"Swing"},r=o.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,e)||o.default.getFirstMatch(i,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:"Opera Coast"},r=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opt\/\d+(?:.?_?\d+)+/i],describe:function(e){var t={name:"Opera Touch"},r=o.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i,e)||o.default.getFirstMatch(i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:"Yandex Browser"},r=o.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,e)||o.default.getFirstMatch(i,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:"UC Browser"},r=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:"Maxthon"},r=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:"Epiphany"},r=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:"Puffin"},r=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:"Sleipnir"},r=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:"K-Meleon"},r=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:"WeChat"},r=o.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,e)||o.default.getFirstMatch(i,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?"QQ Browser Lite":"QQ Browser"},r=o.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,e)||o.default.getFirstMatch(i,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:"Internet Explorer"},r=o.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\sedg\//i],describe:function(e){var t={name:"Microsoft Edge"},r=o.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:"Microsoft Edge"},r=o.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:"Vivaldi"},r=o.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:"SeaMonkey"},r=o.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:"Sailfish"},r=o.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:"Amazon Silk"},r=o.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:"PhantomJS"},r=o.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:"SlimerJS"},r=o.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t={name:"BlackBerry"},r=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:"WebOS Browser"},r=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:"Bada"},r=o.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:"Tizen"},r=o.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,e)||o.default.getFirstMatch(i,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:"QupZilla"},r=o.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,e)||o.default.getFirstMatch(i,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:"Firefox"},r=o.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/electron/i],describe:function(e){var t={name:"Electron"},r=o.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MiuiBrowser/i],describe:function(e){var t={name:"Miui"},r=o.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:"Chromium"},r=o.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,e)||o.default.getFirstMatch(i,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:"Chrome"},r=o.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:"Google Search"},r=o.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:"Android Browser"},r=o.default.getFirstMatch(i,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:"PlayStation 4"},r=o.default.getFirstMatch(i,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:"Safari"},r=o.default.getFirstMatch(i,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search("\\(")?/^(.*)\/(.*)[ \t]\((.*)/:/^(.*)\/(.*) /;return{name:o.default.getFirstMatch(t,e),version:o.default.getSecondMatch(t,e)}}}];t.default=s,e.exports=t.default},93:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,o=(n=r(17))&&n.__esModule?n:{default:n},i=r(18),s=[{test:[/Roku\/DVP/],describe:function(e){var t=o.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,e);return{name:i.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=o.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,e);return{name:i.OS_MAP.WindowsPhone,version:t}}},{test:[/windows /i],describe:function(e){var t=o.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,e),r=o.default.getWindowsVersionName(t);return{name:i.OS_MAP.Windows,version:t,versionName:r}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(e){var t={name:i.OS_MAP.iOS},r=o.default.getSecondMatch(/(Version\/)(\d[\d.]+)/,e);return r&&(t.version=r),t}},{test:[/macintosh/i],describe:function(e){var t=o.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,e).replace(/[_\s]/g,"."),r=o.default.getMacOSVersionName(t),n={name:i.OS_MAP.MacOS,version:t};return r&&(n.versionName=r),n}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=o.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,e).replace(/[_\s]/g,".");return{name:i.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=o.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,e),r=o.default.getAndroidVersionName(t),n={name:i.OS_MAP.Android,version:t};return r&&(n.versionName=r),n}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=o.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,e),r={name:i.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t=o.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,e)||o.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,e)||o.default.getFirstMatch(/\bbb(\d+)/i,e);return{name:i.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=o.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,e);return{name:i.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=o.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,e);return{name:i.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:i.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:i.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=o.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,e);return{name:i.OS_MAP.PlayStation4,version:t}}}];t.default=s,e.exports=t.default},94:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,o=(n=r(17))&&n.__esModule?n:{default:n},i=r(18),s=[{test:[/googlebot/i],describe:function(){return{type:"bot",vendor:"Google"}}},{test:[/huawei/i],describe:function(e){var t=o.default.getFirstMatch(/(can-l01)/i,e)&&"Nova",r={type:i.PLATFORMS_MAP.mobile,vendor:"Huawei"};return t&&(r.model=t),r}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe:function(){return{type:i.PLATFORMS_MAP.tablet,vendor:"Nexus"}}},{test:[/ipad/i],describe:function(){return{type:i.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(){return{type:i.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/kftt build/i],describe:function(){return{type:i.PLATFORMS_MAP.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"}}},{test:[/silk/i],describe:function(){return{type:i.PLATFORMS_MAP.tablet,vendor:"Amazon"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:i.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=o.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:i.PLATFORMS_MAP.mobile,vendor:"Apple",model:t}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:i.PLATFORMS_MAP.mobile,vendor:"Nexus"}}},{test:[/[^-]mobi/i],describe:function(){return{type:i.PLATFORMS_MAP.mobile}}},{test:function(e){return"blackberry"===e.getBrowserName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.mobile,vendor:"BlackBerry"}}},{test:function(e){return"bada"===e.getBrowserName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.mobile}}},{test:function(e){return"windows phone"===e.getBrowserName()},describe:function(){return{type:i.PLATFORMS_MAP.mobile,vendor:"Microsoft"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(".")[0]);return"android"===e.getOSName(!0)&&t>=3},describe:function(){return{type:i.PLATFORMS_MAP.tablet}}},{test:function(e){return"android"===e.getOSName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.mobile}}},{test:function(e){return"macos"===e.getOSName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.desktop,vendor:"Apple"}}},{test:function(e){return"windows"===e.getOSName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.desktop}}},{test:function(e){return"linux"===e.getOSName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.desktop}}},{test:function(e){return"playstation 4"===e.getOSName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.tv}}},{test:function(e){return"roku"===e.getOSName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.tv}}}];t.default=s,e.exports=t.default},95:function(e,t,r){t.__esModule=!0,t.default=void 0;var n,o=(n=r(17))&&n.__esModule?n:{default:n},i=r(18),s=[{test:function(e){return"microsoft edge"===e.getBrowserName(!0)},describe:function(e){if(/\sedg\//i.test(e))return{name:i.ENGINE_MAP.Blink};var t=o.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,e);return{name:i.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:i.ENGINE_MAP.Trident},r=o.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:i.ENGINE_MAP.Presto},r=o.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:i.ENGINE_MAP.Gecko},r=o.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\/537\.36/i],describe:function(){return{name:i.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:i.ENGINE_MAP.WebKit},r=o.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=s,e.exports=t.default}})},e.exports=r()}),a("3dUT4",function(e,r){t(e.exports,"eventStreamSerdeProvider",()=>s("T3C8s").eventStreamSerdeProvider),s("coUfZ"),s("T3C8s"),s("3USkM")}),a("coUfZ",function(e,r){t(e.exports,"EventStreamMarshaller",()=>i),s("4huDj");var n=s("bQ7nk"),o=s("3USkM");class i{constructor({utf8Encoder:e,utf8Decoder:t}){this.universalMarshaller=new n.EventStreamMarshaller({utf8Decoder:t,utf8Encoder:e})}deserialize(e,t){let r=a(e)?(0,o.readableStreamtoIterable)(e):e;return this.universalMarshaller.deserialize(r,t)}serialize(e,t){let r=this.universalMarshaller.serialize(e,t);return"function"==typeof ReadableStream?(0,o.iterableToReadableStream)(r):r}}let a=e=>"function"==typeof ReadableStream&&e instanceof ReadableStream}),a("4huDj",function(e,r){t(e.exports,"EventStreamMarshaller",()=>s("bQ7nk").EventStreamMarshaller),s("bQ7nk"),s("8dnV2")}),a("bQ7nk",function(e,r){t(e.exports,"EventStreamMarshaller",()=>d),s("hl9Sz");var n=s("5t16H"),o=s("fMTJL"),i=s("cRXeJ"),a=s("7Xbyv"),u=s("5UsiI"),l=s("2o7dk"),c=s("jUtgF");class d{constructor({utf8Encoder:e,utf8Decoder:t}){this.eventStreamCodec=new n.EventStreamCodec(e,t),this.utfEncoder=e}deserialize(e,t){let r=(0,l.getChunkedStream)(e);return new a.SmithyMessageDecoderStream({messageStream:new o.MessageDecoderStream({inputStream:r,decoder:this.eventStreamCodec}),deserializer:(0,c.getMessageUnmarshaller)(t,this.utfEncoder)})}serialize(e,t){return new i.MessageEncoderStream({messageStream:new u.SmithyMessageEncoderStream({inputStream:e,serializer:t}),encoder:this.eventStreamCodec,includeEndFrame:!0})}}}),a("hl9Sz",function(e,r){t(e.exports,"EventStreamCodec",()=>s("5t16H").EventStreamCodec),t(e.exports,"MessageDecoderStream",()=>s("fMTJL").MessageDecoderStream),t(e.exports,"MessageEncoderStream",()=>s("cRXeJ").MessageEncoderStream),t(e.exports,"SmithyMessageDecoderStream",()=>s("7Xbyv").SmithyMessageDecoderStream),t(e.exports,"SmithyMessageEncoderStream",()=>s("5UsiI").SmithyMessageEncoderStream),s("5t16H"),s("euuaw"),s("iqIW6"),s("bm3tA"),s("fMTJL"),s("cRXeJ"),s("7Xbyv"),s("5UsiI")}),a("5t16H",function(e,r){t(e.exports,"EventStreamCodec",()=>a);var n=s("1qpl3"),o=s("euuaw"),i=s("9pOGc");class a{constructor(e,t){this.headerMarshaller=new o.HeaderMarshaller(e,t),this.messageBuffer=[],this.isEndOfStream=!1}feed(e){this.messageBuffer.push(this.decode(e))}endOfStream(){this.isEndOfStream=!0}getMessage(){let e=this.messageBuffer.pop(),t=this.isEndOfStream;return{getMessage:()=>e,isEndOfStream:()=>t}}getAvailableMessages(){let e=this.messageBuffer;this.messageBuffer=[];let t=this.isEndOfStream;return{getMessages:()=>e,isEndOfStream:()=>t}}encode({headers:e,body:t}){let r=this.headerMarshaller.format(e),o=r.byteLength+t.byteLength+16,i=new Uint8Array(o),s=new DataView(i.buffer,i.byteOffset,i.byteLength),a=new n.Crc32;return s.setUint32(0,o,!1),s.setUint32(4,r.byteLength,!1),s.setUint32(8,a.update(i.subarray(0,8)).digest(),!1),i.set(r,12),i.set(t,r.byteLength+12),s.setUint32(o-4,a.update(i.subarray(8,o-4)).digest(),!1),i}decode(e){let{headers:t,body:r}=(0,i.splitMessage)(e);return{headers:this.headerMarshaller.parse(t),body:r}}formatHeaders(e){return this.headerMarshaller.format(e)}}}),a("1qpl3",function(e,r){t(e.exports,"Crc32",()=>i);var n=s("f3LKA");s("g7QZY");var o=s("ac6Ma");s("lyBoC");var i=function(){function e(){this.checksum=4294967295}return e.prototype.update=function(e){var t,r;try{for(var o=(0,n.__values)(e),i=o.next();!i.done;i=o.next()){var s=i.value;this.checksum=this.checksum>>>8^a[(this.checksum^s)&255]}}catch(e){t={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(t)throw t.error}}return this},e.prototype.digest=function(){return(4294967295^this.checksum)>>>0},e}(),a=(0,o.uint32ArrayFrom)([0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117])}),a("lyBoC",function(e,t){var r=s("f3LKA");s("g7QZY");var n=s("eT2b8"),o=s("gd3Zh"),i=s("gMvbo"),a=s("1qpl3");!function(){function e(){this.crc32=new a.Crc32}e.prototype.update=function(e){(0,o.isEmptyData)(e)||this.crc32.update((0,n.convertToBuffer)(e))},e.prototype.digest=function(){return(0,r.__awaiter)(this,void 0,void 0,function(){return(0,r.__generator)(this,function(e){return[2,(0,i.numToUint8)(this.crc32.digest())]})})},e.prototype.reset=function(){this.crc32=new a.Crc32}}()}),a("euuaw",function(e,r){t(e.exports,"HeaderMarshaller",()=>u);var n,o,i=s("lSrkm"),a=s("iqIW6");class u{constructor(e,t){this.toUtf8=e,this.fromUtf8=t}format(e){let t=[];for(let r of Object.keys(e)){let n=this.fromUtf8(r);t.push(Uint8Array.from([n.byteLength]),n,this.formatHeaderValue(e[r]))}let r=new Uint8Array(t.reduce((e,t)=>e+t.byteLength,0)),n=0;for(let e of t)r.set(e,n),n+=e.byteLength;return r}formatHeaderValue(e){switch(e.type){case"boolean":return Uint8Array.from([e.value?0:1]);case"byte":return Uint8Array.from([2,e.value]);case"short":let t=new DataView(new ArrayBuffer(3));return t.setUint8(0,3),t.setInt16(1,e.value,!1),new Uint8Array(t.buffer);case"integer":let r=new DataView(new ArrayBuffer(5));return r.setUint8(0,4),r.setInt32(1,e.value,!1),new Uint8Array(r.buffer);case"long":let n=new Uint8Array(9);return n[0]=5,n.set(e.value.bytes,1),n;case"binary":let o=new DataView(new ArrayBuffer(3+e.value.byteLength));o.setUint8(0,6),o.setUint16(1,e.value.byteLength,!1);let s=new Uint8Array(o.buffer);return s.set(e.value,3),s;case"string":let u=this.fromUtf8(e.value),l=new DataView(new ArrayBuffer(3+u.byteLength));l.setUint8(0,7),l.setUint16(1,u.byteLength,!1);let c=new Uint8Array(l.buffer);return c.set(u,3),c;case"timestamp":let d=new Uint8Array(9);return d[0]=8,d.set((0,a.Int64).fromNumber(e.value.valueOf()).bytes,1),d;case"uuid":if(!E.test(e.value))throw Error(`Invalid UUID received: ${e.value}`);let f=new Uint8Array(17);return f[0]=9,f.set((0,i.fromHex)(e.value.replace(/\-/g,"")),1),f}}parse(e){let t={},r=0;for(;r<e.byteLength;){let n=e.getUint8(r++),o=this.toUtf8(new Uint8Array(e.buffer,e.byteOffset+r,n));switch(r+=n,e.getUint8(r++)){case 0:t[o]={type:l,value:!0};break;case 1:t[o]={type:l,value:!1};break;case 2:t[o]={type:c,value:e.getInt8(r++)};break;case 3:t[o]={type:d,value:e.getInt16(r,!1)},r+=2;break;case 4:t[o]={type:f,value:e.getInt32(r,!1)},r+=4;break;case 5:t[o]={type:p,value:new a.Int64(new Uint8Array(e.buffer,e.byteOffset+r,8))},r+=8;break;case 6:let s=e.getUint16(r,!1);r+=2,t[o]={type:h,value:new Uint8Array(e.buffer,e.byteOffset+r,s)},r+=s;break;case 7:let u=e.getUint16(r,!1);r+=2,t[o]={type:g,value:this.toUtf8(new Uint8Array(e.buffer,e.byteOffset+r,u))},r+=u;break;case 8:t[o]={type:m,value:new Date(new(0,a.Int64)(new Uint8Array(e.buffer,e.byteOffset+r,8)).valueOf())},r+=8;break;case 9:let E=new Uint8Array(e.buffer,e.byteOffset+r,16);r+=16,t[o]={type:y,value:`${(0,i.toHex)(E.subarray(0,4))}-${(0,i.toHex)(E.subarray(4,6))}-${(0,i.toHex)(E.subarray(6,8))}-${(0,i.toHex)(E.subarray(8,10))}-${(0,i.toHex)(E.subarray(10))}`};break;default:throw Error("Unrecognized header type tag")}}return t}}(n=o||(o={}))[n.boolTrue=0]="boolTrue",n[n.boolFalse=1]="boolFalse",n[n.byte=2]="byte",n[n.short=3]="short",n[n.integer=4]="integer",n[n.long=5]="long",n[n.byteArray=6]="byteArray",n[n.string=7]="string",n[n.timestamp=8]="timestamp",n[n.uuid=9]="uuid";let l="boolean",c="byte",d="short",f="integer",p="long",h="binary",g="string",m="timestamp",y="uuid",E=/^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/}),a("iqIW6",function(e,r){t(e.exports,"Int64",()=>o);var n=s("lSrkm");class o{constructor(e){if(this.bytes=e,8!==e.byteLength)throw Error("Int64 buffers must be exactly 8 bytes")}static fromNumber(e){if(e>0x7fffffffffffffff||e<-0x8000000000000000)throw Error(`${e} is too large (or, if negative, too small) to represent as an Int64`);let t=new Uint8Array(8);for(let r=7,n=Math.abs(Math.round(e));r>-1&&n>0;r--,n/=256)t[r]=n;return e<0&&i(t),new o(t)}valueOf(){let e=this.bytes.slice(0),t=128&e[0];return t&&i(e),parseInt((0,n.toHex)(e),16)*(t?-1:1)}toString(){return String(this.valueOf())}}function i(e){for(let t=0;t<8;t++)e[t]^=255;for(let t=7;t>-1&&(e[t]++,0===e[t]);t--);}}),a("9pOGc",function(e,r){t(e.exports,"splitMessage",()=>o);var n=s("1qpl3");function o({byteLength:e,byteOffset:t,buffer:r}){if(e<16)throw Error("Provided message too short to accommodate event stream message overhead");let o=new DataView(r,t,e),i=o.getUint32(0,!1);if(e!==i)throw Error("Reported message length does not match received message length");let s=o.getUint32(4,!1),a=o.getUint32(8,!1),u=o.getUint32(e-4,!1),l=new(0,n.Crc32)().update(new Uint8Array(r,t,8));if(a!==l.digest())throw Error(`The prelude checksum specified in the message (${a}) does not match the calculated CRC32 checksum (${l.digest()})`);if(l.update(new Uint8Array(r,t+8,e-12)),u!==l.digest())throw Error(`The message checksum (${l.digest()}) did not match the expected value of ${u}`);return{headers:new DataView(r,t+8+4,s),body:new Uint8Array(r,t+8+4+s,i-s-16)}}}),a("bm3tA",function(e,t){}),a("fMTJL",function(e,r){t(e.exports,"MessageDecoderStream",()=>n);class n{constructor(e){this.options=e}[Symbol.asyncIterator](){return this.asyncIterator()}async *asyncIterator(){for await(let e of this.options.inputStream){let t=this.options.decoder.decode(e);yield t}}}}),a("cRXeJ",function(e,r){t(e.exports,"MessageEncoderStream",()=>n);class n{constructor(e){this.options=e}[Symbol.asyncIterator](){return this.asyncIterator()}async *asyncIterator(){for await(let e of this.options.messageStream){let t=this.options.encoder.encode(e);yield t}this.options.includeEndFrame&&(yield new Uint8Array(0))}}}),a("7Xbyv",function(e,r){t(e.exports,"SmithyMessageDecoderStream",()=>n);class n{constructor(e){this.options=e}[Symbol.asyncIterator](){return this.asyncIterator()}async *asyncIterator(){for await(let e of this.options.messageStream){let t=await this.options.deserializer(e);void 0!==t&&(yield t)}}}}),a("5UsiI",function(e,r){t(e.exports,"SmithyMessageEncoderStream",()=>n);class n{constructor(e){this.options=e}[Symbol.asyncIterator](){return this.asyncIterator()}async *asyncIterator(){for await(let e of this.options.inputStream){let t=this.options.serializer(e);yield t}}}}),a("2o7dk",function(e,r){t(e.exports,"getChunkedStream",()=>n);function n(e){let t=0,r=0,n=null,o=null,i=e=>{if("number"!=typeof e)throw Error("Attempted to allocate an event message where size was not a number: "+e);t=e,r=4,new DataView((n=new Uint8Array(e)).buffer).setUint32(0,e,!1)};return{[Symbol.asyncIterator]:async function*(){let s=e[Symbol.asyncIterator]();for(;;){let{value:e,done:a}=await s.next();if(a){if(t){if(t===r)yield n;else throw Error("Truncated event message received.")}return}let u=e.length,l=0;for(;l<u;){if(!n){let t=u-l;o||(o=new Uint8Array(4));let n=Math.min(4-r,t);if(o.set(e.slice(l,l+n),r),r+=n,l+=n,r<4)break;i(new DataView(o.buffer).getUint32(0,!1)),o=null}let s=Math.min(t-r,u-l);n.set(e.slice(l,l+s),r),r+=s,l+=s,t&&t===r&&(yield n,n=null,t=0,r=0)}}}}}}),a("jUtgF",function(e,r){t(e.exports,"getMessageUnmarshaller",()=>n);function n(e,t){return async function(r){let{value:n}=r.headers[":message-type"];if("error"===n){let e=Error(r.headers[":error-message"].value||"UnknownError");throw e.name=r.headers[":error-code"].value,e}if("exception"===n){let n=r.headers[":exception-type"].value,o=await e({[n]:r});if(o.$unknown){let e=Error(t(r.body));throw e.name=n,e}throw o[n]}if("event"===n){let t={[r.headers[":event-type"].value]:r},n=await e(t);if(n.$unknown)return;return n}throw Error(`Unrecognizable event type: ${r.headers[":event-type"].value}`)}}}),a("8dnV2",function(e,t){s("bQ7nk")}),a("3USkM",function(e,r){t(e.exports,"readableStreamtoIterable",()=>n),t(e.exports,"iterableToReadableStream",()=>o);let n=e=>({[Symbol.asyncIterator]:async function*(){let t=e.getReader();try{for(;;){let{done:e,value:r}=await t.read();if(e)return;yield r}}finally{t.releaseLock()}}}),o=e=>{let t=e[Symbol.asyncIterator]();return new ReadableStream({async pull(e){let{done:r,value:n}=await t.next();if(r)return e.close();e.enqueue(n)}})}}),a("T3C8s",function(e,r){t(e.exports,"eventStreamSerdeProvider",()=>o);var n=s("coUfZ");let o=e=>new n.EventStreamMarshaller(e)}),a("hlayF",function(e,r){t(e.exports,"invalidProvider",()=>s("9M5Q4").invalidProvider),s("4lX6r"),s("9M5Q4")}),a("4lX6r",function(e,t){}),a("9M5Q4",function(e,r){t(e.exports,"invalidProvider",()=>n);let n=e=>()=>Promise.reject(e)}),a("hgNDA",function(e,r){t(e.exports,"calculateBodyLength",()=>s("7pnv0").calculateBodyLength),s("7pnv0")}),a("7pnv0",function(e,r){t(e.exports,"calculateBodyLength",()=>o);let n="function"==typeof TextEncoder?new TextEncoder:null,o=e=>{if("string"==typeof e){if(n)return n.encode(e).byteLength;let t=e.length;for(let r=t-1;r>=0;r--){let n=e.charCodeAt(r);n>127&&n<=2047?t++:n>2047&&n<=65535&&(t+=2),n>=56320&&n<=57343&&r--}return t}if("number"==typeof e.byteLength)return e.byteLength;if("number"==typeof e.size)return e.size;throw Error(`Body Length computation failed for ${e}`)}}),a("2QQpp",function(e,r){t(e.exports,"getRuntimeConfig",()=>p);var n=s("gZl1A");s("3ThPo");var o=s("3zvvf"),i=s("6KaA7");s("byHYG");var a=s("i7UIG"),u=s("frgJX");s("c8eQc");var l=s("9IbJe"),c=s("8MyOO"),d=s("2ud0c"),f=s("djv7n");let p=e=>({apiVersion:"2023-09-30",base64Decoder:e?.base64Decoder??a.fromBase64,base64Encoder:e?.base64Encoder??u.toBase64,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??f.defaultEndpointResolver,extensions:e?.extensions??[],httpAuthSchemeProvider:e?.httpAuthSchemeProvider??d.defaultBedrockRuntimeHttpAuthSchemeProvider,httpAuthSchemes:e?.httpAuthSchemes??[{schemeId:"aws.auth#sigv4",identityProvider:e=>e.getIdentityProvider("aws.auth#sigv4"),signer:new n.AwsSdkSigV4Signer}],logger:e?.logger??new o.NoOpLogger,serviceId:e?.serviceId??"Bedrock Runtime",urlParser:e?.urlParser??i.parseUrl,utf8Decoder:e?.utf8Decoder??l.fromUtf8,utf8Encoder:e?.utf8Encoder??c.toUtf8})}),a("gZl1A",function(e,r){t(e.exports,"AwsSdkSigV4Signer",()=>c),s("gR0fe");var n=s("j0mzq"),o=s("hnO7w"),i=s("7GLNE"),a=s("l4jga");let u=(e,t)=>{if(!t)throw Error(`Property \`${e}\` is not resolved for AWS SDK SigV4Auth`);return t},l=async e=>{let t=u("context",e.context),r=u("config",e.config),n=t.endpointV2?.properties?.authSchemes?.[0],o=u("signer",r.signer);return{config:r,signer:await o(n),signingRegion:e?.signingRegion,signingName:e?.signingName}};class c{async sign(e,t,r){if(!(0,n.HttpRequest).isInstance(e))throw Error("The request is not an instance of `HttpRequest` and cannot be signed");let{config:o,signer:s,signingRegion:a,signingName:u}=await l(r);return await s.sign(e,{signingDate:(0,i.getSkewCorrectedDate)(o.systemClockOffset),signingRegion:a,signingService:u})}errorHandler(e){return t=>{let r=t.ServerTime??(0,o.getDateHeader)(t.$response);if(r){let n=u("config",e.config),o=n.systemClockOffset;n.systemClockOffset=(0,a.getUpdatedSystemClockOffset)(r,n.systemClockOffset),n.systemClockOffset!==o&&t.$metadata&&(t.$metadata.clockSkewCorrected=!0)}throw t}}successHandler(e,t){let r=(0,o.getDateHeader)(e);if(r){let e=u("config",t.config);e.systemClockOffset=(0,a.getUpdatedSystemClockOffset)(r,e.systemClockOffset)}}}}),a("hnO7w",function(e,r){t(e.exports,"getDateHeader",()=>o),s("gR0fe");var n=s("iP6o5");let o=e=>(0,n.HttpResponse).isInstance(e)?e.headers?.date??e.headers?.Date:void 0}),a("7GLNE",function(e,r){t(e.exports,"getSkewCorrectedDate",()=>n);let n=e=>new Date(Date.now()+e)}),a("l4jga",function(e,r){t(e.exports,"getUpdatedSystemClockOffset",()=>o);var n=s("hzsLl");let o=(e,t)=>{let r=Date.parse(e);return(0,n.isClockSkewed)(r,t)?r-Date.now():t}}),a("hzsLl",function(e,r){t(e.exports,"isClockSkewed",()=>o);var n=s("7GLNE");let o=(e,t)=>Math.abs((0,n.getSkewCorrectedDate)(t).getTime()-e)>=3e5}),a("djv7n",function(e,r){t(e.exports,"defaultEndpointResolver",()=>u),s("23sMu");var n=s("cK5Yw");s("a9W47");var o=s("8bcv8"),i=s("2S0kJ"),a=s("42V9u");let u=(e,t={})=>(0,i.resolveEndpoint)(a.ruleSet,{endpointParams:e,logger:t.logger});o.customEndpointFunctions.aws=n.awsEndpointFunctions}),a("42V9u",function(e,r){t(e.exports,"ruleSet",()=>x);let n="required",o="argv",i="isSet",s="booleanEquals",a="error",u="endpoint",l="tree",c="PartitionResult",d={[n]:!1,type:"String"},f={[n]:!0,default:!1,type:"Boolean"},p={ref:"Endpoint"},h={fn:s,[o]:[{ref:"UseFIPS"},!0]},g={fn:s,[o]:[{ref:"UseDualStack"},!0]},m={},y={fn:"getAttr",[o]:[{ref:c},"supportsFIPS"]},E={fn:s,[o]:[!0,{fn:"getAttr",[o]:[{ref:c},"supportsDualStack"]}]},v=[h],S=[g],b=[{ref:"Region"}],x={version:"1.0",parameters:{Region:d,UseDualStack:f,UseFIPS:f,Endpoint:d},rules:[{conditions:[{fn:i,[o]:[p]}],rules:[{conditions:v,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:a},{rules:[{conditions:S,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:a},{endpoint:{url:p,properties:m,headers:m},type:u}],type:l}],type:l},{rules:[{conditions:[{fn:i,[o]:b}],rules:[{conditions:[{fn:"aws.partition",[o]:b,assign:c}],rules:[{conditions:[h,g],rules:[{conditions:[{fn:s,[o]:[!0,y]},E],rules:[{rules:[{endpoint:{url:"https://bedrock-runtime-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:m,headers:m},type:u}],type:l}],type:l},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:a}],type:l},{conditions:v,rules:[{conditions:[{fn:s,[o]:[y,!0]}],rules:[{rules:[{endpoint:{url:"https://bedrock-runtime-fips.{Region}.{PartitionResult#dnsSuffix}",properties:m,headers:m},type:u}],type:l}],type:l},{error:"FIPS is enabled but this partition does not support FIPS",type:a}],type:l},{conditions:S,rules:[{conditions:[E],rules:[{rules:[{endpoint:{url:"https://bedrock-runtime.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:m,headers:m},type:u}],type:l}],type:l},{error:"DualStack is enabled but this partition does not support DualStack",type:a}],type:l},{rules:[{endpoint:{url:"https://bedrock-runtime.{Region}.{PartitionResult#dnsSuffix}",properties:m,headers:m},type:u}],type:l}],type:l}],type:l},{error:"Invalid Configuration: Missing Region",type:a}],type:l}]}}),a("alBKk",function(e,r){t(e.exports,"resolveDefaultsModeConfig",()=>s("7nFRI").resolveDefaultsModeConfig),s("7nFRI")}),a("7nFRI",function(e,n){t(e.exports,"resolveDefaultsModeConfig",()=>u),s("8NNqO");var o=s("7J1MZ"),i=s("bpzwj"),a=s("8fQq7");let u=({defaultsMode:e}={})=>(0,o.memoize)(async()=>{let t="function"==typeof e?await e():e;switch(t?.toLowerCase()){case"auto":return Promise.resolve(l()?"mobile":"standard");case"mobile":case"in-region":case"cross-region":case"standard":case"legacy":return Promise.resolve(t?.toLocaleLowerCase());case void 0:return Promise.resolve("legacy");default:throw Error(`Invalid parameter for "defaultsMode", expect ${(0,a.DEFAULTS_MODE_OPTIONS).join(", ")}, got ${t}`)}}),l=()=>{let e="undefined"!=typeof window&&window?.navigator?.userAgent?r(i).parse(window.navigator.userAgent):void 0,t=e?.platform?.type;return"tablet"===t||"mobile"===t}}),a("8NNqO",function(e,r){t(e.exports,"memoize",()=>s("7J1MZ").memoize),s("2LknX"),s("8RrnV"),s("1DXsi"),s("agK1W"),s("cibYG"),s("7J1MZ")}),a("2LknX",function(e,t){s("8RrnV")}),a("8RrnV",function(e,r){t(e.exports,"ProviderError",()=>n);class n extends Error{constructor(e,t=!0){let r;let o=!0;"boolean"==typeof t?(r=void 0,o=t):null!=t&&"object"==typeof t&&(r=t.logger,o=t.tryNextLink??!0),super(e),this.name="ProviderError",this.tryNextLink=o,Object.setPrototypeOf(this,n.prototype),r?.debug?.(`@smithy/property-provider ${o?"->":"(!)"} ${e}`)}static from(e,t=!0){return Object.assign(new this(e.message,t),e)}}}),a("1DXsi",function(e,t){s("8RrnV")}),a("agK1W",function(e,t){s("8RrnV")}),a("cibYG",function(e,t){}),a("7J1MZ",function(e,r){t(e.exports,"memoize",()=>n);let n=(e,t,r)=>{let n,o,i;let s=!1,a=async()=>{o||(o=e());try{n=await o,i=!0,s=!1}finally{o=void 0}return n};return void 0===t?async e=>((!i||e?.forceRefresh)&&(n=await a()),n):async e=>((!i||e?.forceRefresh)&&(n=await a()),s||(r&&!r(n)?s=!0:t(n)&&await a()),n)}}),a("8fQq7",function(e,r){t(e.exports,"DEFAULTS_MODE_OPTIONS",()=>n);let n=["in-region","cross-region","mobile","standard","legacy"]}),a("1fHEW",function(e,r){t(e.exports,"resolveRuntimeExtensions",()=>l),s("h8R5H");var n=s("kkPfn");s("gR0fe");var o=s("4xoI3");s("3ThPo");var i=s("alxfc"),a=s("3tUtF");let u=e=>e,l=(e,t)=>{let r={...u((0,n.getAwsRegionExtensionConfiguration)(e)),...u((0,i.getDefaultExtensionConfiguration)(e)),...u((0,o.getHttpHandlerExtensionConfiguration)(e)),...u((0,a.getHttpAuthExtensionConfiguration)(e))};return t.forEach(e=>e.configure(r)),{...e,...(0,n.resolveAwsRegionExtensionConfiguration)(r),...(0,i.resolveDefaultRuntimeConfig)(r),...(0,o.resolveHttpHandlerRuntimeConfig)(r),...(0,a.resolveHttpAuthRuntimeConfig)(r)}}}),a("h8R5H",function(e,r){t(e.exports,"getAwsRegionExtensionConfiguration",()=>s("kkPfn").getAwsRegionExtensionConfiguration),t(e.exports,"resolveAwsRegionExtensionConfiguration",()=>s("kkPfn").resolveAwsRegionExtensionConfiguration),s("kkPfn"),s("5eokT")}),a("kkPfn",function(e,r){t(e.exports,"getAwsRegionExtensionConfiguration",()=>n),t(e.exports,"resolveAwsRegionExtensionConfiguration",()=>o);let n=e=>{let t=async()=>{if(void 0===e.region)throw Error("Region is missing from runtimeConfig");let t=e.region;return"string"==typeof t?t:t()};return{setRegion(e){t=e},region:()=>t}},o=e=>({region:e.region()})}),a("5eokT",function(e,t){s("9lEbl"),s("ezXdA")}),a("9lEbl",function(e,t){}),a("ezXdA",function(e,t){s("fHBJF"),s("1VqE1")}),a("fHBJF",function(e,r){t(e.exports,"getRealRegion",()=>o);var n=s("1VqE1");let o=e=>(0,n.isFipsRegion)(e)?["fips-aws-global","aws-fips"].includes(e)?"us-east-1":e.replace(/fips-(dkr-|prod-)?|-fips/,""):e}),a("1VqE1",function(e,r){t(e.exports,"isFipsRegion",()=>n);let n=e=>"string"==typeof e&&(e.startsWith("fips-")||e.endsWith("-fips"))}),a("3tUtF",function(e,r){t(e.exports,"getHttpAuthExtensionConfiguration",()=>n),t(e.exports,"resolveHttpAuthRuntimeConfig",()=>o);let n=e=>{let t=e.httpAuthSchemes,r=e.httpAuthSchemeProvider,n=e.credentials;return{setHttpAuthScheme(e){let r=t.findIndex(t=>t.schemeId===e.schemeId);-1===r?t.push(e):t.splice(r,1,e)},httpAuthSchemes:()=>t,setHttpAuthSchemeProvider(e){r=e},httpAuthSchemeProvider:()=>r,setCredentials(e){n=e},credentials:()=>n}},o=e=>({httpAuthSchemes:e.httpAuthSchemes(),httpAuthSchemeProvider:e.httpAuthSchemeProvider(),credentials:e.credentials()})}),a("9nw27",function(e,r){t(e.exports,"BedrockRuntime",()=>d),s("3ThPo");var n=s("8gmQ9"),o=s("1NcuB"),i=s("f7kty"),a=s("5nE0N"),u=s("1w148"),l=s("9Y5LT");let c={ConverseCommand:i.ConverseCommand,ConverseStreamCommand:a.ConverseStreamCommand,InvokeModelCommand:u.InvokeModelCommand,InvokeModelWithResponseStreamCommand:l.InvokeModelWithResponseStreamCommand};class d extends o.BedrockRuntimeClient{}(0,n.createAggregatedClient)(c,d)}),a("f7kty",function(e,r){t(e.exports,"ConverseCommand",()=>l),t(e.exports,"$Command",()=>s("8CeTn").Command),s("dpFrj");var n=s("kiuTm");s("aKRs7");var o=s("2CNf6");s("3ThPo");var i=s("8CeTn"),a=s("it8kL"),u=s("4ouFr");class l extends(0,i.Command).classBuilder().ep({...a.commonParams}).m(function(e,t,r,i){return[(0,o.getSerdePlugin)(r,this.serialize,this.deserialize),(0,n.getEndpointPlugin)(r,e.getEndpointParameterInstructions())]}).s("AmazonBedrockFrontendService","Converse",{}).n("BedrockRuntimeClient","ConverseCommand").f(void 0,void 0).ser(u.se_ConverseCommand).de(u.de_ConverseCommand).build(){}}),a("4ouFr",function(e,r){t(e.exports,"se_ConverseCommand",()=>m),t(e.exports,"se_ConverseStreamCommand",()=>y),t(e.exports,"se_InvokeModelCommand",()=>E),t(e.exports,"se_InvokeModelWithResponseStreamCommand",()=>v),t(e.exports,"de_ConverseCommand",()=>S),t(e.exports,"de_ConverseStreamCommand",()=>b),t(e.exports,"de_InvokeModelCommand",()=>x),t(e.exports,"de_InvokeModelWithResponseStreamCommand",()=>w);var n=s("k7aKF"),o=s("3pd8t");s("3q3gO");var i=s("l7S8v");s("3ThPo");var a=s("2WfFW"),u=s("9geO8"),l=s("jukpK"),c=s("3y1NG"),d=s("cDm2A"),f=s("aLLZf"),p=s("b2H9k"),h=s("hoqHO"),g=s("4YPzJ");let m=async(e,t)=>{let r;let n=(0,i.requestBuilder)(e,t);return n.bp("/model/{modelId}/converse"),n.p("modelId",()=>e.modelId,"{modelId}",!1),r=JSON.stringify((0,d.take)(e,{additionalModelRequestFields:e=>eh(e,t),additionalModelResponseFieldPaths:e=>(0,a._json)(e),guardrailConfig:e=>(0,a._json)(e),inferenceConfig:e=>er(e,t),messages:e=>eo(e,t),system:e=>(0,a._json)(e),toolConfig:e=>es(e,t)})),n.m("POST").h({"content-type":"application/json"}).b(r),n.build()},y=async(e,t)=>{let r;let n=(0,i.requestBuilder)(e,t);return n.bp("/model/{modelId}/converse-stream"),n.p("modelId",()=>e.modelId,"{modelId}",!1),r=JSON.stringify((0,d.take)(e,{additionalModelRequestFields:e=>eh(e,t),additionalModelResponseFieldPaths:e=>(0,a._json)(e),guardrailConfig:e=>(0,a._json)(e),inferenceConfig:e=>er(e,t),messages:e=>eo(e,t),system:e=>(0,a._json)(e),toolConfig:e=>es(e,t)})),n.m("POST").h({"content-type":"application/json"}).b(r),n.build()},E=async(e,t)=>{let r;let n=(0,i.requestBuilder)(e,t),o=(0,d.map)({},eM,{[eU]:e[eO]||"application/octet-stream",[eP]:e[eP],[e$]:e[eD],[eF]:e[eN],[ej]:e[eB]});return n.bp("/model/{modelId}/invoke"),n.p("modelId",()=>e.modelId,"{modelId}",!1),void 0!==e.body&&(r=e.body),n.m("POST").h(o).b(r),n.build()},v=async(e,t)=>{let r;let n=(0,i.requestBuilder)(e,t),o=(0,d.map)({},eM,{[eU]:e[eO]||"application/octet-stream",[eL]:e[eP],[e$]:e[eD],[eF]:e[eN],[ej]:e[eB]});return n.bp("/model/{modelId}/invoke-with-response-stream"),n.p("modelId",()=>e.modelId,"{modelId}",!1),void 0!==e.body&&(r=e.body),n.m("POST").h(o).b(r),n.build()},S=async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return R(e,t);let r=(0,d.map)({$metadata:ek(e)}),i=(0,c.expectNonNull)((0,c.expectObject)(await (0,o.parseJsonBody)(e.body,t)),"body");return Object.assign(r,(0,d.take)(i,{additionalModelResponseFields:e=>eI(e,t),metrics:a._json,output:e=>ey((0,n.awsExpectUnion)(e),t),stopReason:c.expectString,trace:a._json,usage:a._json})),r},b=async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return R(e,t);let r=(0,d.map)({$metadata:ek(e)}),n=e.body;return r.stream=B(n,t),r},x=async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return R(e,t);let r=(0,d.map)({$metadata:ek(e),[eO]:[,e.headers[eU]]}),n=await (0,u.collectBody)(e.body,t);return r.body=n,r},w=async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return R(e,t);let r=(0,d.map)({$metadata:ek(e),[eO]:[,e.headers[eH]]}),n=e.body;return r.body=D(n,t),r},R=async(e,t)=>{let r={...e,body:await (0,o.parseJsonErrorBody)(e.body,t)},n=(0,o.loadRestJsonErrorCode)(e,r.body);switch(n){case"AccessDeniedException":case"com.amazonaws.bedrockruntime#AccessDeniedException":throw await T(r,t);case"InternalServerException":case"com.amazonaws.bedrockruntime#InternalServerException":throw await _(r,t);case"ModelErrorException":case"com.amazonaws.bedrockruntime#ModelErrorException":throw await C(r,t);case"ModelNotReadyException":case"com.amazonaws.bedrockruntime#ModelNotReadyException":throw await I(r,t);case"ModelTimeoutException":case"com.amazonaws.bedrockruntime#ModelTimeoutException":throw await M(r,t);case"ResourceNotFoundException":case"com.amazonaws.bedrockruntime#ResourceNotFoundException":throw await P(r,t);case"ThrottlingException":case"com.amazonaws.bedrockruntime#ThrottlingException":throw await U(r,t);case"ValidationException":case"com.amazonaws.bedrockruntime#ValidationException":throw await N(r,t);case"ServiceQuotaExceededException":case"com.amazonaws.bedrockruntime#ServiceQuotaExceededException":throw await O(r,t);case"ModelStreamErrorException":case"com.amazonaws.bedrockruntime#ModelStreamErrorException":throw await k(r,t);default:return A({output:e,parsedBody:r.body,errorCode:n})}},A=(0,p.withBaseException)(h.BedrockRuntimeServiceException),T=async(e,t)=>{let r=(0,d.map)({}),n=e.body;Object.assign(r,(0,d.take)(n,{message:c.expectString}));let o=new g.AccessDeniedException({$metadata:ek(e),...r});return(0,l.decorateServiceException)(o,e.body)},_=async(e,t)=>{let r=(0,d.map)({}),n=e.body;Object.assign(r,(0,d.take)(n,{message:c.expectString}));let o=new g.InternalServerException({$metadata:ek(e),...r});return(0,l.decorateServiceException)(o,e.body)},C=async(e,t)=>{let r=(0,d.map)({}),n=e.body;Object.assign(r,(0,d.take)(n,{message:c.expectString,originalStatusCode:c.expectInt32,resourceName:c.expectString}));let o=new g.ModelErrorException({$metadata:ek(e),...r});return(0,l.decorateServiceException)(o,e.body)},I=async(e,t)=>{let r=(0,d.map)({}),n=e.body;Object.assign(r,(0,d.take)(n,{message:c.expectString}));let o=new g.ModelNotReadyException({$metadata:ek(e),...r});return(0,l.decorateServiceException)(o,e.body)},k=async(e,t)=>{let r=(0,d.map)({}),n=e.body;Object.assign(r,(0,d.take)(n,{message:c.expectString,originalMessage:c.expectString,originalStatusCode:c.expectInt32}));let o=new g.ModelStreamErrorException({$metadata:ek(e),...r});return(0,l.decorateServiceException)(o,e.body)},M=async(e,t)=>{let r=(0,d.map)({}),n=e.body;Object.assign(r,(0,d.take)(n,{message:c.expectString}));let o=new g.ModelTimeoutException({$metadata:ek(e),...r});return(0,l.decorateServiceException)(o,e.body)},P=async(e,t)=>{let r=(0,d.map)({}),n=e.body;Object.assign(r,(0,d.take)(n,{message:c.expectString}));let o=new g.ResourceNotFoundException({$metadata:ek(e),...r});return(0,l.decorateServiceException)(o,e.body)},O=async(e,t)=>{let r=(0,d.map)({}),n=e.body;Object.assign(r,(0,d.take)(n,{message:c.expectString}));let o=new g.ServiceQuotaExceededException({$metadata:ek(e),...r});return(0,l.decorateServiceException)(o,e.body)},U=async(e,t)=>{let r=(0,d.map)({}),n=e.body;Object.assign(r,(0,d.take)(n,{message:c.expectString}));let o=new g.ThrottlingException({$metadata:ek(e),...r});return(0,l.decorateServiceException)(o,e.body)},N=async(e,t)=>{let r=(0,d.map)({}),n=e.body;Object.assign(r,(0,d.take)(n,{message:c.expectString}));let o=new g.ValidationException({$metadata:ek(e),...r});return(0,l.decorateServiceException)(o,e.body)},B=(e,t)=>t.eventStreamMarshaller.deserialize(e,async r=>null!=r.messageStart?{messageStart:await q(r.messageStart,t)}:null!=r.contentBlockStart?{contentBlockStart:await H(r.contentBlockStart,t)}:null!=r.contentBlockDelta?{contentBlockDelta:await L(r.contentBlockDelta,t)}:null!=r.contentBlockStop?{contentBlockStop:await F(r.contentBlockStop,t)}:null!=r.messageStop?{messageStop:await z(r.messageStop,t)}:null!=r.metadata?{metadata:await j(r.metadata,t)}:null!=r.internalServerException?{internalServerException:await $(r.internalServerException,t)}:null!=r.modelStreamErrorException?{modelStreamErrorException:await Y(r.modelStreamErrorException,t)}:null!=r.validationException?{validationException:await W(r.validationException,t)}:null!=r.throttlingException?{throttlingException:await K(r.throttlingException,t)}:{$unknown:e}),D=(e,t)=>t.eventStreamMarshaller.deserialize(e,async r=>null!=r.chunk?{chunk:await V(r.chunk,t)}:null!=r.internalServerException?{internalServerException:await $(r.internalServerException,t)}:null!=r.modelStreamErrorException?{modelStreamErrorException:await Y(r.modelStreamErrorException,t)}:null!=r.validationException?{validationException:await W(r.validationException,t)}:null!=r.throttlingException?{throttlingException:await K(r.throttlingException,t)}:null!=r.modelTimeoutException?{modelTimeoutException:await G(r.modelTimeoutException,t)}:{$unknown:e}),L=async(e,t)=>{let r={},n=await (0,o.parseJsonBody)(e.body,t);return Object.assign(r,(0,a._json)(n)),r},H=async(e,t)=>{let r={},n=await (0,o.parseJsonBody)(e.body,t);return Object.assign(r,(0,a._json)(n)),r},F=async(e,t)=>{let r={},n=await (0,o.parseJsonBody)(e.body,t);return Object.assign(r,(0,a._json)(n)),r},j=async(e,t)=>{let r={},n=await (0,o.parseJsonBody)(e.body,t);return Object.assign(r,(0,a._json)(n)),r},$=async(e,t)=>_({...e,body:await (0,o.parseJsonBody)(e.body,t)},t),q=async(e,t)=>{let r={},n=await (0,o.parseJsonBody)(e.body,t);return Object.assign(r,(0,a._json)(n)),r},z=async(e,t)=>{let r={};return Object.assign(r,ew(await (0,o.parseJsonBody)(e.body,t),t)),r},Y=async(e,t)=>k({...e,body:await (0,o.parseJsonBody)(e.body,t)},t),G=async(e,t)=>M({...e,body:await (0,o.parseJsonBody)(e.body,t)},t),V=async(e,t)=>{let r={};return Object.assign(r,eR(await (0,o.parseJsonBody)(e.body,t),t)),r},K=async(e,t)=>U({...e,body:await (0,o.parseJsonBody)(e.body,t)},t),W=async(e,t)=>N({...e,body:await (0,o.parseJsonBody)(e.body,t)},t),Q=(e,t)=>(0,g.ContentBlock).visit(e,{document:e=>({document:X(e,t)}),guardContent:e=>({guardContent:(0,a._json)(e)}),image:e=>({image:ee(e,t)}),text:e=>({text:e}),toolResult:e=>({toolResult:eu(e,t)}),toolUse:e=>({toolUse:ep(e,t)}),_:(e,t)=>({name:t})}),J=(e,t)=>e.filter(e=>null!=e).map(e=>Q(e,t)),X=(e,t)=>(0,d.take)(e,{format:[],name:[],source:e=>Z(e,t)}),Z=(e,t)=>(0,g.DocumentSource).visit(e,{bytes:e=>({bytes:t.base64Encoder(e)}),_:(e,t)=>({name:t})}),ee=(e,t)=>(0,d.take)(e,{format:[],source:e=>et(e,t)}),et=(e,t)=>(0,g.ImageSource).visit(e,{bytes:e=>({bytes:t.base64Encoder(e)}),_:(e,t)=>({name:t})}),er=(e,t)=>(0,d.take)(e,{maxTokens:[],stopSequences:a._json,temperature:f.serializeFloat,topP:f.serializeFloat}),en=(e,t)=>(0,d.take)(e,{content:e=>J(e,t),role:[]}),eo=(e,t)=>e.filter(e=>null!=e).map(e=>en(e,t)),ei=(e,t)=>(0,g.Tool).visit(e,{toolSpec:e=>({toolSpec:ef(e,t)}),_:(e,t)=>({name:t})}),es=(e,t)=>(0,d.take)(e,{toolChoice:a._json,tools:e=>ed(e,t)}),ea=(e,t)=>(0,g.ToolInputSchema).visit(e,{json:e=>({json:eh(e,t)}),_:(e,t)=>({name:t})}),eu=(e,t)=>(0,d.take)(e,{content:e=>ec(e,t),status:[],toolUseId:[]}),el=(e,t)=>(0,g.ToolResultContentBlock).visit(e,{document:e=>({document:X(e,t)}),image:e=>({image:ee(e,t)}),json:e=>({json:eh(e,t)}),text:e=>({text:e}),_:(e,t)=>({name:t})}),ec=(e,t)=>e.filter(e=>null!=e).map(e=>el(e,t)),ed=(e,t)=>e.filter(e=>null!=e).map(e=>ei(e,t)),ef=(e,t)=>(0,d.take)(e,{description:[],inputSchema:e=>ea(e,t),name:[]}),ep=(e,t)=>(0,d.take)(e,{input:e=>eh(e,t),name:[],toolUseId:[]}),eh=(e,t)=>e,eg=(e,t)=>null!=e.document?{document:eE(e.document,t)}:null!=e.guardContent?{guardContent:(0,a._json)((0,n.awsExpectUnion)(e.guardContent))}:null!=e.image?{image:eS(e.image,t)}:void 0!==(0,c.expectString)(e.text)?{text:(0,c.expectString)(e.text)}:null!=e.toolResult?{toolResult:eA(e.toolResult,t)}:null!=e.toolUse?{toolUse:eC(e.toolUse,t)}:{$unknown:Object.entries(e)[0]},em=(e,t)=>(e||[]).filter(e=>null!=e).map(e=>eg((0,n.awsExpectUnion)(e),t)),ey=(e,t)=>null!=e.message?{message:ex(e.message,t)}:{$unknown:Object.entries(e)[0]},eE=(e,t)=>(0,d.take)(e,{format:c.expectString,name:c.expectString,source:e=>ev((0,n.awsExpectUnion)(e),t)}),ev=(e,t)=>null!=e.bytes?{bytes:t.base64Decoder(e.bytes)}:{$unknown:Object.entries(e)[0]},eS=(e,t)=>(0,d.take)(e,{format:c.expectString,source:e=>eb((0,n.awsExpectUnion)(e),t)}),eb=(e,t)=>null!=e.bytes?{bytes:t.base64Decoder(e.bytes)}:{$unknown:Object.entries(e)[0]},ex=(e,t)=>(0,d.take)(e,{content:e=>em(e,t),role:c.expectString}),ew=(e,t)=>(0,d.take)(e,{additionalModelResponseFields:e=>eI(e,t),stopReason:c.expectString}),eR=(e,t)=>(0,d.take)(e,{bytes:t.base64Decoder}),eA=(e,t)=>(0,d.take)(e,{content:e=>e_(e,t),status:c.expectString,toolUseId:c.expectString}),eT=(e,t)=>null!=e.document?{document:eE(e.document,t)}:null!=e.image?{image:eS(e.image,t)}:null!=e.json?{json:eI(e.json,t)}:void 0!==(0,c.expectString)(e.text)?{text:(0,c.expectString)(e.text)}:{$unknown:Object.entries(e)[0]},e_=(e,t)=>(e||[]).filter(e=>null!=e).map(e=>eT((0,n.awsExpectUnion)(e),t)),eC=(e,t)=>(0,d.take)(e,{input:e=>eI(e,t),name:c.expectString,toolUseId:c.expectString}),eI=(e,t)=>e,ek=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),eM=e=>null!=e&&""!==e&&(!Object.getOwnPropertyNames(e).includes("length")||0!=e.length)&&(!Object.getOwnPropertyNames(e).includes("size")||0!=e.size),eP="accept",eO="contentType",eU="content-type",eN="guardrailIdentifier",eB="guardrailVersion",eD="trace",eL="x-amzn-bedrock-accept",eH="x-amzn-bedrock-content-type",eF="x-amzn-bedrock-guardrailidentifier",ej="x-amzn-bedrock-guardrailversion",e$="x-amzn-bedrock-trace"}),a("k7aKF",function(e,r){t(e.exports,"awsExpectUnion",()=>o),s("3ThPo");var n=s("3y1NG");let o=e=>{if(null!=e)return"object"==typeof e&&"__type"in e&&delete e.__type,(0,n.expectUnion)(e)}}),a("3pd8t",function(e,r){t(e.exports,"parseJsonBody",()=>o),t(e.exports,"parseJsonErrorBody",()=>i),t(e.exports,"loadRestJsonErrorCode",()=>a);var n=s("1Jnxw");let o=(e,t)=>(0,n.collectBodyString)(e,t).then(e=>{if(e.length)try{return JSON.parse(e)}catch(t){throw t?.name==="SyntaxError"&&Object.defineProperty(t,"$responseBodyText",{value:e}),t}return{}}),i=async(e,t)=>{let r=await o(e,t);return r.message=r.message??r.Message,r},a=(e,t)=>{let r=e=>{let t=e;return"number"==typeof t&&(t=t.toString()),t.indexOf(",")>=0&&(t=t.split(",")[0]),t.indexOf(":")>=0&&(t=t.split(":")[0]),t.indexOf("#")>=0&&(t=t.split("#")[1]),t},n=Object.keys(e.headers).find(e=>"x-amzn-errortype"===e.toLowerCase());return void 0!==n?r(e.headers[n]):void 0!==t.code?r(t.code):void 0!==t.__type?r(t.__type):void 0}}),a("1Jnxw",function(e,r){t(e.exports,"collectBodyString",()=>o),s("3ThPo");var n=s("9geO8");let o=(e,t)=>(0,n.collectBody)(e,t).then(e=>t.utf8Encoder(e))}),a("hoqHO",function(e,r){t(e.exports,"BedrockRuntimeServiceException",()=>o),s("3ThPo");var n=s("jukpK");class o extends n.ServiceException{constructor(e){super(e),Object.setPrototypeOf(this,o.prototype)}}}),a("4YPzJ",function(e,r){t(e.exports,"AccessDeniedException",()=>S),t(e.exports,"GuardrailTrace",()=>b),t(e.exports,"DocumentFormat",()=>x),t(e.exports,"DocumentSource",()=>n),t(e.exports,"GuardrailConverseContentBlock",()=>o),t(e.exports,"ImageFormat",()=>w),t(e.exports,"ImageSource",()=>i),t(e.exports,"ToolResultContentBlock",()=>a),t(e.exports,"ToolResultStatus",()=>R),t(e.exports,"ContentBlock",()=>u),t(e.exports,"ConversationRole",()=>A),t(e.exports,"SystemContentBlock",()=>l),t(e.exports,"ToolChoice",()=>c),t(e.exports,"ToolInputSchema",()=>d),t(e.exports,"Tool",()=>f),t(e.exports,"ConverseOutput",()=>p),t(e.exports,"StopReason",()=>T),t(e.exports,"GuardrailContentPolicyAction",()=>_),t(e.exports,"GuardrailContentFilterConfidence",()=>C),t(e.exports,"GuardrailContentFilterType",()=>I),t(e.exports,"GuardrailSensitiveInformationPolicyAction",()=>k),t(e.exports,"GuardrailPiiEntityType",()=>M),t(e.exports,"GuardrailTopicPolicyAction",()=>P),t(e.exports,"GuardrailTopicType",()=>O),t(e.exports,"GuardrailWordPolicyAction",()=>U),t(e.exports,"GuardrailManagedWordType",()=>N),t(e.exports,"InternalServerException",()=>B),t(e.exports,"ModelErrorException",()=>D),t(e.exports,"ModelNotReadyException",()=>L),t(e.exports,"ModelTimeoutException",()=>H),t(e.exports,"ResourceNotFoundException",()=>F),t(e.exports,"ThrottlingException",()=>j),t(e.exports,"ValidationException",()=>$),t(e.exports,"GuardrailStreamProcessingMode",()=>q),t(e.exports,"ContentBlockDelta",()=>h),t(e.exports,"ContentBlockStart",()=>g),t(e.exports,"ModelStreamErrorException",()=>z),t(e.exports,"ConverseStreamOutput",()=>m),t(e.exports,"Trace",()=>Y),t(e.exports,"ServiceQuotaExceededException",()=>G),t(e.exports,"ResponseStream",()=>y),t(e.exports,"ConverseStreamOutputFilterSensitiveLog",()=>V),t(e.exports,"ConverseStreamResponseFilterSensitiveLog",()=>K),t(e.exports,"InvokeModelRequestFilterSensitiveLog",()=>W),t(e.exports,"InvokeModelResponseFilterSensitiveLog",()=>Q),t(e.exports,"InvokeModelWithResponseStreamRequestFilterSensitiveLog",()=>J),t(e.exports,"PayloadPartFilterSensitiveLog",()=>X),t(e.exports,"ResponseStreamFilterSensitiveLog",()=>Z),t(e.exports,"InvokeModelWithResponseStreamResponseFilterSensitiveLog",()=>ee),s("3ThPo");var n,o,i,a,u,l,c,d,f,p,h,g,m,y,E=s("gVWsK"),v=s("hoqHO");class S extends v.BedrockRuntimeServiceException{constructor(e){super({name:"AccessDeniedException",$fault:"client",...e}),this.name="AccessDeniedException",this.$fault="client",Object.setPrototypeOf(this,S.prototype)}}let b={DISABLED:"disabled",ENABLED:"enabled"},x={CSV:"csv",DOC:"doc",DOCX:"docx",HTML:"html",MD:"md",PDF:"pdf",TXT:"txt",XLS:"xls",XLSX:"xlsx"};(n||(n={})).visit=(e,t)=>void 0!==e.bytes?t.bytes(e.bytes):t._(e.$unknown[0],e.$unknown[1]),(o||(o={})).visit=(e,t)=>void 0!==e.text?t.text(e.text):t._(e.$unknown[0],e.$unknown[1]);let w={GIF:"gif",JPEG:"jpeg",PNG:"png",WEBP:"webp"};(i||(i={})).visit=(e,t)=>void 0!==e.bytes?t.bytes(e.bytes):t._(e.$unknown[0],e.$unknown[1]),(a||(a={})).visit=(e,t)=>void 0!==e.json?t.json(e.json):void 0!==e.text?t.text(e.text):void 0!==e.image?t.image(e.image):void 0!==e.document?t.document(e.document):t._(e.$unknown[0],e.$unknown[1]);let R={ERROR:"error",SUCCESS:"success"};(u||(u={})).visit=(e,t)=>void 0!==e.text?t.text(e.text):void 0!==e.image?t.image(e.image):void 0!==e.document?t.document(e.document):void 0!==e.toolUse?t.toolUse(e.toolUse):void 0!==e.toolResult?t.toolResult(e.toolResult):void 0!==e.guardContent?t.guardContent(e.guardContent):t._(e.$unknown[0],e.$unknown[1]);let A={ASSISTANT:"assistant",USER:"user"};(l||(l={})).visit=(e,t)=>void 0!==e.text?t.text(e.text):void 0!==e.guardContent?t.guardContent(e.guardContent):t._(e.$unknown[0],e.$unknown[1]),(c||(c={})).visit=(e,t)=>void 0!==e.auto?t.auto(e.auto):void 0!==e.any?t.any(e.any):void 0!==e.tool?t.tool(e.tool):t._(e.$unknown[0],e.$unknown[1]),(d||(d={})).visit=(e,t)=>void 0!==e.json?t.json(e.json):t._(e.$unknown[0],e.$unknown[1]),(f||(f={})).visit=(e,t)=>void 0!==e.toolSpec?t.toolSpec(e.toolSpec):t._(e.$unknown[0],e.$unknown[1]),(p||(p={})).visit=(e,t)=>void 0!==e.message?t.message(e.message):t._(e.$unknown[0],e.$unknown[1]);let T={CONTENT_FILTERED:"content_filtered",END_TURN:"end_turn",GUARDRAIL_INTERVENED:"guardrail_intervened",MAX_TOKENS:"max_tokens",STOP_SEQUENCE:"stop_sequence",TOOL_USE:"tool_use"},_={BLOCKED:"BLOCKED"},C={HIGH:"HIGH",LOW:"LOW",MEDIUM:"MEDIUM",NONE:"NONE"},I={HATE:"HATE",INSULTS:"INSULTS",MISCONDUCT:"MISCONDUCT",PROMPT_ATTACK:"PROMPT_ATTACK",SEXUAL:"SEXUAL",VIOLENCE:"VIOLENCE"},k={ANONYMIZED:"ANONYMIZED",BLOCKED:"BLOCKED"},M={ADDRESS:"ADDRESS",AGE:"AGE",AWS_ACCESS_KEY:"AWS_ACCESS_KEY",AWS_SECRET_KEY:"AWS_SECRET_KEY",CA_HEALTH_NUMBER:"CA_HEALTH_NUMBER",CA_SOCIAL_INSURANCE_NUMBER:"CA_SOCIAL_INSURANCE_NUMBER",CREDIT_DEBIT_CARD_CVV:"CREDIT_DEBIT_CARD_CVV",CREDIT_DEBIT_CARD_EXPIRY:"CREDIT_DEBIT_CARD_EXPIRY",CREDIT_DEBIT_CARD_NUMBER:"CREDIT_DEBIT_CARD_NUMBER",DRIVER_ID:"DRIVER_ID",EMAIL:"EMAIL",INTERNATIONAL_BANK_ACCOUNT_NUMBER:"INTERNATIONAL_BANK_ACCOUNT_NUMBER",IP_ADDRESS:"IP_ADDRESS",LICENSE_PLATE:"LICENSE_PLATE",MAC_ADDRESS:"MAC_ADDRESS",NAME:"NAME",PASSWORD:"PASSWORD",PHONE:"PHONE",PIN:"PIN",SWIFT_CODE:"SWIFT_CODE",UK_NATIONAL_HEALTH_SERVICE_NUMBER:"UK_NATIONAL_HEALTH_SERVICE_NUMBER",UK_NATIONAL_INSURANCE_NUMBER:"UK_NATIONAL_INSURANCE_NUMBER",UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER:"UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER",URL:"URL",USERNAME:"USERNAME",US_BANK_ACCOUNT_NUMBER:"US_BANK_ACCOUNT_NUMBER",US_BANK_ROUTING_NUMBER:"US_BANK_ROUTING_NUMBER",US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER:"US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER",US_PASSPORT_NUMBER:"US_PASSPORT_NUMBER",US_SOCIAL_SECURITY_NUMBER:"US_SOCIAL_SECURITY_NUMBER",VEHICLE_IDENTIFICATION_NUMBER:"VEHICLE_IDENTIFICATION_NUMBER"},P={BLOCKED:"BLOCKED"},O={DENY:"DENY"},U={BLOCKED:"BLOCKED"},N={PROFANITY:"PROFANITY"};class B extends v.BedrockRuntimeServiceException{constructor(e){super({name:"InternalServerException",$fault:"server",...e}),this.name="InternalServerException",this.$fault="server",Object.setPrototypeOf(this,B.prototype)}}class D extends v.BedrockRuntimeServiceException{constructor(e){super({name:"ModelErrorException",$fault:"client",...e}),this.name="ModelErrorException",this.$fault="client",Object.setPrototypeOf(this,D.prototype),this.originalStatusCode=e.originalStatusCode,this.resourceName=e.resourceName}}class L extends v.BedrockRuntimeServiceException{constructor(e){super({name:"ModelNotReadyException",$fault:"client",...e}),this.name="ModelNotReadyException",this.$fault="client",Object.setPrototypeOf(this,L.prototype)}}class H extends v.BedrockRuntimeServiceException{constructor(e){super({name:"ModelTimeoutException",$fault:"client",...e}),this.name="ModelTimeoutException",this.$fault="client",Object.setPrototypeOf(this,H.prototype)}}class F extends v.BedrockRuntimeServiceException{constructor(e){super({name:"ResourceNotFoundException",$fault:"client",...e}),this.name="ResourceNotFoundException",this.$fault="client",Object.setPrototypeOf(this,F.prototype)}}class j extends v.BedrockRuntimeServiceException{constructor(e){super({name:"ThrottlingException",$fault:"client",...e}),this.name="ThrottlingException",this.$fault="client",Object.setPrototypeOf(this,j.prototype)}}class $ extends v.BedrockRuntimeServiceException{constructor(e){super({name:"ValidationException",$fault:"client",...e}),this.name="ValidationException",this.$fault="client",Object.setPrototypeOf(this,$.prototype)}}let q={ASYNC:"async",SYNC:"sync"};(h||(h={})).visit=(e,t)=>void 0!==e.text?t.text(e.text):void 0!==e.toolUse?t.toolUse(e.toolUse):t._(e.$unknown[0],e.$unknown[1]),(g||(g={})).visit=(e,t)=>void 0!==e.toolUse?t.toolUse(e.toolUse):t._(e.$unknown[0],e.$unknown[1]);class z extends v.BedrockRuntimeServiceException{constructor(e){super({name:"ModelStreamErrorException",$fault:"client",...e}),this.name="ModelStreamErrorException",this.$fault="client",Object.setPrototypeOf(this,z.prototype),this.originalStatusCode=e.originalStatusCode,this.originalMessage=e.originalMessage}}(m||(m={})).visit=(e,t)=>void 0!==e.messageStart?t.messageStart(e.messageStart):void 0!==e.contentBlockStart?t.contentBlockStart(e.contentBlockStart):void 0!==e.contentBlockDelta?t.contentBlockDelta(e.contentBlockDelta):void 0!==e.contentBlockStop?t.contentBlockStop(e.contentBlockStop):void 0!==e.messageStop?t.messageStop(e.messageStop):void 0!==e.metadata?t.metadata(e.metadata):void 0!==e.internalServerException?t.internalServerException(e.internalServerException):void 0!==e.modelStreamErrorException?t.modelStreamErrorException(e.modelStreamErrorException):void 0!==e.validationException?t.validationException(e.validationException):void 0!==e.throttlingException?t.throttlingException(e.throttlingException):t._(e.$unknown[0],e.$unknown[1]);let Y={DISABLED:"DISABLED",ENABLED:"ENABLED"};class G extends v.BedrockRuntimeServiceException{constructor(e){super({name:"ServiceQuotaExceededException",$fault:"client",...e}),this.name="ServiceQuotaExceededException",this.$fault="client",Object.setPrototypeOf(this,G.prototype)}}(y||(y={})).visit=(e,t)=>void 0!==e.chunk?t.chunk(e.chunk):void 0!==e.internalServerException?t.internalServerException(e.internalServerException):void 0!==e.modelStreamErrorException?t.modelStreamErrorException(e.modelStreamErrorException):void 0!==e.validationException?t.validationException(e.validationException):void 0!==e.throttlingException?t.throttlingException(e.throttlingException):void 0!==e.modelTimeoutException?t.modelTimeoutException(e.modelTimeoutException):t._(e.$unknown[0],e.$unknown[1]);let V=e=>void 0!==e.messageStart?{messageStart:e.messageStart}:void 0!==e.contentBlockStart?{contentBlockStart:e.contentBlockStart}:void 0!==e.contentBlockDelta?{contentBlockDelta:e.contentBlockDelta}:void 0!==e.contentBlockStop?{contentBlockStop:e.contentBlockStop}:void 0!==e.messageStop?{messageStop:e.messageStop}:void 0!==e.metadata?{metadata:e.metadata}:void 0!==e.internalServerException?{internalServerException:e.internalServerException}:void 0!==e.modelStreamErrorException?{modelStreamErrorException:e.modelStreamErrorException}:void 0!==e.validationException?{validationException:e.validationException}:void 0!==e.throttlingException?{throttlingException:e.throttlingException}:void 0!==e.$unknown?{[e.$unknown[0]]:"UNKNOWN"}:void 0,K=e=>({...e,...e.stream&&{stream:"STREAMING_CONTENT"}}),W=e=>({...e,...e.body&&{body:E.SENSITIVE_STRING}}),Q=e=>({...e,...e.body&&{body:E.SENSITIVE_STRING}}),J=e=>({...e,...e.body&&{body:E.SENSITIVE_STRING}}),X=e=>({...e,...e.bytes&&{bytes:E.SENSITIVE_STRING}}),Z=e=>void 0!==e.chunk?{chunk:E.SENSITIVE_STRING}:void 0!==e.internalServerException?{internalServerException:e.internalServerException}:void 0!==e.modelStreamErrorException?{modelStreamErrorException:e.modelStreamErrorException}:void 0!==e.validationException?{validationException:e.validationException}:void 0!==e.throttlingException?{throttlingException:e.throttlingException}:void 0!==e.modelTimeoutException?{modelTimeoutException:e.modelTimeoutException}:void 0!==e.$unknown?{[e.$unknown[0]]:"UNKNOWN"}:void 0,ee=e=>({...e,...e.body&&{body:"STREAMING_CONTENT"}})}),a("5nE0N",function(e,r){t(e.exports,"ConverseStreamCommand",()=>c),t(e.exports,"$Command",()=>s("8CeTn").Command),s("dpFrj");var n=s("kiuTm");s("aKRs7");var o=s("2CNf6");s("3ThPo");var i=s("8CeTn"),a=s("it8kL"),u=s("4YPzJ"),l=s("4ouFr");class c extends(0,i.Command).classBuilder().ep({...a.commonParams}).m(function(e,t,r,i){return[(0,o.getSerdePlugin)(r,this.serialize,this.deserialize),(0,n.getEndpointPlugin)(r,e.getEndpointParameterInstructions())]}).s("AmazonBedrockFrontendService","ConverseStream",{eventStream:{output:!0}}).n("BedrockRuntimeClient","ConverseStreamCommand").f(void 0,u.ConverseStreamResponseFilterSensitiveLog).ser(l.se_ConverseStreamCommand).de(l.de_ConverseStreamCommand).build(){}}),a("1w148",function(e,r){t(e.exports,"InvokeModelCommand",()=>c),t(e.exports,"$Command",()=>s("8CeTn").Command),s("dpFrj");var n=s("kiuTm");s("aKRs7");var o=s("2CNf6");s("3ThPo");var i=s("8CeTn"),a=s("it8kL"),u=s("4YPzJ"),l=s("4ouFr");class c extends(0,i.Command).classBuilder().ep({...a.commonParams}).m(function(e,t,r,i){return[(0,o.getSerdePlugin)(r,this.serialize,this.deserialize),(0,n.getEndpointPlugin)(r,e.getEndpointParameterInstructions())]}).s("AmazonBedrockFrontendService","InvokeModel",{}).n("BedrockRuntimeClient","InvokeModelCommand").f(u.InvokeModelRequestFilterSensitiveLog,u.InvokeModelResponseFilterSensitiveLog).ser(l.se_InvokeModelCommand).de(l.de_InvokeModelCommand).build(){}}),a("9Y5LT",function(e,r){t(e.exports,"InvokeModelWithResponseStreamCommand",()=>c),t(e.exports,"$Command",()=>s("8CeTn").Command),s("dpFrj");var n=s("kiuTm");s("aKRs7");var o=s("2CNf6");s("3ThPo");var i=s("8CeTn"),a=s("it8kL"),u=s("4YPzJ"),l=s("4ouFr");class c extends(0,i.Command).classBuilder().ep({...a.commonParams}).m(function(e,t,r,i){return[(0,o.getSerdePlugin)(r,this.serialize,this.deserialize),(0,n.getEndpointPlugin)(r,e.getEndpointParameterInstructions())]}).s("AmazonBedrockFrontendService","InvokeModelWithResponseStream",{eventStream:{output:!0}}).n("BedrockRuntimeClient","InvokeModelWithResponseStreamCommand").f(u.InvokeModelWithResponseStreamRequestFilterSensitiveLog,u.InvokeModelWithResponseStreamResponseFilterSensitiveLog).ser(l.se_InvokeModelWithResponseStreamCommand).de(l.de_InvokeModelWithResponseStreamCommand).build(){}}),a("hOEYj",function(t,r){var n=s("f7kty"),o=s("5nE0N"),i=s("1w148"),a=s("9Y5LT");e(t.exports,n),e(t.exports,o),e(t.exports,i),e(t.exports,a)}),a("Qij07",function(t,r){var n=s("4YPzJ");e(t.exports,n)});const u="You are a special browser-based Data Analysis assistant that helps the user with their query. Write any code required in Python only, especially the PyScript version since the code will be executed in the browser. Matplotlib, numpy and pandas libraries are installed already. For displaying matplotlib plots, just add the name of the object for example plt at the end. Write the python code between <python> and </python> blocks";function l(e,t){let r;let n=/<python>([\s\S]*?)<\/python>/g,o=0,i="";for(;null!==(r=n.exec(e));){let s=e.slice(o,r.index);if(i+=s,s.trim()){let e=document.createElement("div");e.className="mb-2",e.textContent=s.trim(),t.appendChild(e)}let a=r[1].trim();i+=`<python>${a}</python>`;let u=document.createElement("div");u.className="mb-4",u.id="py-repl-parent";let l=document.createElement("py-repl");l.className="mb-4",l.textContent=a,u.appendChild(l);let c=document.createElement("div");c.className="mb-4",c.id="py-terminal-parent";let d=document.createElement("py-terminal");d.id="py-terminal",c.appendChild(d),t.appendChild(u),t.appendChild(c),o=n.lastIndex}let s=e.slice(o);if(s.trim()){i+=s;let e=document.createElement("div");e.textContent=s.trim(),t.appendChild(e)}return i}const c=document.getElementById("chat-input"),d=document.getElementById("send-button"),f=document.getElementById("chat-messages"),p=document.getElementById("new-chat-button"),h=document.getElementById("saved-chats"),g=document.getElementById("typing-indicator");let m=null,y=[];function E(){g.classList.add("hidden")}function v(e,t=!1){let r=document.createElement("div");r.className=`p-4 ${t?"bg-blue-100 text-right":"bg-gray-100"} rounded-lg mb-2`,t?r.textContent=e:l(e,r),f.appendChild(r),f.scrollTop=f.scrollHeight,y.push({role:t?"user":"assistant",content:e}),m||(m=Date.now().toString(36)+Math.random().toString(36).substr(2)),localStorage.setItem(`chat_${m}`,JSON.stringify(y)),R()}async function S(){let e=c.value.trim();if(e){v(e,!0),c.value="",g.classList.remove("hidden"),f.scrollTop=f.scrollHeight;try{await b(e),E()}catch(e){console.error("Error:",e),E(),v("An error occurred while processing your request. Please try again.")}}}async function b(e){let t;let r=await chrome.storage.sync.get(["apiType","anthropicApiKey","awsAccessKeyId","awsSecretAccessKey"]);if("anthropic"===r.apiType)t=await x(e,r.anthropicApiKey);else if("aws-bedrock"===r.apiType)t=await w(e,r.awsAccessKeyId,r.awsSecretAccessKey);else throw Error("Invalid API type");return v(t),t}async function x(e,t){let r=(await chrome.storage.sync.get(["anthropicModel"])).anthropicModel||"claude-2",n=await fetch("https://api.anthropic.com/v1/messages",{method:"POST",headers:{"Content-Type":"application/json","x-api-key":t,"anthropic-version":"2023-06-01"},body:JSON.stringify({model:r,messages:y,system:u,max_tokens:1024})});if(!n.ok)throw console.error("Anthropic API Error:",await n.json()),Error(`Anthropic API request failed: ${n.status} ${n.statusText}`);return(await n.json()).content[0].text}async function w(e,t,r){let{BedrockRuntimeClient:n,InvokeModelWithResponseStreamCommand:o}=s("6qyar"),i=(await chrome.storage.sync.get(["awsModel"])).awsModel||"anthropic.claude-3-haiku-20240307-v1:0",a=new n({region:"us-east-1",credentials:{accessKeyId:t,secretAccessKey:r}}),l={modelId:i,contentType:"application/json",accept:"application/json",body:JSON.stringify({anthropic_version:"bedrock-2023-05-31",max_tokens:1024,system:u,messages:y,temperature:.7,top_p:.95})};try{let e=new o(l),t=await a.send(e),r="";for await(let e of t.body){let t=new TextDecoder().decode(e.chunk.bytes),n=JSON.parse(t);if("content_block_delta"===n.type){let e=n.delta.text;r+=e}}return r}catch(e){throw console.error("Error calling AWS Bedrock:",e),Error("AWS Bedrock API request failed")}}function R(){h.innerHTML="",Object.keys(localStorage).filter(e=>e.startsWith("chat_")).map(e=>({id:e.split("_")[1],timestamp:parseInt(e.split("_")[1].split("-")[0],36)})).sort((e,t)=>t.timestamp-e.timestamp).forEach(e=>{let t=document.createElement("div");t.className="flex justify-between items-center mb-2";let r=document.createElement("button");r.className="flex-grow text-left px-3 py-2 text-sm text-slate-700 rounded-md hover:bg-gray-100 dark:hover:bg-gray-900 dark:text-slate-400 dark:hover:text-slate-300",r.textContent=`Chat ${e.id.substr(0,6)}...`,r.addEventListener("click",()=>(function(e){let t=localStorage.getItem(`chat_${e}`);t&&(y=JSON.parse(t),m=e,f.innerHTML="",y.forEach(e=>{let t=document.createElement("div");t.className=`p-4 ${"user"===e.role?"bg-blue-100 text-right":"bg-gray-100"} rounded-lg mb-2`,"assistant"===e.role?l(e.content,t):t.textContent=e.content,f.appendChild(t)}),f.scrollTop=f.scrollHeight)})(e.id));let n=document.createElement("button");n.className="ml-2 px-2 py-1 text-xs text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-200",n.textContent="Delete",n.addEventListener("click",t=>{var r;t.stopPropagation(),r=e.id,confirm("Are you sure you want to delete this chat?")&&(localStorage.removeItem(`chat_${r}`),m===r&&A(),R())}),t.appendChild(r),t.appendChild(n),h.appendChild(t)})}function A(){m=null,f.innerHTML="",c.value="",y=[]}d.addEventListener("click",S),c.addEventListener("keypress",function(e){"Enter"!==e.key||e.shiftKey||(e.preventDefault(),S())}),p.addEventListener("click",A),R(),console.log("sidepanel.js loaded");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
